<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="2srcirs5amlnljothj4ontt1tc" modified-by="" style-id="300p0s8tu6a10jpkdrn3k4dlne" theme="xminddefaultthemeid" timestamp="1512781639062" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="1ndl0c9nbm47rr122ada1u23jv" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1512781151756"><title>IO流</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic id="41vev3pfofevtqod42lgvk3pie" modified-by="" timestamp="1512696385784"><title>IO</title><children><topics type="attached"><topic id="5f083lqj4otgdhhv5nallf2lq2" modified-by="" timestamp="1512696394309"><title>I</title><children><topics type="attached"><topic id="7l3r4kecem67g3kkuc1tgh1oge" modified-by="" timestamp="1512696382622"><title>input</title></topic><topic id="1otifhm6nlhaoqjq8ntrfs4fr5" modified-by="" timestamp="1512696398692"><title>输入</title></topic></topics></children></topic><topic id="5ov0vcc0ummsmebcsgksr19ojl" modified-by="" timestamp="1512696399048"><title>O</title><children><topics type="attached"><topic id="08a8smr6pqhpvnrp68odtbudu3" modified-by="" timestamp="1512696392697"><title>output</title></topic><topic id="5gma8hgbfpso1kdnqt9sf5b90a" modified-by="" timestamp="1512696402939"><title>输出</title></topic></topics></children></topic></topics></children></topic><topic id="007veen4bh7f39tr35ncdubh0s" modified-by="" timestamp="1512696481538"><title>IO流的分类</title><children><topics type="attached"><topic id="1p19fhfm9ofuqtjho25934lp5l" modified-by="" timestamp="1512696435503"><title>1、按照IO流的数据流动方向分</title><children><topics type="attached"><topic id="3ortfrorsqbgsb6v5br91henvb" modified-by="" timestamp="1512696435177"><title>输入流</title></topic><topic id="62ccdmlm4v6cu6uqkhmb6f48ak" modified-by="" timestamp="1512696437961"><title>输出流</title></topic></topics></children></topic><topic id="0nosqloerejmg0nba3mvb1lch4" modified-by="" timestamp="1512696467057"><title>2、按照IO流的数据处理的最小单位分</title><children><topics type="attached"><topic id="61u9e2q8roh64r8pc333p7b63q" modified-by="" timestamp="1512696466782"><title>字节流</title></topic><topic id="7cp2neb0s7al97n5hfvrrdc8cj" modified-by="" timestamp="1512696470101"><title>字符流</title></topic></topics></children></topic><topic id="3r965plun3pkp4j1b65be5crd3" modified-by="" timestamp="1512696499390"><title>3、根据IO流的作用分</title><children><topics type="attached"><topic id="0om2huem0p2dp11mj5hvkuhqvj" modified-by="" timestamp="1512696517667"><title>节点流</title><children><topics type="attached"><topic id="2ilpmb1k7r7c68fssvaucs9chp" modified-by="" timestamp="1512696518933"><title>例如：文件IO流</title><children><topics type="attached"><topic id="313bk1r0u82dat8msfaoama75s" modified-by="" timestamp="1512696526033"><title>连接文件节点</title></topic></topics></children></topic></topics></children></topic><topic id="4drua0oo926u3k7r4hpc8oq0hu" modified-by="" timestamp="1512696529138"><title>处理流</title><children><topics type="attached"><topic id="56folae3o7n59pout4t078qpnd" modified-by="" timestamp="1512696557201"><title svg:width="500">在节点流的基础上增加其他功能，例如缓冲，编码解码，序列化等</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="4fuuoor5b9tccrkrehcpdpe4l9" modified-by="" timestamp="1512696602858"><title>IO流的四个抽象基类，超级父类</title><children><topics type="attached"><topic id="751uf317rc1hh9541t1kkpeung" modified-by="" timestamp="1512696608053"><title>InputStream</title><children><topics type="attached"><topic id="4oo3tn3ak3h2kgefokutv0cla7" modified-by="" timestamp="1512696612015"><title>字节输入流</title></topic></topics></children></topic><topic id="15s8r4ae8pll9br4fia5qte2lh" modified-by="" timestamp="1512696614469"><title>OutputStream</title><children><topics type="attached"><topic id="2eou71a3ki85vc9bq35hs5irsu" modified-by="" timestamp="1512696617464"><title>字节输出流</title></topic></topics></children></topic><topic id="28cqsctj82bep98nkoa9v7ag32" modified-by="" timestamp="1512696621039"><title>Reader</title><children><topics type="attached"><topic id="5agdhflmrrdaomq5po18alkgq9" modified-by="" timestamp="1512696634287"><title>字符输入流</title></topic></topics></children></topic><topic id="2c19vp51kip2434p52h8o5a6fh" modified-by="" timestamp="1512696636514"><title>Writer</title><children><topics type="attached"><topic id="6pg51risajd2u7qf3oavft3jnb" modified-by="" timestamp="1512696644603"><title>字符输出流</title></topic></topics></children></topic></topics></children></topic><topic branch="folded" id="2o0f8keq7ubl4f3hjnpm8k8iif" modified-by="" timestamp="1512779890521"><title>和文件相关的IO流</title><children><topics type="attached"><topic id="25gv7qre5moeor1qcgp4ikotpo" modified-by="" timestamp="1512696812214"><title>类型</title><children><topics type="attached"><topic id="3dh394ihue99olp72dcimr6bab" modified-by="" timestamp="1512696812026"><title>FileInputStream</title><children><topics type="attached"><topic id="69vigb5cacmodmdjp1cthk69kd" modified-by="" timestamp="1512696686568"><title>文件字节输入流</title></topic><topic id="5q7cubu6o31alh7sjln1pmj9bq" modified-by="" timestamp="1512696694477"><title>读取任意类型的文件</title></topic></topics></children></topic><topic id="1ssl4dh3261pp5bn46a54ro28u" modified-by="" timestamp="1512696812053"><title>FileOutputStream</title><children><topics type="attached"><topic id="23esnamnbotig7slp29hf2n4vl" modified-by="" timestamp="1512696705401"><title>文件字节输出流</title></topic><topic id="2n53mmcfof1ojuv33773fdjdrv" modified-by="" timestamp="1512696714884"><title>写数据到任意类型的文件</title></topic></topics></children></topic><topic id="36avf7v0lcujfhab4jta57u6eq" modified-by="" timestamp="1512696812091"><title>FileReader</title><children><topics type="attached"><topic id="6lkhltr5614s0pcusjr7fn7t81" modified-by="" timestamp="1512696724459"><title>文件字符输入流</title></topic><topic id="6n13r71hs931jcdi9ff9scfpql" modified-by="" timestamp="1512696750952"><title>只能读取纯文本文件</title><children><topics type="attached"><topic id="02ffjtsliskkulvs2h5uo0uv3j" modified-by="" timestamp="1512696737583"><title>.java</title></topic><topic id="0vvtvdvacqu4vn3ntnqm5sh375" modified-by="" timestamp="1512696741429"><title>.txt</title></topic><topic id="215e82bltuqvp9eopu7fan077d" modified-by="" timestamp="1512696744544"><title>.html</title></topic><topic id="0ofdm1mraehthmn6ql0u5s8ofr" modified-by="" timestamp="1512696748082"><title>.js</title></topic><topic id="460iv64rdlf3ijnk22fptbismr" modified-by="" timestamp="1512696750732"><title>.css</title></topic><topic id="3jc60516adjnifp9eqq8j2544i" modified-by="" timestamp="1512696753273"><title>....</title></topic></topics></children></topic></topics></children></topic><topic id="6tsauk7s8li8v7tlkpanm1ljih" modified-by="" timestamp="1512696812181"><title>FileWriter</title><children><topics type="attached"><topic id="1ic62b2ueu9spe3qth3dlabss0" modified-by="" timestamp="1512696780059"><title>文件字符输出流</title></topic><topic id="1ed88pl6qpp3lske2gv96jhmpg" modified-by="" timestamp="1512696791039"><title>只能把数据保存到纯文本文件中</title></topic></topics></children></topic></topics></children></topic><topic id="2fr74ktgli1qcog1u2juudsgct" modified-by="" timestamp="1512696832497"><title>读取</title><children><topics type="attached"><topic id="2ounkughhp95et5le2rb0m1ou6" modified-by="" timestamp="1512697023555"><title>（1）读取一个纯文本文件</title><notes><html><xhtml:p>形式一：</xhtml:p><xhtml:p>//(1)指定要读取的文件</xhtml:p><xhtml:p>File file = new File("upload/exam.txt");</xhtml:p><xhtml:p/><xhtml:p>//(2)创建文本文件的输入流</xhtml:p><xhtml:p>FileReader fr = null;</xhtml:p><xhtml:p/><xhtml:p>try{</xhtml:p><xhtml:p>	fr = new FileReader(file);</xhtml:p><xhtml:p/><xhtml:p>	//(3)在当前程序中创建一个字符数组，用来保存每一次读取的文本信息</xhtml:p><xhtml:p>	char[] data = new char[10];</xhtml:p><xhtml:p/><xhtml:p>	//(4)用来记录每一次读取的字符个数</xhtml:p><xhtml:p>	int len;</xhtml:p><xhtml:p/><xhtml:p>	//(5)用来拼接从文件读取的信息</xhtml:p><xhtml:p>	StringBuilder sb = new StringBuilder();</xhtml:p><xhtml:p/><xhtml:p>	//(6)循环读取</xhtml:p><xhtml:p>	while((len = fr.read(data))!=-1){</xhtml:p><xhtml:p>		sb.append(new String(data,0,len));</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>	System.out.println(sb);</xhtml:p><xhtml:p>}catch(Exception e){</xhtml:p><xhtml:p>	//....</xhtml:p><xhtml:p>}finally{</xhtml:p><xhtml:p>	//(7)释放资源</xhtml:p><xhtml:p>	try{</xhtml:p><xhtml:p>		if(fr!=null){</xhtml:p><xhtml:p>			fr.close();</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>	}catch(Exception e){</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p/><xhtml:p>形式二：</xhtml:p><xhtml:p>File file = new File("upload/exam.txt");</xhtml:p><xhtml:p/><xhtml:p>try(</xhtml:p><xhtml:p>	FileReader fr = new FileReader(file);</xhtml:p><xhtml:p>){</xhtml:p><xhtml:p>	char[] data = new char[10];</xhtml:p><xhtml:p>	int len;</xhtml:p><xhtml:p>	StringBuilder sb = new StringBuilder();</xhtml:p><xhtml:p>	while((len = fr.read(data))!=-1){</xhtml:p><xhtml:p>		sb.append(new String(data,0,len));</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>	System.out.println(sb);</xhtml:p><xhtml:p>}catch(Exception e){</xhtml:p><xhtml:p>	//....</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p/></html><plain>形式一：&#13;
//(1)指定要读取的文件&#13;
File file = new File("upload/exam.txt");&#13;
&#13;
//(2)创建文本文件的输入流&#13;
FileReader fr = null;&#13;
&#13;
try{&#13;
	fr = new FileReader(file);&#13;
&#13;
	//(3)在当前程序中创建一个字符数组，用来保存每一次读取的文本信息&#13;
	char[] data = new char[10];&#13;
&#13;
	//(4)用来记录每一次读取的字符个数&#13;
	int len;&#13;
&#13;
	//(5)用来拼接从文件读取的信息&#13;
	StringBuilder sb = new StringBuilder();&#13;
&#13;
	//(6)循环读取&#13;
	while((len = fr.read(data))!=-1){&#13;
		sb.append(new String(data,0,len));&#13;
	}&#13;
	System.out.println(sb);&#13;
}catch(Exception e){&#13;
	//....&#13;
}finally{&#13;
	//(7)释放资源&#13;
	try{&#13;
		if(fr!=null){&#13;
			fr.close();&#13;
		}&#13;
	}catch(Exception e){&#13;
	}&#13;
}&#13;
&#13;
形式二：&#13;
File file = new File("upload/exam.txt");&#13;
&#13;
try(&#13;
	FileReader fr = new FileReader(file);&#13;
){&#13;
	char[] data = new char[10];&#13;
	int len;&#13;
	StringBuilder sb = new StringBuilder();&#13;
	while((len = fr.read(data))!=-1){&#13;
		sb.append(new String(data,0,len));&#13;
	}&#13;
	System.out.println(sb);&#13;
}catch(Exception e){&#13;
	//....&#13;
}&#13;
</plain></notes></topic><topic id="2di93q2chbmnlk990e9ir5d5lb" modified-by="" timestamp="1512697164623"><title>（2）读取任意类型的文件</title><notes><html><xhtml:p>//(1)指定文件</xhtml:p><xhtml:p>File file = new File(".....");</xhtml:p><xhtml:p/><xhtml:p>//(2)创建字节输入流</xhtml:p><xhtml:p>try(</xhtml:p><xhtml:p/><xhtml:p>	FileInputStream fis = new FileInputStream(file);</xhtml:p><xhtml:p>){</xhtml:p><xhtml:p>	//(3)创建字节数组，用来存储每次读取的内容</xhtml:p><xhtml:p>	byte[] data = new byte[1024];</xhtml:p><xhtml:p>	//(4)用len记录每次读取的字节数</xhtml:p><xhtml:p>	int len;</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	//(5)循环读取</xhtml:p><xhtml:p>	while( (len = fis.read(data)) !=-1){</xhtml:p><xhtml:p>		//......</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	</xhtml:p><xhtml:p>}catch(Exception e){</xhtml:p><xhtml:p>	//...</xhtml:p><xhtml:p>}</xhtml:p></html><plain>//(1)指定文件&#13;
File file = new File(".....");&#13;
&#13;
//(2)创建字节输入流&#13;
try(&#13;
&#13;
	FileInputStream fis = new FileInputStream(file);&#13;
){&#13;
	//(3)创建字节数组，用来存储每次读取的内容&#13;
	byte[] data = new byte[1024];&#13;
	//(4)用len记录每次读取的字节数&#13;
	int len;&#13;
	&#13;
	//(5)循环读取&#13;
	while( (len = fis.read(data)) !=-1){&#13;
		//......&#13;
	}&#13;
&#13;
	&#13;
}catch(Exception e){&#13;
	//...&#13;
}</plain></notes></topic></topics></children></topic><topic id="2uibbmae7nkgcj3g4hs0o9b75m" modified-by="" timestamp="1512696860845"><title>保存</title><children><topics type="attached"><topic id="2fm2mcmecjf2gsc8pna50r3r80" modified-by="" timestamp="1512697412332"><title>（1）把数据保存到一个纯文本文件</title><notes><html><xhtml:p>//(1)指定要保存的文件</xhtml:p><xhtml:p>File file = new File("....");</xhtml:p><xhtml:p/><xhtml:p>try(</xhtml:p><xhtml:p>	FileWriter fw = new FileWriter(file);</xhtml:p><xhtml:p>){</xhtml:p><xhtml:p>	String info = "....."; //要写入到文件的数据内容</xhtml:p><xhtml:p>	fw.write(info);</xhtml:p><xhtml:p/><xhtml:p>	//或</xhtml:p><xhtml:p>	char[] data = new char[1024];</xhtml:p><xhtml:p>	//...把数据保存到data中</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>	fw.write(data，0，len);</xhtml:p><xhtml:p>}catch(Exception e){</xhtml:p><xhtml:p>	//....</xhtml:p><xhtml:p>}</xhtml:p></html><plain>//(1)指定要保存的文件&#13;
File file = new File("....");&#13;
&#13;
try(&#13;
	FileWriter fw = new FileWriter(file);&#13;
){&#13;
	String info = "....."; //要写入到文件的数据内容&#13;
	fw.write(info);&#13;
&#13;
	//或&#13;
	char[] data = new char[1024];&#13;
	//...把数据保存到data中&#13;
	&#13;
	fw.write(data，0，len);&#13;
}catch(Exception e){&#13;
	//....&#13;
}</plain></notes></topic><topic id="1e51acknnd2e3rlap8r5j90j4i" modified-by="" timestamp="1512697400644"><title>（2）把数据保存到一个任意类型的文件</title><notes><html><xhtml:p>//(1)指定要保存的文件</xhtml:p><xhtml:p>File file = new File("....");</xhtml:p><xhtml:p/><xhtml:p>try(</xhtml:p><xhtml:p>	FileOutputSream fos  = new FileOutputSream(file);</xhtml:p><xhtml:p>){</xhtml:p><xhtml:p>	byte[] data = ....; //用来存储要输出到文件的内容</xhtml:p><xhtml:p/><xhtml:p>	fos.write(data,0 ,len);</xhtml:p><xhtml:p>}catch(Exception e){</xhtml:p><xhtml:p>	//....</xhtml:p><xhtml:p>}</xhtml:p></html><plain>//(1)指定要保存的文件&#13;
File file = new File("....");&#13;
&#13;
try(&#13;
	FileOutputSream fos  = new FileOutputSream(file);&#13;
){&#13;
	byte[] data = ....; //用来存储要输出到文件的内容&#13;
&#13;
	fos.write(data,0 ,len);&#13;
}catch(Exception e){&#13;
	//....&#13;
}</plain></notes></topic></topics></children></topic><topic id="4881bkusv66lldudd1fi3rttio" modified-by="" timestamp="1512698291157"><title>复制</title><children><topics type="attached"><topic id="15em53i209l38o11eembdjt4c4" modified-by="" timestamp="1512698347987"><title>一边读一边写</title><children><topics type="attached"><topic id="1m9cd93df6lreopjl8t38kktmf" modified-by="" timestamp="1512698347131"><title>纯文本文件</title><notes><html><xhtml:p>	public static void main(String[] args) {</xhtml:p><xhtml:p>		//(1)创建源文件对象</xhtml:p><xhtml:p>		File src = new File("1.txt");</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		//(2)创建目标文件对象</xhtml:p><xhtml:p>		File dest = new File("2.txt");</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		//(3)创建输入流</xhtml:p><xhtml:p>		FileReader fr = null;</xhtml:p><xhtml:p>		//(4)创建输出流</xhtml:p><xhtml:p>		FileWriter fw = null;</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		try {</xhtml:p><xhtml:p>			fr = new FileReader(src);</xhtml:p><xhtml:p>//			fw = new FileWriter(dest);//覆盖模式</xhtml:p><xhtml:p>			fw = new FileWriter(dest,true);//追加模式</xhtml:p><xhtml:p>			</xhtml:p><xhtml:p>			//(5)一边读一边写</xhtml:p><xhtml:p>			//从fr读一些，就写入fw一些</xhtml:p><xhtml:p>			char[] data = new char[6];//1024</xhtml:p><xhtml:p>			while(true){</xhtml:p><xhtml:p>				int len = fr.read(data);</xhtml:p><xhtml:p>				if(len == -1){</xhtml:p><xhtml:p>					break;</xhtml:p><xhtml:p>				}</xhtml:p><xhtml:p>				fw.write(data,0,len);//本次读了几个字符，就写几个字符</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>		} catch (FileNotFoundException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		} catch (IOException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		} finally{</xhtml:p><xhtml:p>			try {</xhtml:p><xhtml:p>				if(fr!=null){</xhtml:p><xhtml:p>					fr.close();</xhtml:p><xhtml:p>				}</xhtml:p><xhtml:p>			} catch (IOException e) {</xhtml:p><xhtml:p>				e.printStackTrace();</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>			</xhtml:p><xhtml:p>			try {</xhtml:p><xhtml:p>				if(fw!=null){</xhtml:p><xhtml:p>					fw.close();</xhtml:p><xhtml:p>				}</xhtml:p><xhtml:p>			} catch (IOException e) {</xhtml:p><xhtml:p>				e.printStackTrace();</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>	public static void main(String[] args) {&#13;
		//(1)创建源文件对象&#13;
		File src = new File("1.txt");&#13;
		&#13;
		//(2)创建目标文件对象&#13;
		File dest = new File("2.txt");&#13;
		&#13;
		//(3)创建输入流&#13;
		FileReader fr = null;&#13;
		//(4)创建输出流&#13;
		FileWriter fw = null;&#13;
		&#13;
		try {&#13;
			fr = new FileReader(src);&#13;
//			fw = new FileWriter(dest);//覆盖模式&#13;
			fw = new FileWriter(dest,true);//追加模式&#13;
			&#13;
			//(5)一边读一边写&#13;
			//从fr读一些，就写入fw一些&#13;
			char[] data = new char[6];//1024&#13;
			while(true){&#13;
				int len = fr.read(data);&#13;
				if(len == -1){&#13;
					break;&#13;
				}&#13;
				fw.write(data,0,len);//本次读了几个字符，就写几个字符&#13;
			}&#13;
		} catch (FileNotFoundException e) {&#13;
			e.printStackTrace();&#13;
		} catch (IOException e) {&#13;
			e.printStackTrace();&#13;
		} finally{&#13;
			try {&#13;
				if(fr!=null){&#13;
					fr.close();&#13;
				}&#13;
			} catch (IOException e) {&#13;
				e.printStackTrace();&#13;
			}&#13;
			&#13;
			try {&#13;
				if(fw!=null){&#13;
					fw.close();&#13;
				}&#13;
			} catch (IOException e) {&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
	}</plain></notes></topic><topic id="2bqud1m111jvi9eo27fekbr72g" modified-by="" timestamp="1512698365914"><title>任意类型文件</title><notes><html><xhtml:p>	public static void main(String[] args) {</xhtml:p><xhtml:p>		// (1)创建源文件对象</xhtml:p><xhtml:p>		File src = new File("2.jpeg");// 完整的描述：路径+文件名+后缀名</xhtml:p><xhtml:p/><xhtml:p>		// (2)创建目标文件对象</xhtml:p><xhtml:p>		File dest = new File("3.jpg");</xhtml:p><xhtml:p/><xhtml:p>		// (3)创建输入流</xhtml:p><xhtml:p>		// (4)创建输出流</xhtml:p><xhtml:p/><xhtml:p>		try (</xhtml:p><xhtml:p>				FileInputStream fis = new FileInputStream(src); </xhtml:p><xhtml:p>				FileOutputStream fos = new FileOutputStream(dest);</xhtml:p><xhtml:p>			) {</xhtml:p><xhtml:p/><xhtml:p>			byte[] data = new byte[10];</xhtml:p><xhtml:p/><xhtml:p>			int len;</xhtml:p><xhtml:p>			while ((len = fis.read(data)) != -1) {</xhtml:p><xhtml:p>				fos.write(data, 0, len);</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p/><xhtml:p>		} catch (FileNotFoundException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		} catch (IOException e) {</xhtml:p><xhtml:p>			e.printStackTrace();</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>	public static void main(String[] args) {&#13;
		// (1)创建源文件对象&#13;
		File src = new File("2.jpeg");// 完整的描述：路径+文件名+后缀名&#13;
&#13;
		// (2)创建目标文件对象&#13;
		File dest = new File("3.jpg");&#13;
&#13;
		// (3)创建输入流&#13;
		// (4)创建输出流&#13;
&#13;
		try (&#13;
				FileInputStream fis = new FileInputStream(src); &#13;
				FileOutputStream fos = new FileOutputStream(dest);&#13;
			) {&#13;
&#13;
			byte[] data = new byte[10];&#13;
&#13;
			int len;&#13;
			while ((len = fis.read(data)) != -1) {&#13;
				fos.write(data, 0, len);&#13;
			}&#13;
&#13;
		} catch (FileNotFoundException e) {&#13;
			e.printStackTrace();&#13;
		} catch (IOException e) {&#13;
			e.printStackTrace();&#13;
		}&#13;
	}</plain></notes></topic></topics></children></topic></topics></children></topic><topic id="1fb6jdpu2b6ecnu8e5hdvnatp8" modified-by="" timestamp="1512698199428"><title>File</title><children><topics type="attached"><topic id="7ar3nspiuu7s0grenga3ogvs6h" modified-by="" timestamp="1512697465333"><title>用来表示一个文件或者一个目录</title><children><topics type="attached"><topic id="7cjgiq8m584dv0l1pdnko7uunm" modified-by="" timestamp="1512697473613"><title>实际上是一个抽象的路径名</title></topic></topics></children></topic><topic id="0if02gvgd0ubuuud03vevlksie" modified-by="" timestamp="1512698236152"><title>获取文件或目录的一些信息</title><children><topics type="attached"><topic id="2cbimqk0bqvrucjmgkal8udngg" modified-by="" timestamp="1512697866272"><title>（1）获取文件的大小</title><children><topics type="attached"><topic id="3fmbdt2bjtii42ii3jt2onktq7" modified-by="" timestamp="1512697517658"><title>long length()</title></topic><topic id="0472t0lq11ipkva5demtlit500" modified-by="" timestamp="1512697699927"><title>如果要获取目录的大小，必须编写递归</title><notes><html><xhtml:p>	public long getDirLength(File dir){</xhtml:p><xhtml:p>		if(dir.isFile()){//如果是文件，直接返回文件的大小</xhtml:p><xhtml:p>			return dir.length();</xhtml:p><xhtml:p>		}else if(dir.isDirectory()){</xhtml:p><xhtml:p>			long sum = 0;</xhtml:p><xhtml:p>			File[] listFiles = dir.listFiles();</xhtml:p><xhtml:p>			for (File sub : listFiles) {</xhtml:p><xhtml:p>//				sum += 下一级的大小;</xhtml:p><xhtml:p>				sum += getDirLength(sub);</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>			return sum;</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>		return 0;//既不是文件又不是文件夹，不存在</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>	public long getDirLength(File dir){&#13;
		if(dir.isFile()){//如果是文件，直接返回文件的大小&#13;
			return dir.length();&#13;
		}else if(dir.isDirectory()){&#13;
			long sum = 0;&#13;
			File[] listFiles = dir.listFiles();&#13;
			for (File sub : listFiles) {&#13;
//				sum += 下一级的大小;&#13;
				sum += getDirLength(sub);&#13;
			}&#13;
			return sum;&#13;
		}&#13;
		return 0;//既不是文件又不是文件夹，不存在&#13;
	}</plain></notes></topic><topic id="6s9o2qjmv3t23aia78p500c8uu" modified-by="" timestamp="1512697875632"><title>如果文件不存在，返回0</title></topic></topics></children></topic><topic id="1g2d1ldqqsaquhm4v4g6fm82i7" modified-by="" timestamp="1512697613733"><title>（2）获取文件或目录的名称</title><children><topics type="attached"><topic id="3g4ke3hb29fq8a7p8d82ksrh6j" modified-by="" timestamp="1512697619083"><title>String getName()</title></topic></topics></children></topic><topic id="4eb18g8f8r5lpf07oeprej0np7" modified-by="" timestamp="1512697719967"><title>（3）获取文件或目录的路径</title><children><topics type="attached"><topic id="6pi97kr90om3k3mc96gl5j8llp" modified-by="" timestamp="1512697721348"><title svg:width="500">	String getPath()：获取路径&#13;
	String getAbsolutePath()：获取绝对路径&#13;
	String getCanonicalPath()：获取规范路径，例如：../   /</title></topic></topics></children></topic><topic id="75klpmhudr6gfnidk0gu0a8r0g" modified-by="" timestamp="1512697764000"><title>（4）获取文件的后缀名</title><children><topics type="attached"><topic id="23erov9ekb4kgrk1p24kg1vrgl" modified-by="" timestamp="1512697763300"><title svg:width="500">String name = file.getName();//得到文件名   包含扩展名</title></topic><topic id="53q6tcm3hhcgnj8q49ilagmtkk" modified-by="" timestamp="1512697765807"><title svg:width="500">String ext = name.substring(name.lastIndexOf('.'));</title></topic></topics></children></topic><topic id="09jgjt0bmc0u7km80nlt1t5pe6" modified-by="" timestamp="1512697876572"><title>（5）获取文件的最后修改时间</title><children><topics type="attached"><topic id="6bqm8fcdajnjotfs5fsoe8vtuk" modified-by="" timestamp="1512697810627"><title>long  lastModified()</title><children><topics type="attached"><topic id="7dlsblm3do5jm9vi6sqj9p0efd" modified-by="" timestamp="1512697814236"><title>毫秒数</title></topic></topics></children></topic><topic id="3gsif1quc3evvm6vuhiveknqhn" modified-by="" timestamp="1512697878120"><title>如果文件不存在，返回0</title></topic></topics></children></topic><topic id="2pqfo0plla7n8b18gkk6otmdrj" modified-by="" timestamp="1512698254338"><title>（6）获取上一级目录</title><children><topics type="attached"><topic id="53h12gpqpofg206rvqv8pps3b7" modified-by="" timestamp="1512698254091"><title>String getParent()</title></topic><topic id="7n4tjav476j6mnv3go6oa9737f" modified-by="" timestamp="1512698263049"><title>File getParentFile()</title></topic></topics></children></topic></topics></children></topic><topic id="1ps7s8jp4k367k0r293upjj5te" modified-by="" timestamp="1512698014073"><title>判断</title><children><topics type="attached"><topic id="68906ft083p7as3pproon2plq9" modified-by="" timestamp="1512697879989"><title>（1）是否是文件</title><children><topics type="attached"><topic id="3aneqhjs94hp4vcacvqsqtn9r1" modified-by="" timestamp="1512697888570"><title>isFile()</title><children><topics type="attached"><topic id="2msirgdilcp8pshr18kvhtq5ps" modified-by="" timestamp="1512697921397"><title svg:width="500">仅当file代表的文件存在，并且是个文件，才返回true</title></topic></topics></children></topic><topic id="0kfj1jksb8vu014jcvq4ei8jf0" modified-by="" timestamp="1512697887933"><title>如果文件不存在，返回false</title></topic></topics></children></topic><topic id="1vsg9tkeuucmuj88dmcibukvjm" modified-by="" timestamp="1512697954076"><title>（2）是否是目录</title><children><topics type="attached"><topic id="0hc2qk1t88jh4bmtkma38evma5" modified-by="" timestamp="1512697905812"><title>isDirectory()</title><children><topics type="attached"><topic id="3htciltianmlkhnuf0rdcvef31" modified-by="" timestamp="1512697952417"><title svg:width="500">仅当file对象代表的目录存在，并且是个文件夹目录，才返回true</title></topic></topics></children></topic><topic id="7urbh2na00ha5a5j64mfdoih03" modified-by="" timestamp="1512697961499"><title>如果对应的不存在，返回false</title></topic></topics></children></topic><topic id="5f6t9gnup1b52vigv5up3i830v" modified-by="" timestamp="1512697980698"><title>（3）是否存在</title><children><topics type="attached"><topic id="1r4upt24jt0jhmcuo6koor78mo" modified-by="" timestamp="1512697986053"><title>exists()</title></topic></topics></children></topic><topic id="4h59kjjl38as3l6701sdq55915" modified-by="" timestamp="1512697994200"><title>（4）是否隐藏</title><children><topics type="attached"><topic id="6ne25n3c5ammur849ba84g4df1" modified-by="" timestamp="1512698000371"><title>isHidden()</title></topic></topics></children></topic><topic id="2oat4a3v5cfic9g09i2gd9c45s" modified-by="" timestamp="1512698008415"><title>（5）文件是否可读</title><children><topics type="attached"><topic id="0gphia4skkvlv97qournjdqjro" modified-by="" timestamp="1512698013830"><title>canRead()</title></topic></topics></children></topic><topic id="1qus8eenipfehdk5hkvnt3k5pj" modified-by="" timestamp="1512698020658"><title>（6）文件是否可写</title><children><topics type="attached"><topic id="72j5vgda040vhfb91kfjbcvjd5" modified-by="" timestamp="1512698027883"><title>canWrite()</title></topic></topics></children></topic></topics></children></topic><topic id="5p85u4o49pehvr46s6bf878hhl" modified-by="" timestamp="1512698175990"><title>操作</title><children><topics type="attached"><topic id="18co879f4c6ob5o6kchos9f21p" modified-by="" timestamp="1512698045727"><title>（1）创建文件</title><children><topics type="attached"><topic id="57oaq9rs3mvjh2rbndq6u6c9b3" modified-by="" timestamp="1512698051504"><title>createNewFile()</title></topic></topics></children></topic><topic id="2ega6om76msju01ujm447fbpqq" modified-by="" timestamp="1512698062478"><title>（2）创建目录</title><children><topics type="attached"><topic id="6mkc159e0uc3rknhnlo9vbomm6" modified-by="" timestamp="1512698083344"><title>mkdir()</title><children><topics type="attached"><topic id="5t3de4i8fdqu43b2bjiaipbs8q" modified-by="" timestamp="1512698090689"><title>如果父目录不存在，那么创建失败</title></topic></topics></children></topic><topic id="63qcr58sv2csdnuet2mt6mumi0" modified-by="" timestamp="1512698069193"><title>mkdirs()</title><children><topics type="attached"><topic id="6nqb4rj1e5u3flna724h977ced" modified-by="" timestamp="1512698083077"><title>如果父目录不存在，也一并创建</title></topic></topics></children></topic></topics></children></topic><topic id="3pl01rjv766b2o64lkl9so5v2v" modified-by="" timestamp="1512698113690"><title>（3）删除文件或目录</title><children><topics type="attached"><topic id="5s0ruo23u9d2ikfjsiqpun83o5" modified-by="" timestamp="1512698103664"><title>delete()</title></topic><topic id="3qrlk0t6o9avbskcg1hu2fdjsf" modified-by="" timestamp="1512698110577"><title>只能删空目录</title></topic><topic id="5pmvhtgrajjl6oe4d2btjpmc51" modified-by="" timestamp="1512698156201"><title>如果要删除有内容的目录，需要使用递归</title><notes><html><xhtml:p>	public void delDir(File file){		</xhtml:p><xhtml:p>		//如果是目录</xhtml:p><xhtml:p>		if(file.isDirectory()){</xhtml:p><xhtml:p>			//(2)先获取下一级，并删除下一级</xhtml:p><xhtml:p>			//a：获取下一级</xhtml:p><xhtml:p>			File[] listFiles = file.listFiles();</xhtml:p><xhtml:p>			//b：遍历并删除下一级</xhtml:p><xhtml:p>			for (File sub : listFiles) {</xhtml:p><xhtml:p>				//这是一个重复的过程</xhtml:p><xhtml:p>				delDir(sub);//调用自己</xhtml:p><xhtml:p>			}</xhtml:p><xhtml:p>		}</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		//删除自己</xhtml:p><xhtml:p>		file.delete();</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>	public void delDir(File file){		&#13;
		//如果是目录&#13;
		if(file.isDirectory()){&#13;
			//(2)先获取下一级，并删除下一级&#13;
			//a：获取下一级&#13;
			File[] listFiles = file.listFiles();&#13;
			//b：遍历并删除下一级&#13;
			for (File sub : listFiles) {&#13;
				//这是一个重复的过程&#13;
				delDir(sub);//调用自己&#13;
			}&#13;
		}&#13;
		&#13;
		//删除自己&#13;
		file.delete();&#13;
	}</plain></notes></topic></topics></children></topic><topic id="00jk0egbnkcdp3l0b97pe2pmfu" modified-by="" timestamp="1512698183994"><title>（4）重命名</title><children><topics type="attached"><topic id="5f0ogsb25i1cu9edssm4sk9ppj" modified-by="" timestamp="1512698194337"><title>renameTo(File newFile)</title></topic></topics></children></topic></topics></children></topic><topic id="1q1lpfqu2p2st4ng49rcuv76f9" modified-by="" timestamp="1512698205593"><title>操作文件夹</title><children><topics type="attached"><topic id="23itvottcres7jinul89pmslsq" modified-by="" timestamp="1512698221881"><title>获取它的下一级</title><children><topics type="attached"><topic id="7aos4huetck1rvess6uu6saji9" modified-by="" timestamp="1512698220902"><title>String[] list();</title></topic><topic id="3p4hppcepfqndhi6bi03onjq3v" modified-by="" timestamp="1512698230551"><title>File[] listFiles()</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="1a8v2m4klucui8kjbemui2jtj7" modified-by="" timestamp="1512781326059"><title>处理流</title><children><topics type="attached"><topic id="7m5evf0ba5jaf6h1ju22f494ne" modified-by="" timestamp="1512779942539"><title>缓冲流</title><children><topics type="attached"><topic id="3jprc07jn5nr57ohoveibppu0g" modified-by="" timestamp="1512779926615"><title>作用：增加缓冲区，提供效率</title></topic><topic id="1iv0iqio19o63reta8teer5ppp" modified-by="" timestamp="1512780953516"><title>类型</title><children><topics type="attached"><topic id="09hsqnfhh6kapri8o716d3mtj0" modified-by="" timestamp="1512779982699"><title>BufferedInputStream</title><children><topics type="attached"><topic id="6ocvb48rbf2p3mik5a2kbrov7q" modified-by="" timestamp="1512779991054"><title>包装InputStream</title><children><topics type="attached"><topic id="00mtgkcs0khdtkiucgr8g7olg8" modified-by="" timestamp="1512780024776"><title svg:width="500">例如：FileInputStream、DataInputStream、ObjectInputStream等</title></topic></topics></children></topic></topics></children></topic><topic id="7itqjrhat09rs54m0u2e03t4i0" modified-by="" timestamp="1512780027061"><title>BufferedOutputStream</title><children><topics type="attached"><topic id="0ajs5aajtg294iq1pgh0b18t6c" modified-by="" timestamp="1512780034980"><title>包装OutputStream</title><children><topics type="attached"><topic id="4bmpqbq4n2467dm23pptr7uq6l" modified-by="" timestamp="1512780067049"><title svg:width="500">例如：FileOutputStream、DataOutputStream、ObjectOutputStream等</title></topic></topics></children></topic></topics></children></topic><topic id="1ifpg9vljge394ce8fr71635t4" modified-by="" timestamp="1512780893929"><title>BufferedReader</title><children><topics type="attached"><topic id="3p7pdh650qd2bu6hcga0oek2t5" modified-by="" timestamp="1512780075857"><title>包装Reader</title><children><topics type="attached"><topic id="0i7rkju6iii8p2d5s9ifhfg28l" modified-by="" timestamp="1512780099728"><title>例如：FileReader、InputStreamReader等</title></topic></topics></children></topic><topic id="0cf8g39htl0bvav6g6iksv9do9" modified-by="" timestamp="1512780907758"><title>String readLine()</title><children><topics type="attached"><topic id="2ojh96f1lcrac0724p4tm56k90" modified-by="" timestamp="1512780918223"><title>判断是否读完，使用 ==null</title></topic></topics></children></topic></topics></children></topic><topic id="5trs5a5gmkj8t517hif42hpu2a" modified-by="" timestamp="1512780920069"><title>BufferedWriter</title><children><topics type="attached"><topic id="7sv0e3v9tiv0f9pgqg8p4u03r6" modified-by="" timestamp="1512780107186"><title>包装Writer</title><children><topics type="attached"><topic id="5d4dl8d3dpu1nl3pdsq3pvuvqg" modified-by="" timestamp="1512780125312"><title>例如：FileWriter，OutputStreamWriter等</title></topic></topics></children></topic><topic id="29ap9rb2frn5k3jrdtc578l56j" modified-by="" timestamp="1512780932550"><title>write(String) + newLine()</title></topic></topics></children></topic><topic id="24b0e85k7771g3fmi5cui1ruio" modified-by="" timestamp="1512781005882"><title>缓冲区的大小</title><children><topics type="attached"><topic id="3hidibnoqj78devvjk35ebqa00" modified-by="" timestamp="1512780984666"><title>字节流</title><children><topics type="attached"><topic id="3htgph4en6pgsi1t8t85lipa70" modified-by="" timestamp="1512781005578"><title>8192字节</title></topic></topics></children></topic><topic id="6evt09phoue3mqdk9hsepe3ohv" modified-by="" timestamp="1512781009114"><title>字符流</title><children><topics type="attached"><topic id="47eqjvqlo9bsb5qp785umio7ho" modified-by="" timestamp="1512781013070"><title>8192字符</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="3makmna9fqvrmqoudjnqo5dvjd" modified-by="" timestamp="1512781190966"><title>数据流</title><children><topics type="attached"><topic id="3uhfgi0rksebii59ktnc69t57i" modified-by="" timestamp="1512781077200"><title svg:width="500">作用：可以处理Java的基本数据类型+字符串（UTF-8修改版）</title></topic><topic id="4ihtq5vc7lku6oeclskuajltcm" modified-by="" timestamp="1512781092446"><title>类型</title><children><topics type="attached"><topic id="153sjrfl8bnmdpbnluvkl8h08g" modified-by="" timestamp="1512781100210"><title>DataOutputStream</title><children><topics type="attached"><topic id="6sh1nfrhdhcsinu2a65a4lic9p" modified-by="" timestamp="1512781127335"><title>writeXxx()</title><children><topics type="attached"><topic id="0oc6858lof0d0el84ughgh7lol" modified-by="" timestamp="1512781139757"><title>writeInt(int)</title></topic><topic id="13um4dmijeu8ecgdh4euh2ksm7" modified-by="" timestamp="1512781142987"><title>writeDouble(double)</title></topic><topic id="010ila5cvb08mj3g1p1rjskvb6" modified-by="" timestamp="1512781147488"><title>writeChar(char)</title></topic><topic id="3vfuv8qgnq612r5reb1v562bt8" modified-by="" timestamp="1512781150492"><title>writeUTF(String)</title></topic></topics></children></topic></topics></children></topic><topic id="0koive5ipqcbu22h1grs59tf5h" modified-by="" timestamp="1512781154006"><title>DataInputStream</title><children><topics type="attached"><topic id="48ss07bir47g5hdo8qiml73ejp" modified-by="" timestamp="1512781181401"><title>readXxx()</title><children><topics type="attached"><topic id="22sqtdb5tt5nf4j60imjecf3g3" modified-by="" timestamp="1512781168993"><title>int readInt()</title></topic><topic id="7208bbubi5tp66lt0ch80qi078" modified-by="" timestamp="1512781175049"><title>double readDouble()</title></topic><topic id="794gf87kc3g9jt4mm4hsphvfhg" modified-by="" timestamp="1512781181149"><title>char readChar()</title></topic><topic id="4rra2j7c11vltqklh99es6ftv0" modified-by="" timestamp="1512781186803"><title>String readUTF()</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="17av3gacrk1vfb0fao91q35bk4" modified-by="" timestamp="1512781211285"><title>注意：</title><children><topics type="attached"><topic id="0alvaa35ocgkh3lndt6ufe8t7h" modified-by="" timestamp="1512781210247"><title svg:width="500">（1）DataOutputStream写，用DataInputStream读取</title></topic><topic id="5kupi9vf8rq4snmsrb4erd5khf" modified-by="" timestamp="1512781275052"><title>（2）写的顺序和读的顺序要一致</title><children><topics type="attached"><topic id="3a4uhfcflvtlfg8ueqiqraance" modified-by="" timestamp="1512781300956"><title svg:width="500">写与读之间需要配置文件等形式进行沟通顺序和类型</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="3etraldgkb79porvj4t63lvpv3" modified-by="" timestamp="1512781415636"><title>对象流</title><children><topics type="attached"><topic id="2upbolt4n810gvd8lv2irb48to" modified-by="" timestamp="1512781346651"><title>作用：可以处理Java对象等</title></topic><topic id="6p3aomkqggb9t8gp8eb9jq27gh" modified-by="" timestamp="1512781361793"><title>类型</title><children><topics type="attached"><topic id="380rdc34ub7c3nvm7tm64pe2er" modified-by="" timestamp="1512781398988"><title>ObjectOutputStream</title><children><topics type="attached"><topic id="3gpbdu1m9dppr1ca2okf6jdkpi" modified-by="" timestamp="1512781376608"><title>writeObject(Object)</title></topic><topic id="23lpi7a3cmn1mr7jdrm5b6pjj3" modified-by="" timestamp="1512781405087"><title>对象的序列化</title></topic></topics></children></topic><topic id="4qb8650c9ndr0cotuuk95n90sm" modified-by="" timestamp="1512781405303"><title>ObjectInputStream</title><children><topics type="attached"><topic id="7r5riguph5knpg48h8ukd45l5c" modified-by="" timestamp="1512781395221"><title>Object  readObject()</title></topic><topic id="3btj6fvb9u00598kkv5opkqoti" modified-by="" timestamp="1512781410987"><title>对象的反序列化</title></topic></topics></children></topic></topics></children></topic><topic id="0ilcuj0quqhfal9nuug6knunce" modified-by="" timestamp="1512781586140"><title>注意</title><children><topics type="attached"><topic id="7rfat08vgriqej5rn5kbjclh85" modified-by="" timestamp="1512781478781"><title svg:width="500">（1）凡是要序列化的对象，它的类型必须实现java.io.Serializable接口</title><children><topics type="attached"><topic id="71kohsj96fljkktl0if7rcqmqc" modified-by="" timestamp="1512781500767"><title>否则会报：NotSerializableExecption</title></topic></topics></children></topic><topic id="7fcfk9ahvv9fu7k2aope16cret" modified-by="" timestamp="1512781473317"><title svg:width="500">（2）如果属性涉及到其他的引用数据类型，那么这个类型也必须实现java.io.Serializable接口</title></topic><topic id="2jvom53135b30qimq1tt7df0bj" modified-by="" timestamp="1512781562150"><title svg:width="500">（3）如果某个属性不想要序列化，那么可以在属性之前加transient</title><children><topics type="attached"><topic id="7p03093fk0cpmq3sr4ngf03uqo" modified-by="" timestamp="1512781557449"><title svg:width="500">一旦加了这个关键字修饰，该属性的值会在序列化的过程中，被忽略</title></topic><topic id="4rh9dbm7i9nf6em95ohqp2mgd5" modified-by="" timestamp="1512781579498"><title svg:width="500">一旦加了这个关键字修饰，该属性在反序列化的过程中，它的值就赋默认值</title></topic></topics></children></topic><topic id="1v9ubqdgacv9aq8rkk6e432hj6" modified-by="" timestamp="1512781636514"><title svg:width="500">（4）在实现java.io.Serializable接口时，最好加一个常量：序列化版本ID</title><children><topics type="attached"><topic id="2mhkupgt40mdbhhk3j9pbqiurv" modified-by="" timestamp="1512781639062"><title>private static final long serialVersionUID = 1L;</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics><topics type="detached"><topic id="3d0tk8imk524ni0aakh61rk7nn" modified-by="" timestamp="1512697581878"><title>length</title><position svg:x="983" svg:y="457"/><children><topics type="attached"><topic id="38nvcpr68nk5rkc2cnajh187ot" modified-by="" timestamp="1512697537662"><title>数组</title><children><topics type="attached"><topic id="2uiqhjfa5dk9npnqiem3tj87nm" modified-by="" timestamp="1512697547534"><title>数组的长度</title><children><topics type="attached"><topic id="79u00tbmj7ee9e10iu2f7i5iq3" modified-by="" timestamp="1512697561010"><title>int  len = arr.length;</title><children><topics type="attached"><topic id="2gei37cuphoc50nvcuk6qdhjsm" modified-by="" timestamp="1512697563286"><title>属性</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="34r2iak5cgfpkjmkak50rusjo0" modified-by="" timestamp="1512697571672"><title>字符串的长度</title><children><topics type="attached"><topic id="4dg9d31rt2tv5eb9rqj0uorr1n" modified-by="" timestamp="1512697580155"><title>int len = str.length();</title></topic></topics></children></topic><topic id="0v7p6ellgme79l6f5a2plhac3o" modified-by="" timestamp="1512697586417"><title>文件的长度</title><children><topics type="attached"><topic id="7ikmbca7oiergkushieb3h31l4" modified-by="" timestamp="1512697592648"><title>long len = file.length();</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>IO流</title></sheet></xmap-revision-content>