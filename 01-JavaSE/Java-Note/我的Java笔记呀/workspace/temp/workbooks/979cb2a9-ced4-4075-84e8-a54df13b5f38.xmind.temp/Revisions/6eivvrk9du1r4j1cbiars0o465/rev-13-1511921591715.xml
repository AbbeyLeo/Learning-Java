<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6eivvrk9du1r4j1cbiars0o465" modified-by="" style-id="4tu1p48ubmesvqad3rkk4o2in5" theme="xminddefaultthemeid" timestamp="1511921589662" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="2ul034ag8lhhv78kr16cp16oh5" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1511920324355"><title>JavaSE  API</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic branch="folded" id="10j279t44jjt17j90bkpu6cjnn" modified-by="" timestamp="1511919244492"><title>java.lang.Object</title><children><topics type="attached"><topic id="2pbe3o6p4fgn4r1rddl177otrm" modified-by="" timestamp="1511572730743"><title>它是所有类型的根父类</title></topic><topic id="2g7488jcq0ta9g4ohg5c4sno65" modified-by="" timestamp="1511572759091"><title svg:width="500">一个类如果没有显式声明它的父类，这个类的直接父类就是Object</title></topic><topic id="1ud7hgpl9akkjeevv16ubi4a3s" modified-by="" timestamp="1511572813632"><title>理解</title><children><topics type="attached"><topic id="5rvsi084966cn5o5nphio6o14i" modified-by="" timestamp="1511572789226"><title svg:width="500">（1）Object类的所有方法，在所有对象中都有，包括数组对象</title></topic><topic id="0j9gmcogfotcpdensn97gkjhmp" modified-by="" timestamp="1511572795407"><title svg:width="500">（2）Object类的变量可以接受任意类型的对象&#13;
   Object类型的形参可以接受任意类型的对象作为实参&#13;
   Object[]类型的数组可以接受任意类型的对象作为它的元素</title></topic><topic id="7fk7a49ndojd5sfhhhk2d5fiki" modified-by="" timestamp="1511572828260"><title svg:width="500">（3）所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic><topic id="1gqsf04bqb67boaqojfm0k50l8" modified-by="" timestamp="1511573316944"><title>方法</title><children><topics type="attached"><topic id="7snsivgmdfhe97e380tk13v1lm" modified-by="" timestamp="1511572837545"><title>（1）无参构造</title><children><topics type="attached"><topic id="5v31pq967mgh69tkmdi3j9n2kb" modified-by="" timestamp="1511572847903"><title>Object() </title><children><topics type="attached"><topic id="1970uovu7fqt3onrt93essiicd" modified-by="" timestamp="1511572849316"><title>所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic></topics></children></topic><topic id="0j5osu03hep3385mg3los44t2u" modified-by="" timestamp="1511572876178"><title svg:width="500">（2）protected Object clone() throws CloneNotSupportedException</title><children><topics type="attached"><topic id="7bq0vqgeb145s8utiot89h9udc" modified-by="" timestamp="1511572929877"><title svg:width="500">如果子类要支持克隆，子类需要实现Cloneable接口，否则报CloneNotSupportedException</title></topic></topics></children></topic><topic id="2qn1o2oe0ppqkaqaototo854l8" modified-by="" timestamp="1511573358611"><title>（3）public boolean equals(Object obj)</title><children><topics type="attached"><topic id="2hb8e28a8i7jj2n4ejr4g0dolv" modified-by="" timestamp="1511572968855"><title>指示其他某个对象obj是否与此对象this“相等”。 </title></topic><topic id="2hrg2vt6go95ou9mvvlq1ud8qp" modified-by="" timestamp="1511572994112"><title svg:width="500">Object中的equals，等价于“==”比较，比较的是对象的地址</title></topic><topic id="14fkse5dqrtc7g5gfnc8smk2jl" modified-by="" timestamp="1511573014100"><title svg:width="500">如果子类需要比较的是属性的内容，那么一定要重写这个方法</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="3eq14iejp9ih6a7kisbd80a5qa" modified-by="" timestamp="1511573360548"><title>（4）public int hashCode()</title><children><topics type="attached"><topic id="2qi9cbg6ciclqturd1k3cj3m9g" modified-by="" timestamp="1511573050728"><title svg:width="500">在Object中默认这个方法返回的是 和“地址”相关的值</title></topic><topic id="10ehkgmn6b70dii0bk37s1ap6t" modified-by="" timestamp="1511573095320"><title svg:width="500">如果重写了equals，那么必须重写hashCode方法，而且参与equals比较的属性，一定要参与hashCode的计算</title></topic><topic id="5emrkq7haub70p1oeqf7b6jsu2" modified-by="" timestamp="1511573111394"><title>它俩的关系：</title><children><topics type="attached"><topic id="449fn08uo34f243c71nfdkh92c" modified-by="" timestamp="1511573127595"><title svg:width="500">两个对象的equals()返回true，两个对象的hashCode值？一定相等&#13;
两个对象的hashCode值不相等，两个对象equals方法结果？一定不相等&#13;
两个对象的hashCode值相等，两个对象equals方法结果？不一定相等</title></topic></topics></children></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="2fe74f18ccdbapsnk8p26nv77u" modified-by="" timestamp="1511573370292"><title>（5）public final Class&lt;?&gt; getClass()</title><children><topics type="attached"><topic id="246s0tuejfhcedpoo6vnk7qfas" modified-by="" timestamp="1511573191375"><title>返回某个对象的运行时类型，而不是编译时类型</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="449j1nkd7eq74brfemqlu6dg9r" modified-by="" timestamp="1511573218908"><title svg:width="500">（6）protected void finalize() throws Throwable</title><children><topics type="attached"><topic id="6c1p74qcbussagac1kg1ctvnkc" modified-by="" timestamp="1511573243610"><title svg:width="500">当这个对象被垃圾回收机制回收之前调用，而且只会调用一次</title></topic></topics></children></topic><topic id="59e58fnm23srfjaa6ip4pvan17" modified-by="" timestamp="1511573364450"><title>（7）public String toString()</title><children><topics type="attached"><topic id="2uc5fa1q86bnmgpdasjud9dc45" modified-by="" timestamp="1511573293517"><title svg:width="500">在Object中默认返回的是   这个对象的运行是类型@这个对象的hash值的十六进制表现形式</title></topic><topic id="0au2f6p4e26pi51shcohmgs6nj" modified-by="" timestamp="1511573300336"><title>子类完全可以重写</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="0am56jtvj639bcqr39de833us3" modified-by="" timestamp="1511573344506"><title svg:width="500">（8）剩下的notify,notifyAll和wait在多线程中使用</title></topic></topics></children></topic></topics></children></topic><topic branch="folded" id="14biqn6a09tajp5g7kdv67kb5d" modified-by="" timestamp="1511920346661"><title>包装类&#13;
java.lang</title><children><topics type="attached"><topic id="43vbdobctmil05gmjveriige6m" modified-by="" timestamp="1511919332472"><title>装箱与拆箱</title><children><topics type="attached"><topic id="4hjun1sjh4h5dns7ne7dthkkrm" modified-by="" timestamp="1511919329086"><title>装箱</title><children><topics type="attached"><topic id="15nmi0nnnkb26das6g4952s87i" modified-by="" timestamp="1511919287345"><title>JDK1.5之前手动装箱</title><children><topics type="attached"><topic id="70hvu1fjp6895ebdtu3fltqium" modified-by="" timestamp="1511919298846"><title>Integer i = new Integer(整数);</title></topic></topics></children></topic><topic id="6qsas6gcaf0lo6vlpf8b262vjq" modified-by="" timestamp="1511919305412"><title>JDK1.5之后自动装箱</title><children><topics type="attached"><topic id="2uebqi4mbramr9va3rml41hni7" modified-by="" timestamp="1511919316288"><title>Ineteger i = 整数;</title></topic></topics></children></topic></topics></children></topic><topic id="0sd57rifjit10fia8027nei0f4" modified-by="" timestamp="1511919451471"><title>拆箱</title><children><topics type="attached"><topic id="42t8krg1qs4iv2m0041gpptpi0" modified-by="" timestamp="1511919430078"><title>JDK1.5之前手动拆箱</title><children><topics type="attached"><topic id="0lcfs7f3l3980019r6cfj3vof8" modified-by="" timestamp="1511919447952"><title>Integer i = new Integer(整数);&#13;
int num = i.intValue();</title></topic></topics></children></topic><topic id="24apvr47o6i9l0515fmle501sq" modified-by="" timestamp="1511919475344"><title>JDK1.5之后自动拆箱</title><children><topics type="attached"><topic id="1rh7pnkm4hof2e83tu783nkk9q" modified-by="" timestamp="1511919480434"><title>Integer i = new Integer(整数);&#13;
int num = i;</title></topic></topics></children></topic></topics></children></topic><topic id="0qfauc9e6fpn845mif8441i0uf" modified-by="" timestamp="1511919353770"><title svg:width="500">原则：只能是对应的包装类和基本数据类型之间进行转换</title></topic></topics></children></topic><topic id="3ookc301uqhcvj2cp54hdnr2bh" modified-by="" timestamp="1511919405715"><title>对应的关系</title><children><topics type="attached"><topic id="4cjhht23v9vujn5k8t3cr0qsc4" modified-by="" timestamp="1511919365588"><title>byte</title><children><topics type="attached"><topic id="1ql5kqquue92s33hb36jmucd82" modified-by="" timestamp="1511919367998"><title>Byte</title></topic></topics></children></topic><topic id="5nolfbmumk64kta9hfsrusnfn5" modified-by="" timestamp="1511919370865"><title>short</title><children><topics type="attached"><topic id="3ggsha1ktobb8ohtmfu10e84ed" modified-by="" timestamp="1511919373045"><title>Short</title></topic></topics></children></topic><topic id="1a2i46geu5fcqfdrvnq5dg1dkk" modified-by="" timestamp="1511919375518"><title>int</title><children><topics type="attached"><topic id="3aklhutqkoca358ln7adt0vg8o" modified-by="" timestamp="1511919378247"><title>Integer</title></topic></topics></children></topic><topic id="0mbpha6qrnv4eq7v6bjcvroqqb" modified-by="" timestamp="1511919381021"><title>long</title><children><topics type="attached"><topic id="2rarbhbcpgejjja3mid7rm83f2" modified-by="" timestamp="1511919384215"><title>Long</title></topic></topics></children></topic><topic id="6h07pu0tfmrb970mqqcs7e7oh7" modified-by="" timestamp="1511919388684"><title>char</title><children><topics type="attached"><topic id="6tae47jd5irhjd2bm2pj2dadfl" modified-by="" timestamp="1511919392373"><title>Character</title></topic></topics></children></topic><topic id="2n8raqp6djasu37rj40ggm989g" modified-by="" timestamp="1511919396914"><title>float</title><children><topics type="attached"><topic id="3ckrtdb1m0k3v52320dgjal35a" modified-by="" timestamp="1511919399146"><title>Float</title></topic></topics></children></topic><topic id="649ckh6qncfmu8i3h6st24bggf" modified-by="" timestamp="1511919402089"><title>double</title><children><topics type="attached"><topic id="763l4smltp9e7u5anlh49b93qi" modified-by="" timestamp="1511919405436"><title>Double</title></topic></topics></children></topic><topic id="6rhd0f4kb131j50ggmiksnqjj9" modified-by="" timestamp="1511919409428"><title>boolean</title><children><topics type="attached"><topic id="0hb94u6pqotap3ceubqqp53p7o" modified-by="" timestamp="1511919414528"><title>Boolean</title></topic></topics></children></topic></topics></children></topic><topic id="12vmnki2rn22jfojc9vmqtv2gk" modified-by="" timestamp="1511919921267"><title>其他方法</title><children><topics type="attached"><topic id="57od12mblm26serhqjs16nb5e2" modified-by="" timestamp="1511919832844"><title>字符串与基本数据类型的转换</title><marker-refs><marker-ref marker-id="flag-red"/><marker-ref marker-id="star-red"/></marker-refs><children><topics type="attached"><topic id="3a1hou9skr1jaoeskda5shs3eq" modified-by="" timestamp="1511919768371"><title svg:width="500">public static int parseInt(String s)throws NumberFormatException</title><children><topics type="attached"><topic id="5fd36vqhr445vsursln8r94633" modified-by="" timestamp="1511919663651"><title>如果包含字母等非数字字符，会报错</title></topic></topics></children></topic><topic id="46vf22mskdup3ohcfl1pav8qiv" modified-by="" timestamp="1511919770017"><title svg:width="500">public static int parseInt(String s, int radix)throws NumberFormatException</title><children><topics type="attached"><topic id="2frag33kdkqap1t2e7bsh3detd" modified-by="" timestamp="1511919681206"><title>可以包含字母，但是要在基数范围内</title></topic><topic id="7hhrpddlt5r0t2335nm61f8asi" modified-by="" timestamp="1511919727698"><title svg:width="500">例如基数radix是20，可以包含的范围是0-9,a,b,c,d,e,f,g,h,i,j</title></topic></topics></children></topic><topic id="0la12jp1e6r6k4snk2n0kdu1lf" modified-by="" timestamp="1511919766216"><title svg:width="500">public static Integer valueOf(String s)throws NumberFormatException</title></topic><topic id="273qdvokfl4orfovik8s216sae" modified-by="" timestamp="1511919786550"><title>public static Integer valueOf(String s,&#13;
                              int radix)&#13;
                       throws NumberFormatException</title></topic></topics></children></topic><topic id="16s3oj3veurt1gt174ouqqfiet" modified-by="" timestamp="1511919902051"><title>像Integer中</title><children><topics type="attached"><topic id="06ln65897kp1c16rdbq2od8nqg" modified-by="" timestamp="1511919867257"><title>public static String toBinaryString(int i)</title><children><topics type="attached"><topic id="2fqd533mdmjcab1vasctjbfvep" modified-by="" timestamp="1511919873378"><title>二进制形式</title></topic></topics></children></topic><topic id="4f7ak25f0f0p562akcb6lml5fa" modified-by="" timestamp="1511919884224"><title>public static String toOctalString(int i)</title><children><topics type="attached"><topic id="1khhkkqftqug6v0goekl4de4cj" modified-by="" timestamp="1511919894507"><title>八进制形式</title></topic></topics></children></topic><topic id="3j8tv75fsk4h4vc1ps5cpl94fu" modified-by="" timestamp="1511919904219"><title>public static String toHexString(int i)</title><children><topics type="attached"><topic id="3alsag3m2tu1fa5d8ku3vpbbfl" modified-by="" timestamp="1511919910319"><title>十六进制形式</title></topic></topics></children></topic></topics></children></topic><topic id="1cabbic9b4svntqj311sibcbbi" modified-by="" timestamp="1511919981962"><title>像Character中</title><children><topics type="attached"><topic id="4conlbad3hvvvh2gr6i1am421a" modified-by="" timestamp="1511919984676"><title>public static char toLowerCase(char ch)</title><children><topics type="attached"><topic id="3fq6l97veurcf9rhpvsrf3fmdf" modified-by="" timestamp="1511919990008"><title>转小写</title></topic></topics></children></topic><topic id="6otan9lui3t8qnmgsgqn1jhkoc" modified-by="" timestamp="1511919990404"><title>public static char toUpperCase(char ch)</title><children><topics type="attached"><topic id="63nd637823qi8rmqitmjuncg1j" modified-by="" timestamp="1511919992873"><title>转大写</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="0pa1u1qas8njs2dg6oirjp0ur7" modified-by="" timestamp="1511920256663"><title>包装类对象的缓存问题（常量对象）</title><children><topics type="attached"><topic id="32j2jsup1boh6v9d2cr1nbo85r" modified-by="" timestamp="1511920051872"><title>Byte,Short,Integer,Long</title><children><topics type="attached"><topic branch="folded" id="4v8dn3ol2qrt5jn8frg155ue37" modified-by="" timestamp="1511920058225"><title>-128~127</title></topic></topics></children></topic><topic id="68njg2ao47che8v4okmt7sqhm4" modified-by="" timestamp="1511920223526"><title>Float,Double</title><children><topics type="attached"><topic id="55knjtsl1bq4hgk32qhqjulv81" modified-by="" timestamp="1511920230638"><title>没有缓存</title></topic></topics></children></topic><topic id="4shignrtg2hrovu6igetv8tufc" modified-by="" timestamp="1511920249461"><title>Character</title><children><topics type="attached"><topic id="4ed5gui4a9tdr6aam1a2ob7ceh" modified-by="" timestamp="1511920256431"><title>0~127</title></topic></topics></children></topic><topic id="2svngppcr0aousvdic8tigkkgc" modified-by="" timestamp="1511920263029"><title>Boolean</title><children><topics type="attached"><topic id="3pi7id9v4uav4afjfditcjg043" modified-by="" timestamp="1511920262766"><title>true</title></topic><topic id="4899snbseipib74mivnf7ddarf" modified-by="" timestamp="1511920266687"><title>false</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="4v8n48u8qtcslu3npop5ju4r7g" modified-by="" timestamp="1511920697929"><title>java.lang.String</title><children><topics type="attached"><topic id="1de1hgjmfi5mhg6u887b4gcdu8" modified-by="" timestamp="1511920462248"><title>字符串类型的特点</title><children><topics type="attached"><topic id="63sm0jv4b1itplpu9jdr8kgicq" modified-by="" timestamp="1511920354137"><title>1、不能被继承</title><children><topics type="attached"><topic id="2ru5mg1u9eklbbqrk7ttpalcta" modified-by="" timestamp="1511920369501"><title>因为String是final修饰的类</title></topic></topics></children></topic><topic id="1qr0261lp7ns9eetdmjsfnqe4e" modified-by="" timestamp="1511920388073"><title svg:width="500">2、字符串对象是常量对象，一旦创建就不能修改，一旦修改就是新对象</title></topic><topic id="2k1h5u99lc8b3phjcs01up547h" modified-by="" timestamp="1511920482775"><title svg:width="500">3、因为字符串对象是常量对象，那么可以共享，字符串常量对象是在常量池中</title><children><topics type="attached"><topic id="5uupursohrqlchumt0fgsk6hq3" modified-by="" timestamp="1511920508157"><title>常量池在哪里</title><children><topics type="attached"><topic id="7bl0e9kdoahpefsoc75dvchrm7" modified-by="" timestamp="1511920496205"><title>JDK1.6，方法区</title></topic><topic id="5jqtj8mg4ji07ojop76tm2vs7f" modified-by="" timestamp="1511920507885"><title>JDK1.7，堆</title></topic><topic id="5s4mo6a03it0kbb797imute42e" modified-by="" timestamp="1511920513240"><title>JDK1.8，元空间</title></topic></topics></children></topic></topics></children></topic><topic id="7ek0j9up5js4ich5e62td49t9d" modified-by="" timestamp="1511920450934"><title>4、任何字符串字面量都是String的对象</title></topic><topic id="45skslraki1t52vft6ineoebh9" modified-by="" timestamp="1511920460658"><title>5、字符串底层使用字符数组存储</title></topic><topic id="7e9897rv790rsgmrq65bvnv4n8" modified-by="" timestamp="1511920475832"><title>6、字符数组是private final修饰符</title></topic></topics></children></topic><topic id="3sipceqie7g9sp24b0ss1vogja" modified-by="" timestamp="1511920608142"><title>拼接和比较</title><children><topics type="attached"><topic branch="folded" id="6q4ipc65lleqt8fd3b0aac7di8" modified-by="" timestamp="1511920776296"><title>1、创建对象的个数</title><children><topics type="attached"><topic id="0lk1b6962377ku2sfuan1fv59p" modified-by="" timestamp="1511920562380"><title>String str1 = "hello";&#13;
String str2 = "hello";</title><children><topics type="attached"><topic id="75u81sh3g3g9a8ug46a57gh8g0" modified-by="" timestamp="1511920569648"><title>一个，在常量池</title></topic></topics></children></topic><topic id="6v739ujm814t12dk8oggfmmrmr" modified-by="" timestamp="1511920585748"><title>String str1 = new String("hello");&#13;
String str2 = new String("hello");</title><children><topics type="attached"><topic id="0t8o0jkjv0hctip63vmcnm6qkh" modified-by="" timestamp="1511920596230"><title>三个</title><children><topics type="attached"><topic id="0tgn2j7jp7l4lp5e437f2kl5n5" modified-by="" timestamp="1511920595988"><title>一个在常量池</title></topic><topic id="799of2p517dpu834lf73knpoa5" modified-by="" timestamp="1511920600597"><title>两个在堆中</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="3o454c9jnli355jumjr09lk07j" modified-by="" timestamp="1511920781475"><title>2、拼接和比较</title><children><topics type="attached"><topic id="2kb03pcrj50nmfcmvrecim8kcc" modified-by="" timestamp="1511920688570"><title svg:width="500">原则：+两边都是常量，结果也是常量，+两边有一个是变量，结果就不是常量，在堆中，如果结果使用了intern()，那么是常量</title><notes><html><xhtml:p>	@Test</xhtml:p><xhtml:p>	public void test3(){</xhtml:p><xhtml:p>		String str1 = "hello";</xhtml:p><xhtml:p>		String str2 = "java";</xhtml:p><xhtml:p>		String str3 = "hellojava";</xhtml:p><xhtml:p>		String str4 = "hello" + "java";//常量与常量拼接，还是常量</xhtml:p><xhtml:p>		String str5 = "hello" + str2;//常量与变量拼接，结果在堆中</xhtml:p><xhtml:p>		String str6 = str1 + str2;//变量与变量拼接，结果也在堆中</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		System.out.println("str3 == str4  " + (str3 == str4));//true</xhtml:p><xhtml:p>		System.out.println("str3 == str5  " + (str3 == str5));//false</xhtml:p><xhtml:p>		System.out.println("str3 == str6  " + (str3 == str6));//false</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		final String str7 = "hello";</xhtml:p><xhtml:p>		final String str8 = "java";</xhtml:p><xhtml:p>		String str9 = str7 + str8;//常量与常量拼接</xhtml:p><xhtml:p>		System.out.println("str3 == str9   " + (str3 == str9));//true</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		String str10 = (str1 + str2).intern();//intern()的结果放常量池</xhtml:p><xhtml:p>		System.out.println(str3 == str10);//true</xhtml:p><xhtml:p>	}</xhtml:p></html><plain>	@Test&#13;
	public void test3(){&#13;
		String str1 = "hello";&#13;
		String str2 = "java";&#13;
		String str3 = "hellojava";&#13;
		String str4 = "hello" + "java";//常量与常量拼接，还是常量&#13;
		String str5 = "hello" + str2;//常量与变量拼接，结果在堆中&#13;
		String str6 = str1 + str2;//变量与变量拼接，结果也在堆中&#13;
		&#13;
		System.out.println("str3 == str4  " + (str3 == str4));//true&#13;
		System.out.println("str3 == str5  " + (str3 == str5));//false&#13;
		System.out.println("str3 == str6  " + (str3 == str6));//false&#13;
		&#13;
		final String str7 = "hello";&#13;
		final String str8 = "java";&#13;
		String str9 = str7 + str8;//常量与常量拼接&#13;
		System.out.println("str3 == str9   " + (str3 == str9));//true&#13;
		&#13;
		String str10 = (str1 + str2).intern();//intern()的结果放常量池&#13;
		System.out.println(str3 == str10);//true&#13;
	}</plain></notes></topic></topics></children></topic></topics></children></topic><topic id="3s9d1fgg85hl7j8jil3adqaosp" modified-by="" timestamp="1511920707728"><title>常用的方法</title><children><topics type="attached"><topic id="4bv3hoig3sbvkbami94c0dg7rl" modified-by="" timestamp="1511920795382"><title>1、基本方法</title><children><topics type="attached"><topic id="0ojbela9en1csu3vc72uhvre5o" modified-by="" timestamp="1511920792476"><title>（1）int length()</title><children><topics type="attached"><topic id="30q6fkugcrl34iq8utcu5m585l" modified-by="" timestamp="1511920749163"><title>返回字符串的长度，即字符的个数</title></topic></topics></children></topic><topic id="6as1d6nvc4a2v96v4dvl4k67uo" modified-by="" timestamp="1511921518125"><title>（2）字符串的比较</title><children><topics type="attached"><topic id="6h0aae076jnd5rhr3sa3aka4re" modified-by="" timestamp="1511920851721"><title>boolean  equals(String other)</title><children><topics type="attached"><topic id="33c5hldl95481lot861iqiirsp" modified-by="" timestamp="1511920836025"><title>this和other进行内容比较</title></topic><topic id="21cq4kv3n7ta2v129sqa7gu7e4" modified-by="" timestamp="1511920847693"><title>对Object的equals进行重写</title></topic><topic id="7879dnoujq8s2sb1s9k6tbv0rj" modified-by="" timestamp="1511920857283"><title>严格区分大小写</title></topic></topics></children></topic><topic id="7js7rgsbv0prohc27l8rmiqqib" modified-by="" timestamp="1511920885209"><title svg:width="500">boolean equalsIgnoreCase(String anotherString)</title><children><topics type="attached"><topic id="5t09lu0tm6ec0knjmtk8sg9ovr" modified-by="" timestamp="1511920884216"><title>this和anotherString进行内容比较</title></topic><topic id="2a9ev0qo8d1qi7pljdp0s6ise4" modified-by="" timestamp="1511920892184"><title>不区分大小写</title></topic></topics></children></topic><topic id="7dab158p8e858drnhr5340flnq" modified-by="" timestamp="1511921518157"><title>自然排序</title><children><topics type="attached"><topic id="36hiiah8oqlog36i320237btob" modified-by="" timestamp="1511921518125"><title>public int compareTo(String anotherString)</title><children><topics type="attached"><topic id="0f1brqvc9berk06bjk9jlgn3d0" modified-by="" timestamp="1511921131138"><title>如果是ASCII范围内，按照ASCII值的顺序</title></topic></topics></children></topic></topics></children></topic><topic id="06nlb2j9bo7k8gelkrcci080vt" modified-by="" timestamp="1511921539142"><title>定制排序</title><children><topics type="attached"><topic id="1r6rt50l61dptsra1emfh7jv75" modified-by="" timestamp="1511921589662"><title>java.text.Collator</title><notes><html><xhtml:p>		String str3 = "中国";//Z</xhtml:p><xhtml:p>		String str4 = "美国";//M</xhtml:p><xhtml:p>		</xhtml:p><xhtml:p>		//如果想要按照字典顺序</xhtml:p><xhtml:p>		//找定制排序，实现了java.util.Comparator接口，重写int compare(String s1,String s2)</xhtml:p><xhtml:p>		//java.text.Collator</xhtml:p><xhtml:p>		Collator c = Collator.getInstance();</xhtml:p><xhtml:p>		int result = c.compare(str3, str4);</xhtml:p><xhtml:p>		System.out.println(result);//中 &gt; 美</xhtml:p></html><plain>		String str3 = "中国";//Z&#13;
		String str4 = "美国";//M&#13;
		&#13;
		//如果想要按照字典顺序&#13;
		//找定制排序，实现了java.util.Comparator接口，重写int compare(String s1,String s2)&#13;
		//java.text.Collator&#13;
		Collator c = Collator.getInstance();&#13;
		int result = c.compare(str3, str4);&#13;
		System.out.println(result);//中 &gt; 美</plain></notes></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>API</title></sheet></xmap-revision-content>