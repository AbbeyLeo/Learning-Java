<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6eivvrk9du1r4j1cbiars0o465" modified-by="" style-id="4tu1p48ubmesvqad3rkk4o2in5" theme="xminddefaultthemeid" timestamp="1511919480434" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="2ul034ag8lhhv78kr16cp16oh5" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1511919236544"><title>JavaSE  API</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic branch="folded" id="10j279t44jjt17j90bkpu6cjnn" modified-by="" timestamp="1511919244492"><title>java.lang.Object</title><children><topics type="attached"><topic id="2pbe3o6p4fgn4r1rddl177otrm" modified-by="" timestamp="1511572730743"><title>它是所有类型的根父类</title></topic><topic id="2g7488jcq0ta9g4ohg5c4sno65" modified-by="" timestamp="1511572759091"><title svg:width="500">一个类如果没有显式声明它的父类，这个类的直接父类就是Object</title></topic><topic id="1ud7hgpl9akkjeevv16ubi4a3s" modified-by="" timestamp="1511572813632"><title>理解</title><children><topics type="attached"><topic id="5rvsi084966cn5o5nphio6o14i" modified-by="" timestamp="1511572789226"><title svg:width="500">（1）Object类的所有方法，在所有对象中都有，包括数组对象</title></topic><topic id="0j9gmcogfotcpdensn97gkjhmp" modified-by="" timestamp="1511572795407"><title svg:width="500">（2）Object类的变量可以接受任意类型的对象&#13;
   Object类型的形参可以接受任意类型的对象作为实参&#13;
   Object[]类型的数组可以接受任意类型的对象作为它的元素</title></topic><topic id="7fk7a49ndojd5sfhhhk2d5fiki" modified-by="" timestamp="1511572828260"><title svg:width="500">（3）所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic><topic id="1gqsf04bqb67boaqojfm0k50l8" modified-by="" timestamp="1511573316944"><title>方法</title><children><topics type="attached"><topic id="7snsivgmdfhe97e380tk13v1lm" modified-by="" timestamp="1511572837545"><title>（1）无参构造</title><children><topics type="attached"><topic id="5v31pq967mgh69tkmdi3j9n2kb" modified-by="" timestamp="1511572847903"><title>Object() </title><children><topics type="attached"><topic id="1970uovu7fqt3onrt93essiicd" modified-by="" timestamp="1511572849316"><title>所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic></topics></children></topic><topic id="0j5osu03hep3385mg3los44t2u" modified-by="" timestamp="1511572876178"><title svg:width="500">（2）protected Object clone() throws CloneNotSupportedException</title><children><topics type="attached"><topic id="7bq0vqgeb145s8utiot89h9udc" modified-by="" timestamp="1511572929877"><title svg:width="500">如果子类要支持克隆，子类需要实现Cloneable接口，否则报CloneNotSupportedException</title></topic></topics></children></topic><topic id="2qn1o2oe0ppqkaqaototo854l8" modified-by="" timestamp="1511573358611"><title>（3）public boolean equals(Object obj)</title><children><topics type="attached"><topic id="2hb8e28a8i7jj2n4ejr4g0dolv" modified-by="" timestamp="1511572968855"><title>指示其他某个对象obj是否与此对象this“相等”。 </title></topic><topic id="2hrg2vt6go95ou9mvvlq1ud8qp" modified-by="" timestamp="1511572994112"><title svg:width="500">Object中的equals，等价于“==”比较，比较的是对象的地址</title></topic><topic id="14fkse5dqrtc7g5gfnc8smk2jl" modified-by="" timestamp="1511573014100"><title svg:width="500">如果子类需要比较的是属性的内容，那么一定要重写这个方法</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="3eq14iejp9ih6a7kisbd80a5qa" modified-by="" timestamp="1511573360548"><title>（4）public int hashCode()</title><children><topics type="attached"><topic id="2qi9cbg6ciclqturd1k3cj3m9g" modified-by="" timestamp="1511573050728"><title svg:width="500">在Object中默认这个方法返回的是 和“地址”相关的值</title></topic><topic id="10ehkgmn6b70dii0bk37s1ap6t" modified-by="" timestamp="1511573095320"><title svg:width="500">如果重写了equals，那么必须重写hashCode方法，而且参与equals比较的属性，一定要参与hashCode的计算</title></topic><topic id="5emrkq7haub70p1oeqf7b6jsu2" modified-by="" timestamp="1511573111394"><title>它俩的关系：</title><children><topics type="attached"><topic id="449fn08uo34f243c71nfdkh92c" modified-by="" timestamp="1511573127595"><title svg:width="500">两个对象的equals()返回true，两个对象的hashCode值？一定相等&#13;
两个对象的hashCode值不相等，两个对象equals方法结果？一定不相等&#13;
两个对象的hashCode值相等，两个对象equals方法结果？不一定相等</title></topic></topics></children></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="2fe74f18ccdbapsnk8p26nv77u" modified-by="" timestamp="1511573370292"><title>（5）public final Class&lt;?&gt; getClass()</title><children><topics type="attached"><topic id="246s0tuejfhcedpoo6vnk7qfas" modified-by="" timestamp="1511573191375"><title>返回某个对象的运行时类型，而不是编译时类型</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="449j1nkd7eq74brfemqlu6dg9r" modified-by="" timestamp="1511573218908"><title svg:width="500">（6）protected void finalize() throws Throwable</title><children><topics type="attached"><topic id="6c1p74qcbussagac1kg1ctvnkc" modified-by="" timestamp="1511573243610"><title svg:width="500">当这个对象被垃圾回收机制回收之前调用，而且只会调用一次</title></topic></topics></children></topic><topic id="59e58fnm23srfjaa6ip4pvan17" modified-by="" timestamp="1511573364450"><title>（7）public String toString()</title><children><topics type="attached"><topic id="2uc5fa1q86bnmgpdasjud9dc45" modified-by="" timestamp="1511573293517"><title svg:width="500">在Object中默认返回的是   这个对象的运行是类型@这个对象的hash值的十六进制表现形式</title></topic><topic id="0au2f6p4e26pi51shcohmgs6nj" modified-by="" timestamp="1511573300336"><title>子类完全可以重写</title></topic></topics></children><marker-refs><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="0am56jtvj639bcqr39de833us3" modified-by="" timestamp="1511573344506"><title svg:width="500">（8）剩下的notify,notifyAll和wait在多线程中使用</title></topic></topics></children></topic></topics></children></topic><topic id="14biqn6a09tajp5g7kdv67kb5d" modified-by="" timestamp="1511919357057"><title>包装类</title><children><topics type="attached"><topic id="43vbdobctmil05gmjveriige6m" modified-by="" timestamp="1511919332472"><title>装箱与拆箱</title><children><topics type="attached"><topic id="4hjun1sjh4h5dns7ne7dthkkrm" modified-by="" timestamp="1511919329086"><title>装箱</title><children><topics type="attached"><topic id="15nmi0nnnkb26das6g4952s87i" modified-by="" timestamp="1511919287345"><title>JDK1.5之前手动装箱</title><children><topics type="attached"><topic id="70hvu1fjp6895ebdtu3fltqium" modified-by="" timestamp="1511919298846"><title>Integer i = new Integer(整数);</title></topic></topics></children></topic><topic id="6qsas6gcaf0lo6vlpf8b262vjq" modified-by="" timestamp="1511919305412"><title>JDK1.5之后自动装箱</title><children><topics type="attached"><topic id="2uebqi4mbramr9va3rml41hni7" modified-by="" timestamp="1511919316288"><title>Ineteger i = 整数;</title></topic></topics></children></topic></topics></children></topic><topic id="0sd57rifjit10fia8027nei0f4" modified-by="" timestamp="1511919451471"><title>拆箱</title><children><topics type="attached"><topic id="42t8krg1qs4iv2m0041gpptpi0" modified-by="" timestamp="1511919430078"><title>JDK1.5之前手动拆箱</title><children><topics type="attached"><topic id="0lcfs7f3l3980019r6cfj3vof8" modified-by="" timestamp="1511919447952"><title>Integer i = new Integer(整数);&#13;
int num = i.intValue();</title></topic></topics></children></topic><topic id="24apvr47o6i9l0515fmle501sq" modified-by="" timestamp="1511919475344"><title>JDK1.5之后自动拆箱</title><children><topics type="attached"><topic id="1rh7pnkm4hof2e83tu783nkk9q" modified-by="" timestamp="1511919480434"><title>Integer i = new Integer(整数);&#13;
int num = i;</title></topic></topics></children></topic></topics></children></topic><topic id="0qfauc9e6fpn845mif8441i0uf" modified-by="" timestamp="1511919353770"><title svg:width="500">原则：只能是对应的包装类和基本数据类型之间进行转换</title></topic></topics></children></topic><topic id="3ookc301uqhcvj2cp54hdnr2bh" modified-by="" timestamp="1511919405715"><title>对应的关系</title><children><topics type="attached"><topic id="4cjhht23v9vujn5k8t3cr0qsc4" modified-by="" timestamp="1511919365588"><title>byte</title><children><topics type="attached"><topic id="1ql5kqquue92s33hb36jmucd82" modified-by="" timestamp="1511919367998"><title>Byte</title></topic></topics></children></topic><topic id="5nolfbmumk64kta9hfsrusnfn5" modified-by="" timestamp="1511919370865"><title>short</title><children><topics type="attached"><topic id="3ggsha1ktobb8ohtmfu10e84ed" modified-by="" timestamp="1511919373045"><title>Short</title></topic></topics></children></topic><topic id="1a2i46geu5fcqfdrvnq5dg1dkk" modified-by="" timestamp="1511919375518"><title>int</title><children><topics type="attached"><topic id="3aklhutqkoca358ln7adt0vg8o" modified-by="" timestamp="1511919378247"><title>Integer</title></topic></topics></children></topic><topic id="0mbpha6qrnv4eq7v6bjcvroqqb" modified-by="" timestamp="1511919381021"><title>long</title><children><topics type="attached"><topic id="2rarbhbcpgejjja3mid7rm83f2" modified-by="" timestamp="1511919384215"><title>Long</title></topic></topics></children></topic><topic id="6h07pu0tfmrb970mqqcs7e7oh7" modified-by="" timestamp="1511919388684"><title>char</title><children><topics type="attached"><topic id="6tae47jd5irhjd2bm2pj2dadfl" modified-by="" timestamp="1511919392373"><title>Character</title></topic></topics></children></topic><topic id="2n8raqp6djasu37rj40ggm989g" modified-by="" timestamp="1511919396914"><title>float</title><children><topics type="attached"><topic id="3ckrtdb1m0k3v52320dgjal35a" modified-by="" timestamp="1511919399146"><title>Float</title></topic></topics></children></topic><topic id="649ckh6qncfmu8i3h6st24bggf" modified-by="" timestamp="1511919402089"><title>double</title><children><topics type="attached"><topic id="763l4smltp9e7u5anlh49b93qi" modified-by="" timestamp="1511919405436"><title>Double</title></topic></topics></children></topic><topic id="6rhd0f4kb131j50ggmiksnqjj9" modified-by="" timestamp="1511919409428"><title>boolean</title><children><topics type="attached"><topic id="0hb94u6pqotap3ceubqqp53p7o" modified-by="" timestamp="1511919414528"><title>Boolean</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>API</title></sheet></xmap-revision-content>