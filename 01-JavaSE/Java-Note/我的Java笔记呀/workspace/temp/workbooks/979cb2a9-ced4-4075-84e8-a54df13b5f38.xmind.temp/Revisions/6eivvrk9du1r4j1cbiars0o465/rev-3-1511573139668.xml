<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6eivvrk9du1r4j1cbiars0o465" modified-by="" style-id="4tu1p48ubmesvqad3rkk4o2in5" theme="xminddefaultthemeid" timestamp="1511573127595"><topic id="2ul034ag8lhhv78kr16cp16oh5" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1511572716665"><title>JavaSE  API</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic id="10j279t44jjt17j90bkpu6cjnn" modified-by="" timestamp="1511572800288"><title>java.lang.Object</title><children><topics type="attached"><topic id="2pbe3o6p4fgn4r1rddl177otrm" modified-by="" timestamp="1511572730743"><title>它是所有类型的根父类</title></topic><topic id="2g7488jcq0ta9g4ohg5c4sno65" modified-by="" timestamp="1511572759091"><title svg:width="500">一个类如果没有显式声明它的父类，这个类的直接父类就是Object</title></topic><topic id="1ud7hgpl9akkjeevv16ubi4a3s" modified-by="" timestamp="1511572813632"><title>理解</title><children><topics type="attached"><topic id="5rvsi084966cn5o5nphio6o14i" modified-by="" timestamp="1511572789226"><title svg:width="500">（1）Object类的所有方法，在所有对象中都有，包括数组对象</title></topic><topic id="0j9gmcogfotcpdensn97gkjhmp" modified-by="" timestamp="1511572795407"><title svg:width="500">（2）Object类的变量可以接受任意类型的对象&#13;
   Object类型的形参可以接受任意类型的对象作为实参&#13;
   Object[]类型的数组可以接受任意类型的对象作为它的元素</title></topic><topic id="7fk7a49ndojd5sfhhhk2d5fiki" modified-by="" timestamp="1511572828260"><title svg:width="500">（3）所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic><topic id="1gqsf04bqb67boaqojfm0k50l8" modified-by="" timestamp="1511573015294"><title>方法</title><children><topics type="attached"><topic id="7snsivgmdfhe97e380tk13v1lm" modified-by="" timestamp="1511572837545"><title>（1）无参构造</title><children><topics type="attached"><topic id="5v31pq967mgh69tkmdi3j9n2kb" modified-by="" timestamp="1511572847903"><title>Object() </title><children><topics type="attached"><topic id="1970uovu7fqt3onrt93essiicd" modified-by="" timestamp="1511572849316"><title>所有对象创建时，都会调用Object的无参构造</title></topic></topics></children></topic></topics></children></topic><topic id="0j5osu03hep3385mg3los44t2u" modified-by="" timestamp="1511572876178"><title svg:width="500">（2）protected Object clone() throws CloneNotSupportedException</title><children><topics type="attached"><topic id="7bq0vqgeb145s8utiot89h9udc" modified-by="" timestamp="1511572929877"><title svg:width="500">如果子类要支持克隆，子类需要实现Cloneable接口，否则报CloneNotSupportedException</title></topic></topics></children></topic><topic id="2qn1o2oe0ppqkaqaototo854l8" modified-by="" timestamp="1511572995988"><title>（3）public boolean equals(Object obj)</title><children><topics type="attached"><topic id="2hb8e28a8i7jj2n4ejr4g0dolv" modified-by="" timestamp="1511572968855"><title>指示其他某个对象obj是否与此对象this“相等”。 </title></topic><topic id="2hrg2vt6go95ou9mvvlq1ud8qp" modified-by="" timestamp="1511572994112"><title svg:width="500">Object中的equals，等价于“==”比较，比较的是对象的地址</title></topic><topic id="14fkse5dqrtc7g5gfnc8smk2jl" modified-by="" timestamp="1511573014100"><title svg:width="500">如果子类需要比较的是属性的内容，那么一定要重写这个方法</title></topic></topics></children></topic><topic id="3eq14iejp9ih6a7kisbd80a5qa" modified-by="" timestamp="1511573099345"><title>（4）public int hashCode()</title><children><topics type="attached"><topic id="2qi9cbg6ciclqturd1k3cj3m9g" modified-by="" timestamp="1511573050728"><title svg:width="500">在Object中默认这个方法返回的是 和“地址”相关的值</title></topic><topic id="10ehkgmn6b70dii0bk37s1ap6t" modified-by="" timestamp="1511573095320"><title svg:width="500">如果重写了equals，那么必须重写hashCode方法，而且参与equals比较的属性，一定要参与hashCode的计算</title></topic><topic id="5emrkq7haub70p1oeqf7b6jsu2" modified-by="" timestamp="1511573111394"><title>它俩的关系：</title><children><topics type="attached"><topic id="449fn08uo34f243c71nfdkh92c" modified-by="" timestamp="1511573127595"><title svg:width="500">两个对象的equals()返回true，两个对象的hashCode值？一定相等&#13;
两个对象的hashCode值不相等，两个对象equals方法结果？一定不相等&#13;
两个对象的hashCode值相等，两个对象equals方法结果？不一定相等</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>画布 7</title></sheet></xmap-revision-content>