<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="6lgaqelsl7vahaqga4b8v9t2n0" modified-by="" style-id="4cvokp6eo22cm3100r95ohtobs" theme="xminddefaultthemeid" timestamp="1511316209273" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="38p178imlngv6oeg71qrap62ko" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1511315285907"><title>面向对象</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic id="7vqmkooiolif9nkr53r35g9vgv" modified-by="" timestamp="1510969245046"><title>面向对象和面向过程的区别</title><children><topics type="attached"><topic id="5jp6s924bksm0io5aoi9ucl552" modified-by="" timestamp="1510969231995"><title>都是编程思想</title></topic><topic id="7qf6he5midsicdvqn2n0rlkvpi" modified-by="" timestamp="1510969269336"><title>面向过程注重过程，步骤，怎么做</title><children><topics type="attached"><topic id="7obu1vh5vk4sl11uu6r29prv67" modified-by="" timestamp="1510969272655"><title>执行者</title></topic></topics></children></topic><topic id="1qfh4n64it1d8fhb828bvuc00h" modified-by="" timestamp="1510969264718"><title>面向对象注重对象，谁来做</title><children><topics type="attached"><topic id="7g5v275uhha0okvtdg8vupfpud" modified-by="" timestamp="1510969285674"><title>指挥者</title></topic></topics></children></topic></topics></children></topic><topic id="0b6hlirrehqa8udkp75uo07e1n" modified-by="" timestamp="1510969361391"><title>面向对象学习</title><children><topics type="attached"><topic id="486r5icrc8qi15at1k55itbbmi" modified-by="" timestamp="1510969400584"><title>1、类与对象</title><children><topics type="attached"><topic id="08naed3otb3nem8rb99a537e31" modified-by="" timestamp="1510969378876"><title>（1）类与对象的概念</title></topic><topic id="1e7r4366h51gg4nqfp1h4thavm" modified-by="" timestamp="1510969385448"><title>（2）类与对象的关系</title></topic><topic id="0tnjk3ojt5tua1fhj9aj3ogpl0" modified-by="" timestamp="1510969399778"><title>（3）如何设计类，类的成员</title></topic><topic id="75p12ljfr4jhnl4jo1grnie0af" modified-by="" timestamp="1510969407156"><title>（4）如何创建对象</title></topic></topics></children></topic><topic id="3meal99au70ic6ea5gq6s6b1re" modified-by="" timestamp="1510969443984"><title>2、面向对象的三个基本特征和高级特性</title><children><topics type="attached"><topic id="3iu3e90066h9p47gfqi3hj7erv" modified-by="" timestamp="1510969453306"><title>基本特性</title><children><topics type="attached"><topic id="478c4qhobph4lt9heinp64a5hs" modified-by="" timestamp="1510969450839"><title>封装</title></topic><topic id="3mlcn5efguqumctbgscnj2ft0p" modified-by="" timestamp="1510969453022"><title>继承</title></topic><topic id="0s10erkmuh1maq7dhff9hkg5g1" modified-by="" timestamp="1510969455798"><title>多态</title></topic></topics></children></topic><topic branch="folded" id="4h0tlsaa6ad0egbdqlhg05t9eo" modified-by="" timestamp="1510969523287"><title>高级特性</title><children><topics type="attached"><topic id="2ov40f939vd7gs386p24jj95f0" modified-by="" timestamp="1510969465642"><title>枚举</title></topic><topic id="443u4opatfo2bbt3apcr58nkgh" modified-by="" timestamp="1510969469737"><title>接口</title></topic><topic id="7nfhdarg2tsrstsh65arj2lge4" modified-by="" timestamp="1510969472189"><title>抽象</title></topic><topic id="6cjgdp8ouga2qcp914iol3aja2" modified-by="" timestamp="1510969476162"><title>泛型</title></topic><topic id="7vslliho62empnag0ogeku934u" modified-by="" timestamp="1510969479908"><title>注解</title></topic><topic id="039lt9kcpmbuqpcou0ehs0km3h" modified-by="" timestamp="1510969485113"><title>可变参数</title></topic><topic id="0bpfk2e0qhbhiq799ht34724of" modified-by="" timestamp="1510969494107"><title>自动装箱与拆箱</title></topic><topic id="45gncr7juapf8eihn508ru0pgr" modified-by="" timestamp="1510969502595"><title>foreach</title></topic><topic id="5c86uap75vpbhjg2savmvfnitj" modified-by="" timestamp="1510969516664"><title>Lambda表达式</title></topic><topic id="50g837eelg011e7o10nqk096vb" modified-by="" timestamp="1510969519088"><title>.....</title></topic></topics></children></topic></topics></children></topic><topic id="730c45en9p6s5bhvhcpr8gv61t" modified-by="" timestamp="1510969596816"><title>3、相关的关键字和API</title><children><topics type="attached"><topic id="07ok66sa7dcttraphc48am9tml" modified-by="" timestamp="1510969596033"><title>关键字</title><children><topics type="attached"><topic id="2sbtsmedigvauhgvf63mtdifd3" modified-by="" timestamp="1510969592250"><title>class</title></topic><topic id="3otdtujqikfo8c9mefnekk9nqt" modified-by="" timestamp="1510969592260"><title>new</title></topic><topic id="21r357benf6fnd3n44khguokho" modified-by="" timestamp="1510969592275"><title>this</title></topic><topic id="3afq88sfd51c6plfoghpfrngo0" modified-by="" timestamp="1510969592291"><title>权限修饰符</title><children><topics type="attached"><topic id="0q37n8i2p90nnari5t10edkcas" modified-by="" timestamp="1510969552166"><title>public</title></topic><topic id="4vl38p0oqa1mqpnbkuaq2ieahc" modified-by="" timestamp="1510969556375"><title>protected</title></topic><topic id="5m6ibi2623s2rtore9uk8i6bhc" modified-by="" timestamp="1510969559408"><title>缺省</title></topic><topic id="09ds2p9i419nqeu66fc8au9prs" modified-by="" timestamp="1510969562249"><title>private</title></topic></topics></children></topic><topic id="7of49ugl33m7vsa1guvdbb5ldp" modified-by="" timestamp="1510969592334"><title>super</title></topic><topic id="4rqtuin2sfpjilu0vet7fh7fgs" modified-by="" timestamp="1510969592355"><title>...</title></topic></topics></children></topic><topic id="3v1a34204gosd4ta1pvk5fovig" modified-by="" timestamp="1510969618063"><title>API</title><children><topics type="attached"><topic id="4rdtq02guhn6r5ktarguik0e7t" modified-by="" timestamp="1510969603720"><title>集合</title></topic><topic id="0ar0uae6akhhj88uec0lru5pif" modified-by="" timestamp="1510969606627"><title>异常</title></topic><topic id="1mcpl58flfjco70tk7ji2oims3" modified-by="" timestamp="1510969609266"><title>IO</title></topic><topic id="56d8ac7t3sth0tgcbbkb69gat9" modified-by="" timestamp="1510969614566"><title>网络编程</title></topic><topic id="40o5ca4eu4v7lr3u4h72clptmm" modified-by="" timestamp="1510969617504"><title>线程</title></topic><topic id="2f0jg92g21chcopc7r2obkl7mm" modified-by="" timestamp="1510969620263"><title>....</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="306fnpuq0v5iliclk2bl048t8n" modified-by="" timestamp="1510970468138"><title>1、类与对象</title><children><topics type="attached"><topic id="06ij68q4i1d7sju6rtn4ki87mi" modified-by="" timestamp="1510969673025"><title>(1)类与对象的概念</title><children><topics type="attached"><topic id="25ns0m76o47sms8c7d05shjitl" modified-by="" timestamp="1510969672116"><title>类：对一类具有相同特征的事物的抽象描述</title></topic><topic id="6qh30ftjeuru0m1ctj838iukln" modified-by="" timestamp="1510969683039"><title>对象：类的实例，是具体的个体</title></topic></topics></children></topic><topic id="49q9lm06s2lh1geojas6kp1k6l" modified-by="" timestamp="1510969708344"><title>(2)类与对象的关系</title><children><topics type="attached"><topic id="0gu0euiahhs71fsr3kr008miql" modified-by="" timestamp="1510969706627"><title>类是对象的设计图，创建的模板</title></topic><topic id="35srakdi66c1js4446cpnlthim" modified-by="" timestamp="1510969724601"><title>对象是类的实例，是一个具体的个体</title></topic></topics></children></topic><topic id="21reh5g7692chiguqg09t2709r" modified-by="" timestamp="1510970400384"><title>(3)类的设计，成员</title><children><topics type="attached"><topic id="71f2cfk7vs935sanh4okkmbjce" modified-by="" timestamp="1510969916821"><title>（1）属性</title><children><topics type="attached"><topic id="4ecotof3ru7e20k60drs0kcia1" modified-by="" timestamp="1510969874025"><title>属性的特点</title><children><topics type="attached"><topic id="5v14m920essmntejbv7fa2vkj0" modified-by="" timestamp="1510969795984"><title>（1）声明的位置</title><children><topics type="attached"><topic id="7gq6s18u26402h5hcqvitd2i0v" modified-by="" timestamp="1510969800751"><title>在类中方法外</title></topic></topics></children></topic><topic id="6q01gstict6qckcl64tca1mt8d" modified-by="" timestamp="1510969819291"><title>（2）保存的位置</title><children><topics type="attached"><topic id="6d0clcldv5isb8tf1sq8ke5qgg" modified-by="" timestamp="1510969836522"><title>static</title><children><topics type="attached"><topic id="3v72g7hcdopn7lu30c5uf6nmpm" modified-by="" timestamp="1510969839685"><title>在方法区</title></topic></topics></children></topic><topic id="7qkt945u3s7qluj8ssknraoev9" modified-by="" timestamp="1510969829943"><title>非static</title><children><topics type="attached"><topic id="740q8m52evj4udc8ctplfqq11i" modified-by="" timestamp="1510969834017"><title>在堆中</title></topic></topics></children></topic></topics></children></topic><topic id="7js439gte460v7mbigefgsd9gb" modified-by="" timestamp="1510969858532"><title>（3）默认值</title><children><topics type="attached"><topic id="50djossk6kafpr804glkdembgn" modified-by="" timestamp="1510969859747"><title svg:width="500">byte,short,int,long是0，float,double是0.0，boolean是false，char是\u0000，引用数据类型都是null</title></topic></topics></children></topic><topic id="32575f68vb4uggji7ol0b50ljv" modified-by="" timestamp="1510969868471"><title>（4）作用域</title><children><topics type="attached"><topic id="0lsgcmqql4qma18foupf6hbut2" modified-by="" timestamp="1510969873140"><title>在整个类中</title></topic></topics></children></topic><topic id="2rlffo9c2q8somuba9dbu538dt" modified-by="" timestamp="1510969881924"><title>（5）生命周期</title><children><topics type="attached"><topic id="4sq0rfch61hbf5948d6joi5v0p" modified-by="" timestamp="1510969913149"><title>随着对象的创建而创建，到垃圾回收为止</title></topic></topics></children></topic></topics></children></topic><topic id="2ecg7cobf58kv86fv73aipmt0j" modified-by="" timestamp="1510969923308"><title>属性声明格式</title><children><topics type="attached"><topic id="3mm8ijkmm9oqk6g796mg7tqah1" modified-by="" timestamp="1510969950430"><title>[修饰符]  数据类型  属性名 【=显式值】; </title><children><topics type="attached"><topic id="3dgeqnk78iuh57omb1r2rf1niv" modified-by="" timestamp="1510969956857"><title>修饰符</title><children><topics type="attached"><topic id="774hj97mjjr3bemh9r7a43ht40" modified-by="" timestamp="1510969960254"><title>private</title><children><topics type="attached"><topic id="1hfun1vuuot6mndedlsvl8f6tk" modified-by="" timestamp="1510969966379"><title>私有化</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="0b9avo6ih7d3r8vm4vovbjv6l3" modified-by="" timestamp="1510970103252"><title>（2）构造器</title><children><topics type="attached"><topic id="5pnas4q9jjp049k6nhqc83knbh" modified-by="" timestamp="1510970002277"><title>构造器的作用</title><children><topics type="attached"><topic id="6j76ml3chb86hv2u1eh26tjvek" modified-by="" timestamp="1510970001017"><title>（1）和new一起创建对象</title></topic><topic id="5pt86eklh7498dim4fgkmiqjc7" modified-by="" timestamp="1510970008282"><title>（2）为属性赋值</title></topic></topics></children></topic><topic id="6k6n8a48qh4vr565ck5c1bs630" modified-by="" timestamp="1510970034013"><title>如何声明</title><children><topics type="attached"><topic id="1p1i859d1061oipv03niu2ku63" modified-by="" timestamp="1510970031700"><title>无参</title><children><topics type="attached"><topic id="3lr99ar8of9us6327oa4vdoejk" modified-by="" timestamp="1510970032884"><title>[修饰符] 类名(){&#13;
}</title></topic></topics></children></topic><topic id="4dcfniifjiaourunjnv5muv8oo" modified-by="" timestamp="1510970040578"><title>有参</title><children><topics type="attached"><topic id="1vp29taud7hlqcls4s1l56g6k3" modified-by="" timestamp="1510970041635"><title>[修饰符] 类名(形参列表){&#13;
}</title></topic></topics></children></topic></topics></children></topic><topic id="4e7ofvi9ukeivdvq8j8t104gfs" modified-by="" timestamp="1510970071611"><title>特点</title><children><topics type="attached"><topic id="3t7ngv2p4t5jkppiljg7232imv" modified-by="" timestamp="1510970091694"><title svg:width="500">构造器的特点：&#13;
（1）构造器名与类名必须相同&#13;
（2）构造器没有返回值&#13;
（3）构造器可以重载&#13;
（4）如果一个类没有声明过构造器，编译器将默认添加一个无参构造&#13;
如果这个类声明了构造器，编译器将不再自动添加无参构造</title></topic></topics></children></topic><topic id="0q44sgelkmf8v7uln3t0a2n4hp" modified-by="" timestamp="1510970155768"><title>如何调用</title><children><topics type="attached"><topic id="5thauu852lnaesrdo1glf05ki4" modified-by="" timestamp="1510970161287"><title>（1）和new一起  </title><children><topics type="attached"><topic id="2jiu6llbbrcebr7m4uttf4o120" modified-by="" timestamp="1510970135268"><title>  new 构造器()&#13;
  new 构造器(实参列表)</title></topic></topics></children></topic><topic id="4h051nnpb2iqor8vf3p873jn2c" modified-by="" timestamp="1510970162730"><title svg:width="500">（2）在本类的其他构造器中或子类的构造器中</title><children><topics type="attached"><topic id="2qinovv8uglem3jedk40o1im01" modified-by="" timestamp="1510970148622"><title>在本类的其他构造器中：this()或this(实参列表)&#13;
在子类的构造器中：super()或super(实参列表)</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="2eabg034823ups92t2gl4hj8v2" modified-by="" timestamp="1510970209829"><title>（3）方法</title><children><topics type="attached"><topic id="2slmrtj4u5v3eepks3nf6jpof9" modified-by="" timestamp="1510970196642"><title>无参无返回值</title></topic><topic id="5113bnis38702ffcc4ni4afpka" modified-by="" timestamp="1510970205025"><title>有参无返回值</title></topic><topic id="45kaq2eqt92jkkv2ghlg6l16kh" modified-by="" timestamp="1510970209570"><title>无参有返回值</title></topic><topic id="2jmof8da0mvlk7i7or0uh6kli1" modified-by="" timestamp="1510970218585"><title>有参有返回值</title></topic></topics></children></topic></topics></children></topic><topic id="3ck76cdrnlvbq11labp67pduhs" modified-by="" timestamp="1510970409437"><title>（4）类的声明格式</title><children><topics type="attached"><topic id="6qv2psnfimoktgg1vnedr1fc9t" modified-by="" timestamp="1510970452398"><title>格式</title><children><topics type="attached"><topic id="7dflctrh4h82nfu1i7jvkrio6m" modified-by="" timestamp="1510970462836"><title>[修饰符] class 类名{&#13;
	//属性列表&#13;
	//构造器列表&#13;
	//get/set方法&#13;
	//其他方法&#13;
}</title></topic></topics></children></topic></topics></children></topic><topic id="36k9n7ge475mthgs0q07g4p1fa" modified-by="" timestamp="1510985065326"><title>（5）如何创建对象</title><children><topics type="attached"><topic id="692pk4899u3gatiohcivur1cpt" modified-by="" timestamp="1510970499105"><title>new 类名()</title><children><topics type="attached"><topic id="127vcctcbdgfk8frjo0s50ns1p" modified-by="" timestamp="1510970502715"><title>用无参构造</title></topic></topics></children></topic><topic id="5ksug1sqtt9a33je34205va54e" modified-by="" timestamp="1510970507795"><title>new 类名(实参列表)</title><children><topics type="attached"><topic id="7eenpo36965dhon05kaa5jkse3" modified-by="" timestamp="1510970511102"><title>用有参构造</title></topic></topics></children></topic><topic id="4m748l8dir0opek2mdbove9ha6" modified-by="" timestamp="1510970552710"><title>匿名对象和有名对象</title><children><topics type="attached"><topic id="22pa131egpo29stoo8rb4mlu08" modified-by="" timestamp="1510970542104"><title>Student stu = new Student();</title><children><topics type="attached"><topic id="04ik6b8suimhccc225m3d58o90" modified-by="" timestamp="1510970551612"><title>stu对象名，也可以称为对象的引用</title></topic></topics></children></topic><topic id="2vlofkpu0p5ouel1mhr5vvofu7" modified-by="" timestamp="1510970556613"><title>匿名对象</title><children><topics type="attached"><topic id="0du78gh7uqbe5k5gf9giq5unlf" modified-by="" timestamp="1510970571368"><title>System.out.println(new Student());</title></topic></topics></children></topic></topics></children></topic><topic id="5da9ffl2bq3hfhj9gs5pa6onvh" modified-by="" timestamp="1510987560940"><title>对象的内存图</title><children><topics type="attached"><topic id="2nvfop4gts768kbs44j87b8o7o" modified-by="" timestamp="1510987571831"><title/><xhtml:img svg:height="167" svg:width="400" xhtml:src="xap:attachments/5j9g7a2pbspd7q4cq3occthomb.png"/></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="27q99oc5j8mev0h6vps1m400nf" modified-by="" timestamp="1511313280556"><title>2、面向对象的基本特征</title><children><topics type="attached"><topic id="2g5rdapos8jsvflit2s809gq53" modified-by="" timestamp="1510970312821"><title>封装</title><children><topics type="attached"><topic id="0m5enp4ci4qq9m2psricsp6ctp" modified-by="" timestamp="1510970279465"><title>封装的作用</title><children><topics type="attached"><topic id="1t7l0sk2s9i6h4abp9255hcq3u" modified-by="" timestamp="1510970274660"><title>安全</title></topic><topic id="7bp03dt4rpah6sg8q6g0c0oi5s" modified-by="" timestamp="1510970292937"><title>使用方便</title><children><topics type="attached"><topic id="47m6k4kv5psir8m8hj1j11m93v" modified-by="" timestamp="1510970301382"><title>对于使用者屏蔽实现细节</title></topic></topics></children></topic></topics></children></topic><topic id="64k7frhflfsm7l164a320q66hf" modified-by="" timestamp="1510970331111"><title>概念</title><children><topics type="attached"><topic id="118adtqrps31u2usek30vcroap" modified-by="" timestamp="1510970326674"><title>狭义</title><children><topics type="attached"><topic id="5iqui9hrut0t6rqhsqc05qlkl4" modified-by="" timestamp="1510970361030"><title>属性的封装</title><children><topics type="attached"><topic id="62hu1qetslg4d8b5f4tpk02hb3" modified-by="" timestamp="1510970360342"><title>（1）属性私有化：private</title></topic><topic id="3rb6k2erm3ndhtien7vqvh3t1g" modified-by="" timestamp="1510970372795"><title>（2）提供公共get/set方法</title></topic></topics></children></topic></topics></children></topic><topic id="49j6d6k4pmrns3s7td5jogsn4i" modified-by="" timestamp="1510970344862"><title>广义</title><children><topics type="attached"><topic id="5s2vuuurif90dnqrsiseuovht8" modified-by="" timestamp="1510970338292"><title>方法</title></topic><topic id="3o2bgsoc9hpnne0spp75cg67l4" modified-by="" timestamp="1510970340325"><title>类</title></topic><topic id="4tal9iuttco5noni2953b00a4s" modified-by="" timestamp="1510970342267"><title>包</title></topic><topic id="536bodom1da2q8l5297i014nlc" modified-by="" timestamp="1510970344586"><title>组件</title></topic><topic id="79j33t85p0qutj4gdt3rmruu4s" modified-by="" timestamp="1510970348642"><title>系统</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="3hnfd1dtjbtfebq9i3s2e78f79" modified-by="" timestamp="1511314173555"><title>继承</title><children><topics type="attached"><topic id="5a5hd0c0c3f89hhipgs43cbaq9" modified-by="" timestamp="1511313441660"><title>什么情况下需要继承？继承的好处是什么？</title><children><topics type="attached"><topic id="3lsrng6sp0nfqfmqliqtfk6po7" modified-by="" timestamp="1511313370128"><title>为了代码重用</title><children><topics type="attached"><topic id="4umdb9gp8asp2dh9m9fl6mogsg" modified-by="" timestamp="1511313368996"><title svg:width="500">（1）当有一个父类，如果再声明类时，发现这些类与已经存在的父类有很多相同特征，那么就可以通过继承的方式来简化代码</title></topic><topic id="77onu46n6tj7cbq1547q5ffgu1" modified-by="" timestamp="1511313414669"><title svg:width="500">（2）已经很多类，发现这些类有很多共同的特点，那么我们可以把这些共同的特点抽取到一个父类中，以便简化代码</title></topic></topics></children></topic><topic id="69ejjthppq7f2c0s9br4r15ahs" modified-by="" timestamp="1511313446729"><title>逻辑的角度</title><children><topics type="attached"><topic id="3l56jntpbs15ggr0ccr36d8mrt" modified-by="" timestamp="1511313452847"><title>表示is-a的关系</title></topic></topics></children></topic></topics></children></topic><topic id="6jqmif2hl4no2jqks5va0rl4g8" modified-by="" timestamp="1511313516225"><title>如何继承</title><children><topics type="attached"><topic id="5jk7fj6sks9iol3qfsst5n00d2" modified-by="" timestamp="1511313517516"><title>语法格式：&#13;
[修饰符] class  子类名  extends  父类名{&#13;
}</title></topic></topics></children></topic><topic id="2163i2r34c1svdj0umei09f75d" modified-by="" timestamp="1511313539440"><title>继承后对几个成员的影响</title><children><topics type="attached"><topic id="0i699lidivaurj9nnd0n33s59k" modified-by="" timestamp="1511313632013"><title>属性</title><children><topics type="attached"><topic id="1u5387jpcamq3prqbaborqtgb6" modified-by="" timestamp="1511313625272"><title svg:width="500">（1）子类继承父类时，一定会继承父类的所有的属性，包括私有的，但是由于私有的关键字private的原因，在子类中无法直接操作它，但是可以通过get/set方式操作它</title></topic><topic id="45pt594h6jle9ru3vmqm194np6" modified-by="" timestamp="1511314020431"><title svg:width="500">（2）当子类的属性与父类的属性重名时，而且父类的属性没有私有化，如果要访问父类的属性那么通过super.属性进行访问，如果子类中没有通过super.属性访问，那这个属性就表示是子类自己的</title><children><topics type="attached"><topic id="631mgtmtllpu7n8b7nk6g4gpbo" modified-by="" timestamp="1511314043396"><title>面试题</title><notes><html><xhtml:p>package com.atguigu.review;</xhtml:p><xhtml:p/><xhtml:p>public class Test {</xhtml:p><xhtml:p/><xhtml:p>	public static void main(String[] args) {</xhtml:p><xhtml:p>		Student stu = new Student();</xhtml:p><xhtml:p>		System.out.println(stu.getInfo());//结果？  年龄：10</xhtml:p><xhtml:p>		System.out.println(stu.getAge());//结果？20   如果子类重写，答案是10</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>}</xhtml:p><xhtml:p>class Person{</xhtml:p><xhtml:p>	int age = 20;</xhtml:p><xhtml:p/><xhtml:p>	public int getAge() {</xhtml:p><xhtml:p>		return age;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	public void setAge(int age) {</xhtml:p><xhtml:p>		this.age = age;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>	</xhtml:p><xhtml:p>}</xhtml:p><xhtml:p>class Student extends Person{</xhtml:p><xhtml:p>	int age = 10;</xhtml:p><xhtml:p>	/*public int getAge(){</xhtml:p><xhtml:p>		return age;</xhtml:p><xhtml:p>	}*/</xhtml:p><xhtml:p>	public String getInfo(){</xhtml:p><xhtml:p>		return "年龄：" + age;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>}</xhtml:p></html><plain>package com.atguigu.review;&#13;
&#13;
public class Test {&#13;
&#13;
	public static void main(String[] args) {&#13;
		Student stu = new Student();&#13;
		System.out.println(stu.getInfo());//结果？  年龄：10&#13;
		System.out.println(stu.getAge());//结果？20   如果子类重写，答案是10&#13;
	}&#13;
&#13;
}&#13;
class Person{&#13;
	int age = 20;&#13;
&#13;
	public int getAge() {&#13;
		return age;&#13;
	}&#13;
&#13;
	public void setAge(int age) {&#13;
		this.age = age;&#13;
	}&#13;
	&#13;
}&#13;
class Student extends Person{&#13;
	int age = 10;&#13;
	/*public int getAge(){&#13;
		return age;&#13;
	}*/&#13;
	public String getInfo(){&#13;
		return "年龄：" + age;&#13;
	}&#13;
}</plain></notes></topic></topics></children></topic></topics></children></topic><topic id="72n4jmjmh6s6nf4squo79a5pog" modified-by="" timestamp="1511314091356"><title>方法</title><children><topics type="attached"><topic id="1v2914pr4mu7rh6cn14qrb167f" modified-by="" timestamp="1511314088790"><title svg:width="500">（1）子类继承父类时，一定会继承父类的所有的方法，包括私有的，但是由于private，在子类中无法直接操作，但是可以间接操作</title></topic><topic id="48r4u8i4ihtdnt9tm7pade2m8q" modified-by="" timestamp="1511314118016"><title svg:width="500">（2）当父类的方法实现不适用于子类时，子类可以对父类的方法的进行重写</title></topic></topics></children></topic><topic id="5li0ed00a9oh49cqusg3ajnkr9" modified-by="" timestamp="1511314144895"><title>构造器</title><children><topics type="attached"><topic id="38ndve9drhm4v9pmn7ql99ei2r" modified-by="" timestamp="1511314143759"><title>（1）子类继承父类时，不会继承父类的构造器</title></topic><topic id="25no2sc84dfboi41df8tdbh0br" modified-by="" timestamp="1511314161391"><title>（2）子类继承父类时，一定会调用父类的构造器</title><children><topics type="attached"><topic id="2kom373nk8bmb38fc46g1r5i42" modified-by="" timestamp="1511314155648"><title svg:width="500">如果父类有无参构造，那么子类会默认去调用父类的无参构造&#13;
如果父类没有无参构造，只有有参构造，那么子类必须在子类构造器中手动调用父类的有参构造</title></topic><topic id="011eojeugurl28817g2e5hr978" modified-by="" timestamp="1511314162985"><title>调用父类的无参构造的语句：super();&#13;
调用父类的有参构造的语句：super(实参列表);&#13;
而且这两个语句必须在子类的构造器的首行。</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="6evq13cee245jjhmvau9h909uh" modified-by="" timestamp="1511314412183"><title>继承的原则</title><children><topics type="attached"><topic id="08jbnbenq3s6cvvcs4vloilsv0" modified-by="" timestamp="1511314188181"><title>（1）单继承</title><children><topics type="attached"><topic id="00mfv7nn7f0ddo7q0gckp5q3ts" modified-by="" timestamp="1511314217719"><title svg:width="500">在Java中只支持单继承，也就是说一个类只能有一个直接父类     --》一个唯一的亲生父亲</title></topic></topics></children></topic><topic id="40socelajf9ujao8gq8dm6lja8" modified-by="" timestamp="1511314237457"><title>（2）多层继承</title><children><topics type="attached"><topic id="1ve9sh7eftkj9pkn6kj9cka0o4" modified-by="" timestamp="1511314359832"><title svg:width="500">在Java中父类还可以有父类，而且在子类中会继承父类以及父类的父类的所有的属性与方法			--》代代相传</title><children><topics type="attached"><topic id="46lk41vegtf6tehgv1eucmtfrp" modified-by="" timestamp="1511314355441"><title svg:width="500">子类对象在寻找一个方法、属性时，如果本类中找不到，会去直接父类中查找，如果直接父类中也找不到，在往上找，找到为止，一直追溯到java.lang.Object根父类中</title></topic><topic id="0mt1ua4earm12j83bcmll1nii1" modified-by="" timestamp="1511314403921"><title svg:width="500">通过super.属性和方法时，先从直接父类中查找，如果没有，再往上找，直到找到为止，一直可以到java.lang.Object</title></topic></topics></children></topic></topics></children></topic><topic id="28qe06lsb5k19tvus0acb1pdcq" modified-by="" timestamp="1511314435901"><title svg:width="500">（3）一个类可以有很多个子类，子类还可以有子类</title><children><topics type="attached"><topic id="3mr5qd8mov2rl128i9tam3anp4" modified-by="" timestamp="1511314435590"><title>子孙满堂</title></topic><topic id="4p0vi0923d6o5vu74sfrpe5pgn" modified-by="" timestamp="1511314439677"><title>开枝散叶</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="4p8vrodhpdg3s3d2asbkj1qdk7" modified-by="" timestamp="1511313283677"><title>多态</title></topic></topics></children></topic><topic id="4qqbrcpo1grrhmnfjbair31n7c" modified-by="" timestamp="1511315173308"><title>3、关键字</title><children><topics type="attached"><topic id="2i4paqkufaa5ifc9bul7k48u6k" modified-by="" timestamp="1510970608521"><title>class</title><children><topics type="attached"><topic id="2lh2a6rlci64fb1svalleqmie5" modified-by="" timestamp="1510970613800"><title>声明类</title></topic></topics></children></topic><topic id="4t1jo4h58kjrrud4n6bor543ju" modified-by="" timestamp="1510970660015"><title>new</title><children><topics type="attached"><topic id="1e3tj5k3eppb26e1mdlstkjhbp" modified-by="" timestamp="1510970624637"><title>创建实例，创建对象</title></topic><topic id="4ui1qnj05kdauaucl9q0pqm58l" modified-by="" timestamp="1510970636117"><title>在堆中申请一块空间</title></topic><topic id="6nco08n3n1g9hke9n4hdqkgaj1" modified-by="" timestamp="1510970654844"><title>只要new就创建新的对象</title></topic><topic id="0seq23pqdvlmimm17meuvec166" modified-by="" timestamp="1510970666126"><title>new后面一定是构造器</title></topic></topics></children></topic><topic id="290pb9ojqa7qkuotb8fd2ik99j" modified-by="" timestamp="1510970716153"><title>this</title><children><topics type="attached"><topic id="2u124vpd3na305hh0krg67p356" modified-by="" timestamp="1510970691141"><title>当前对象</title><children><topics type="attached"><topic id="1tk3shrffrs5fle0s6mhso3q9o" modified-by="" timestamp="1510970707847"><title svg:width="500">（1）如果在构造器中，表示正在被创建的那个对象&#13;
（2）如果在其他方法中，表示调用该方法的那个对象</title></topic></topics></children></topic><topic id="5i0qmg0t8qqarlfr09ooiviij7" modified-by="" timestamp="1510970731363"><title>使用</title><children><topics type="attached"><topic id="5k0v864ek3br4mmk41l7p10ouo" modified-by="" timestamp="1511314579462"><title svg:width="500">（1）this.属性</title><children><topics type="attached"><topic id="5ut62vueqjcs569b82vmu56j26" modified-by="" timestamp="1511314708819"><title svg:width="500">当成员变量（属性名）与局部变量（形参）重名时，使用this.属性进行区别</title></topic></topics></children></topic><topic id="7ak0kf1u36jp470h5buph8ioca" modified-by="" timestamp="1511314924022"><title svg:width="500">（2）this.方法</title><children><topics type="attached"><topic id="24b9dl1smq3uu1mve3b33cgq06" modified-by="" timestamp="1511314950845"><title>表示调用“当前类”的方法</title></topic><topic id="5hml5o7cibuljv55d24t137rs2" modified-by="" timestamp="1511314906332"><title svg:width="500">如果子类继承了父类，子类没有重写父类的方法，this.方法也可能是从父类继承的方法</title></topic><topic id="0gdprqa1rbgi1pmouvjiaorp5s" modified-by="" timestamp="1511314938051"><title svg:width="500">如果子类继承了父类，子类重写父类的方法，this.方法就代表子类重写过的代码</title></topic></topics></children></topic><topic id="3gggi2r69trgvn2qtk2sj3lv7f" modified-by="" timestamp="1511314988584"><title svg:width="500">（3）this()或this(实参列表)</title><children><topics type="attached"><topic id="2iaobvcen4eibafvsnacodn46l" modified-by="" timestamp="1511314989968"><title svg:width="500">表示调用本类的其他构造器，而且必须在构造器的首行</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="3f2pemi2ldb3e7or44mipahv3n" modified-by="" timestamp="1511314554532"><title>super</title><children><topics type="attached"><topic id="450hbf0n84p789cb7vclgo298c" modified-by="" timestamp="1511314527901"><title>父类引用</title></topic><topic id="33p286blk682ccqdnian7o5cv9" modified-by="" timestamp="1511314955108"><title>使用</title><children><topics type="attached"><topic id="49keq0t77r8qdktv4b0di5gthi" modified-by="" timestamp="1511314572641"><title>（1）super.属性</title><children><topics type="attached"><topic id="1kadtop89djtrirt1sbgr43479" modified-by="" timestamp="1511314573736"><title svg:width="500">当子类的属性与父类的属性重名时，而且父类的属性没有私有化&#13;
如果需要调用父类的属性，那么通过super.属性进行区别</title></topic></topics></children></topic><topic id="49j98qj6thi79iije0r6oo3hm4" modified-by="" timestamp="1511314876591"><title>（2）super.方法</title><children><topics type="attached"><topic id="0pfv6e39alhb1dkjjm63ajrjgq" modified-by="" timestamp="1511314877860"><title svg:width="500">当子类的方法重写了父类的方法时，&#13;
如果需要调用父类的被重写的方法，那么通过super.方法进行调用</title></topic></topics></children></topic><topic id="47emr2tpede19gtumb8pumhgpn" modified-by="" timestamp="1511314968513"><title>（3）super()或super(实参列表)</title><children><topics type="attached"><topic id="294e6i580mjvnnb1d8ssjdo5da" modified-by="" timestamp="1511314971773"><title svg:width="500">当子类需要调用父类的构造器时，通过super()或super(实参列表)进行调用&#13;
&#13;
调用父类的无参构造的语句：super();&#13;
调用父类的有参构造的语句：super(实参列表);&#13;
而且这两个语句必须在子类的构造器的首行。</title></topic></topics></children></topic></topics></children></topic></topics></children></topic><topic id="06odglqbmheqccf8vl3o3te1vk" modified-by="" timestamp="1511315248640"><title>权限修饰符</title><children><topics type="attached"><topic id="5sggqrilsbmli26s6sja7m3tef" modified-by="" timestamp="1511315262132"><title svg:width="500">三个单词，四种形式：&#13;
public；公共的，范围：任意位置，可以修饰类、成员&#13;
protected：受保护的，范围：本包或子类中，可以修饰成员&#13;
缺省：默认的，范围：本包，可以修饰类、成员&#13;
private：私有的，范围：本类中，可以修饰成员</title></topic><topic id="3ab4hoj9vt6l4e41989a5n6q70" modified-by="" timestamp="1511315248610"><xhtml:img xhtml:src="xap:attachments/6b5g48r4eekg4hpnjcmftcv0lb.png"/></topic></topics></children></topic></topics></children></topic><topic id="3o4t8tl92habn9b5v66afrmkr2" modified-by="" timestamp="1510970821516"><title>4、包</title><children><topics type="attached"><topic id="6rumm8qshosptbivho15gvkl9c" modified-by="" timestamp="1510970786395"><title>包的作用</title><children><topics type="attached"><topic id="4o5tmkd5jq28b6d1e0gttbuuo2" modified-by="" timestamp="1510970787624"><title>（1）避免类的重名&#13;
（2）访问权限的控制&#13;
（3）便于管理</title></topic></topics></children></topic><topic id="2b0ev4p0tinth2kr11cjv5ti6t" modified-by="" timestamp="1510970801970"><title>如何声明包</title><children><topics type="attached"><topic id="6ufmpnp8l22eelk6qv0rkjj76a" modified-by="" timestamp="1510970801141"><title>package 包;</title></topic><topic id="0bncgff23latmjbcc6f9rhm9ob" modified-by="" timestamp="1510970818723"><title>要求</title><children><topics type="attached"><topic id="0v3a9mqqid0m84hji60iope4n8" modified-by="" timestamp="1510970813898"><title>必须在源文件的首行，一个源文件只能有一句</title></topic><topic id="3goudkv26iendep29ptemroq5h" modified-by="" timestamp="1510970819851"><title svg:width="500">遵循命名规范，所有字母都小写，单词之间使用.，一般以公司的域名倒置</title></topic></topics></children></topic></topics></children></topic><topic id="4i9jrs9near912776ve17itoig" modified-by="" timestamp="1510970898141"><title>如何使用其他包的类</title><children><topics type="attached"><topic id="5dl2s08238imr6cadhn14l5f8b" modified-by="" timestamp="1510970838831"><title>需要import 包.类名;</title></topic><topic id="7luhldjr7sbsurmvo0d03mctou" modified-by="" timestamp="1510970859837"><title>要求</title><children><topics type="attached"><topic id="697q3qslqok720b4nhmnbjjj37" modified-by="" timestamp="1510970853292"><title>在package和class声明之间，可以多句</title></topic><topic id="1bnjr3f9v36s7l7s2srvv5enrl" modified-by="" timestamp="1510970893248"><title>被使用的类必须是public 或 protected（父子类）</title></topic></topics></children></topic><topic id="2ktjtrujedrdkceu2ih8jrtfr4" modified-by="" timestamp="1510971323765"><title>形式</title><children><topics type="attached"><topic id="29tp48c6o152v9p1oojoudlneo" modified-by="" timestamp="1510971033382"><title>一一列举</title><children><topics type="attached"><topic id="6387qb9esgrqpds0j5vb6rkaq2" modified-by="" timestamp="1510971034587"><title>import java.util.Random;&#13;
import java.util.Scanner;</title></topic></topics></children></topic><topic id="168ds11i1pgnhha0tqt47oj4iu" modified-by="" timestamp="1510971080902"><title>某个包的类</title><children><topics type="attached"><topic id="1v4gqf5gabikh1eumu9gqknegt" modified-by="" timestamp="1510971082156"><title>import java.util.*;</title></topic></topics></children></topic><topic id="7c1vcg53trlqgeg8obijm11ko0" modified-by="" timestamp="1510971336246"><title>静态导入</title><children><topics type="attached"><topic id="6uoa0rfua6ignhllof2fpgboi8" modified-by="" timestamp="1510971330750"><title>import static java.lang.Math.*;</title></topic><topic id="50diibuner05573tuinnopid51" modified-by="" timestamp="1510971341600"><title>System.out.println(PI);&#13;
System.out.println(sqrt(4));</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics><topics type="detached"><topic id="1eflm7nk4kltceel0vij23tj1o" modified-by="" timestamp="1511316157307"><title>Overload和Override的区别</title><position svg:x="1304" svg:y="1170"/><children><topics type="attached"><topic id="592r5h8u5ie94v66nnu2j582s3" modified-by="" timestamp="1511316209273"><title svg:width="500">Overload：方法的重载&#13;
	在同一类，方法名称相同，形参列表不同的两个或多个方法称为重载。&#13;
Override：方法的重写&#13;
	在子类继承父类时，如果父类的方法实现不适用于子类，子类就可以对父类的方法进行重写，覆盖。</title></topic><topic id="6e2cmhvsb2sc31ig72sbubp9bk" modified-by="" timestamp="1511316148101"><title/><children><topics type="attached"><topic id="2fsqja1tp1b8sr3oaeumtthait" modified-by="" timestamp="1511316148074"><xhtml:img xhtml:src="xap:attachments/6vjnd2fq96pgv11fnb4299n63k.png"/></topic></topics></children></topic></topics></children></topic></topics></children></topic><title>面向对象</title></sheet></xmap-revision-content>