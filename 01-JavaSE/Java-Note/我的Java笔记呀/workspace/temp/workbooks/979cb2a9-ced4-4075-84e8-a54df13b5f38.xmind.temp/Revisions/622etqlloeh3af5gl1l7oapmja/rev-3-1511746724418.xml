<?xml version="1.0" encoding="UTF-8" standalone="no"?><xmap-revision-content xmlns="urn:xmind:xmap:xmlns:revision:1.0" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink"><sheet id="622etqlloeh3af5gl1l7oapmja" modified-by="" style-id="52uu5g07ehufrlgna6s0eokgph" theme="xminddefaultthemeid" timestamp="1511746709850" xmlns="urn:xmind:xmap:xmlns:content:2.0"><topic id="08aebva4ut5v8fch6dtfnoc509" modified-by="" structure-class="org.xmind.ui.logic.right" timestamp="1511746310807"><title>23种设计模式</title><extensions><extension provider="org.xmind.ui.map.unbalanced"><content><right-number>-1</right-number></content></extension></extensions><children><topics type="attached"><topic id="07enc8kgbmgqr6lse8r1h6vvcp" modified-by="" timestamp="1511574509010"><title>设计模式</title><children><topics type="attached"><topic id="7sqtgj2lg8usr3sa7bafgeo4r8" modified-by="" timestamp="1511574453499"><title>套路</title></topic><topic id="67df5p60isvvrntr6187q0n9b5" modified-by="" timestamp="1511574514400"><title>框架</title><children><topics type="attached"><topic id="3ra232dd3hkdtdgah27ednrrus" modified-by="" timestamp="1511574534632"><title>设计模式 + 反射 + 泛型 + 注解/配置文件等</title></topic></topics></children></topic></topics></children></topic><topic id="0r4lv2bevfjnkdkpp8b3pvqd44" modified-by="" timestamp="1511746326937"><title>单例设计模式</title><children><topics type="attached"><topic id="07fe5crf53o33sv0ftup581h8o" modified-by="" timestamp="1511574610961"><title>最简单，考的最多的一个设计模式</title></topic><topic id="6p769nq5ncfieanrcd68l32rca" modified-by="" timestamp="1511574633002"><title>要点</title><children><topics type="attached"><topic id="69o2745968r4ud8tftu4vbjb22" modified-by="" timestamp="1511574632251"><title>（1）构造器私有化</title></topic><topic id="1kfe8rio5edfvu4ed3pk7k64as" modified-by="" timestamp="1511574647740"><title>（2）在本类中创建这个唯一的实例</title></topic></topics></children></topic><topic id="6fqea5mbv1cm1v56skmvq1om2o" modified-by="" timestamp="1511574667097"><title>分类</title><children><topics type="attached"><topic id="0fl36cqtrdr31aiv5jrb4ds6df" modified-by="" timestamp="1511574689845"><title>饿汉式</title><children><topics type="attached"><topic id="0t9td9nj20uhu24hpllknh5c5n" modified-by="" timestamp="1511574686755"><title>形式一</title><children><topics type="attached"><topic id="4g805nvo2i3257oaidlje17dt1" modified-by="" timestamp="1511574688195"><title svg:width="500">class Hungry{&#13;
	public static final Hungry INSTANCE = new Hungry();&#13;
	private Hungry(){&#13;
	}&#13;
}</title></topic></topics></children></topic><topic id="3oam60ip70drun509u739ovcjo" modified-by="" timestamp="1511574700120"><title>形式二</title><children><topics type="attached"><topic id="0rrubtumd3d9245hoe15rh3eg5" modified-by="" timestamp="1511574702194"><title svg:width="500">class Hungry{&#13;
	private static final Hungry INSTANCE = new Hungry();&#13;
	private Hungry(){&#13;
	}&#13;
	public static Hungry getInstance(){&#13;
		return INSTANCE;&#13;
	}&#13;
}</title></topic></topics></children></topic></topics></children></topic><topic id="6a1lb3tt56rfsnjcslrvebc5fh" modified-by="" timestamp="1511574707137"><title>懒汉式</title><children><topics type="attached"><topic id="4c0fbfav4k5rahbp30b3rg0nd0" modified-by="" timestamp="1511574725641"><title>形式一：（有线程安全问题）</title><children><topics type="attached"><topic id="37os09gmeeg4ljvl6oc28oklrr" modified-by="" timestamp="1511574727423"><title>class Lazy{&#13;
	private static Lazy instance;&#13;
	private Lazy(){&#13;
	}&#13;
	//延迟创建对象&#13;
	public static Lazy getInstance(){&#13;
		if(instance == null){&#13;
			instance = new Lazy();&#13;
		}&#13;
		return instance;&#13;
	}&#13;
}</title></topic></topics></children></topic></topics></children></topic></topics></children></topic></topics></children><marker-refs><marker-ref marker-id="star-red"/><marker-ref marker-id="flag-red"/></marker-refs></topic><topic id="7p8c8fbv3711jehp7jce488leb" modified-by="" timestamp="1511746464763"><title>模板设计模式（识别）</title><children><topics type="attached"><topic id="3lpnltn1njba7p57fv22g43gbd" modified-by="" timestamp="1511746360052"><title>使用的情景</title><children><topics type="attached"><topic id="3u98v7rffr8h40mnbv56qacb5c" modified-by="" timestamp="1511746461042"><title svg:width="500">当某个功能在实现时，它的主体的算法结构是确定的，只是其中的某一个或几个步骤无法给出具体的实现，那么这个时候，把这个或几个的步骤抽取成抽象方法，由子类去给出具体的实现，那么子类继承父类时，既可以保留父类的主体算法结构，又可以对这几个抽象部分给出具体的实现</title></topic></topics></children></topic><topic id="6518o0sba28icaucna694fdrj8" modified-by="" timestamp="1511746709850"><title>示例代码</title><notes><html><xhtml:p>例如：计算某段代码的执行时间</xhtml:p><xhtml:p/><xhtml:p>算法结构：</xhtml:p><xhtml:p>1、获取开始时间</xhtml:p><xhtml:p>2、执行代码</xhtml:p><xhtml:p>3、获取结束时间</xhtml:p><xhtml:p>4、计算差值</xhtml:p><xhtml:p/><xhtml:p>public abstract class CalTime{</xhtml:p><xhtml:p>	public final long getTime(){</xhtml:p><xhtml:p>		//1、获取开始时间</xhtml:p><xhtml:p>		long start = System.currentTimeMillis();</xhtml:p><xhtml:p/><xhtml:p>		//2、执行代码</xhtml:p><xhtml:p>		doWork();</xhtml:p><xhtml:p/><xhtml:p>		//3、获取结束时间</xhtml:p><xhtml:p>		long end = System.currentTimeMillis();</xhtml:p><xhtml:p/><xhtml:p>		//4、计算差值</xhtml:p><xhtml:p>		return end - start;</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p/><xhtml:p>	protected abstract void doWork();</xhtml:p><xhtml:p/><xhtml:p>}</xhtml:p><xhtml:p/><xhtml:p>class MyCalTime extends CalTime{</xhtml:p><xhtml:p>	public void doWork(){</xhtml:p><xhtml:p>		.......</xhtml:p><xhtml:p>	}</xhtml:p><xhtml:p>}</xhtml:p></html><plain>例如：计算某段代码的执行时间&#13;
&#13;
算法结构：&#13;
1、获取开始时间&#13;
2、执行代码&#13;
3、获取结束时间&#13;
4、计算差值&#13;
&#13;
public abstract class CalTime{&#13;
	public final long getTime(){&#13;
		//1、获取开始时间&#13;
		long start = System.currentTimeMillis();&#13;
&#13;
		//2、执行代码&#13;
		doWork();&#13;
&#13;
		//3、获取结束时间&#13;
		long end = System.currentTimeMillis();&#13;
&#13;
		//4、计算差值&#13;
		return end - start;&#13;
	}&#13;
&#13;
	protected abstract void doWork();&#13;
&#13;
}&#13;
&#13;
class MyCalTime extends CalTime{&#13;
	public void doWork(){&#13;
		.......&#13;
	}&#13;
}</plain></notes></topic></topics></children></topic></topics></children></topic><title>设计模式</title></sheet></xmap-revision-content>