/**
 * @author Liu Awen
 * @create 2018-05-07 20:18
 */
/*
运算符：（了解）
6、位运算符
效率很高，但是可读性不好
因为它是基于二进制补码直接运算的。
数轴来移动 比较好点来理解  不要这样理解右移除以2的几次方
用得好很高的效率 但可能很多程序员理解不好的

左移：<<
	运算规则：<<几位，就乘以2的几次方
			二进制补码左移n位，右边补0
右移：>>
	运算规则：>>几位，就除以2的几次方
			二进制补码右移n位，左边补0还是1，看最高位
无符号右移：>>>
	运算规则：二进制补码右移n位，左边补0，对于负数来说，移完后，变为正数
没有 <<<    因为就是<<  嗯嗯
按位与：&
	1 & 1 结果1
	1 & 0 结果0
	0 & 1 结果0
	0 & 0 结果0
按位或：|
	1 | 1 结果1
	1 | 0 结果1
	0 | 1 结果1
	0 | 0 结果0
按位异或：^
	1 ^ 1 结果0
	1 ^ 0 结果1
	0 ^ 1 结果1
	0 ^ 0 结果0
按位取反：~（一元运算符）
	~1为0
	~0为1

*/
class Test15_Bit{
    public static void main(String[] args){
		/*
		4的二进制：0000 0100
		4<<3：0 0100000
		*/
        System.out.println(4 << -3);//-2147483648 ？？？
        System.out.println(4 << -32);//4
        System.out.println(4 << 32);//4
        System.out.println(4 << 35);//32
        System.out.println(4 << 3);//等价于4乘以2的3次方，4*8=32

		/*
		32的二进制：0010 0000
		32>>4：0000 0010
		*/
        System.out.println(32 >>4);//等价于32除以2的4次方，32/16 =2

		/*
		-32的二进制：
			原码：1010 0000
			反码：1101 1111
			补码：1110 0000
		-32>>4：1111 1110
			补码：1111 1110
			反码：1111 1101
			原码：1000 0010
			负的  右移 补1 少多少补多少
		*/
        System.out.println(-32 >>4);// -2

        System.out.println(32 >>> 4);//和>>一样，左边补0   2
		/*
		-32的二进制：
			原码：1000 0000 0000 0000 0000 0000 0010 0000
			反码：1111 1111 1111 1111 1111 1111 1101 1111
			补码：1111 1111 1111 1111 1111 1111 1110 0000
		-32>>>4：0000 1111 1111 1111 1111 1111 1111 1110
			最高位是0，是正数
		*/
        System.out.println(-32 >>> 4);//268435454

		/*
		32：0000 0000 0000 0000 0000 0000 0010 0000
		25：0000 0000 0000 0000 0000 0000 0001 1001
		32 & 25：0000 0000 0000 0000 0000 0000 0000 0000
		*/
        System.out.println(32 & 25);//0

		/*
		32：0000 0000 0000 0000 0000 0000 0010 0000
		25：0000 0000 0000 0000 0000 0000 0001 1001
		32 | 25：0000 0000 0000 0000 0000 0000 0011 1001
		*/
        System.out.println(32 | 25);//57

		/*
		32：0000 0000 0000 0000 0000 0000 0010 0000
		25：0000 0000 0000 0000 0000 0000 0001 1001
		32 | 25：0000 0000 0000 0000 0000 0000 0011 1001
		*/
        System.out.println(32 ^ 25);//57

		/*
		3：0000 0000 0000 0000 0000 0000 0000 0011
		~3:1111 1111 1111 1111 1111 1111 1111 1100
		补码：1111 1111 1111 1111 1111 1111 1111 1100
		反码：1111 1111 1111 1111 1111 1111 1111 1011
		原码：1000 0000 0000 0000 0000 0000 0000 0100 -4
		*/
        System.out.println(~3);//-4
    }
}
