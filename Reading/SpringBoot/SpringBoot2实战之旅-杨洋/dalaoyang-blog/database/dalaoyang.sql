SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for ARTICLE_INFO
-- ----------------------------
DROP TABLE IF EXISTS `ARTICLE_INFO`;
CREATE TABLE `article_info` (
  `ARTICLE_ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `ARTICLE_NAME` varchar(1000) DEFAULT NULL COMMENT '文章名称',
  `ARTICLE_CONTENT` text COMMENT '文章内容',
  `ARTICLE_AUTHORS` varchar(1000) DEFAULT NULL COMMENT '文章作者',
  `ARTICLE_INPUT_DATE` date DEFAULT NULL COMMENT '文章录入日期',
  `ARTICLE_READING_TIME` int(11) DEFAULT NULL COMMENT '文章阅读次数',
  `ARTICLE_IS_TOP` varchar(1) DEFAULT NULL COMMENT '是否置顶',
  `ARTICLE_TAG` varchar(100) DEFAULT NULL COMMENT '文章标签',
  `ARTICLE_IS_RELEASE` varchar(2) DEFAULT NULL,
  PRIMARY KEY (`ARTICLE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=111 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ARTICLE_INFO
-- ----------------------------
BEGIN;
INSERT INTO `ARTICLE_INFO` VALUES (1, '使用IntelliJ Idea新建SpringBoot项目', '简单给大家介绍一下我来创建SpringBoot项目使用的工具，本人使用IntelliJ Idea来创建项目，利用其中的Spring Initializr工具来快速创建项目。\n\n步骤如下：\n\n菜单栏中选择File--New--Project，出现如下图所示，然后选择Spring Initializr。\n\n其中SDK可以根据自己需求选择合适的jdk版本，本人项目均使用的Jdk1.8\n\nService Url 是Spring官方提供的Spring Initializr工具地址。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/1)\n\n然后点击Next，进入下面页面，其中以下各项内容与创建maven项目填写相同。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/2)\n\n点击Next，如下图所示，可以配置SpringBoot项目或SpringCloud项目各种依赖，需要注意的是，SpringBoot旁边的2.0.0是自己需要使用的SpringBoot版本，根据自己的需求选择。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/3)\n\n\n选择依赖和版本后，点击Next进入下图所示。设置项目名称，以及项目存储位置。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/4)\n\n以上都设置完成后，点击Finish。\n\n进入项目后，启动项目就可以看到SpringBoot项目启动后的标志Banner，第一个SpringBoot项目就这样搭建完成了。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/5)\n\n\n个人网站：[http://dalaoyang.cn]()', 'dalaoyang', '2018-01-04', 1901, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (2, 'SpringBoot的第一个web项目', '这一节主要是讲springboot搭建简单的web项目。\n\n首先pom文件新增spring-boot-starter-web依赖，pom文件如下所示\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_web</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_web</name>\n	<description>springboot_web</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n然后在项目内新建IndexController，代码如下\n\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/13\n */\n@RestController\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index(){\n        return \"hi dalaoyang\";\n    }\n}\n```\n\n启动类SpringbootWebApplication代码如下\n\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootWebApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootWebApplication.class, args);\n	}\n}\n```\n\n配置文件如下\n\n```\n##设置端口号\nserver.port=8888\n\n##springboot项目默认访问是/ 默认不配置下面属性的话 可以直接通过http://ip:port/可以访问index\n##如果在配置文件中增加如下配置 则访问时需要访问http://ip:port/dalaoyang\nserver.context-path=/dalaoyang\n```\n\n就这样一个简单的springboot web项目搭建完成。\n\n然后启动项目 访问http://localhost:8888/dalaoyang/如下图所示\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/2/1)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-01-07', 1007, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (3, 'SpringBoot集成FreeMarker', '给大家简单介绍一下springboot 集成FreeMarker\n过程很简单，5分钟即可。\n\n首先在项目中增添依赖spring-boot-starter-freemarker\npom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_freemarker</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_freemarker</name>\n	<description>springboot_freemarker</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-freemarker</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n然后创建controller，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/14\n */\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/test\")\n    public String testFreemarker(ModelMap modelMap){\n        modelMap.addAttribute(\"msg\", \"Hello dalaoyang , this is freemarker\");\n        return \"freemarker\";\n    }\n}\n```\n\napplication.properties如下\n```\n##端口号\nserver.port=8888\n\n#设定ftl文件路径\nspring.freemarker.template-loader-path=classpath:/templates\n#设定静态文件路径，js,css等\nspring.mvc.static-path-pattern=/static/**\n```\n\n然后简单给大家介绍一下，目录结构\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/3/1)\n\n然后贴上ftl文件的代码，一定注意，是ftl！！！！！\n写html文件是无法找到页面的。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>FreeMarker</title>\n</head>\n<body>\n<h1>${msg}</h1>\n</body>\n</html>\n```\n\n然后启动项目，访问http://localhost:8888/ 即可看到以下页面，\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/3/2)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-02-02', 945, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (4, 'SpringBoot集成Thymeleaf', '上一篇给大家介绍了springboot整合freemarker，这一片来继续为大家介绍一种模板thymeleaf。\r\n\r\n首先在项目中增添thymeleaf依赖spring-boot-starter-thymeleaf\r\n同时为了解决html严格校验报错的问题，增添依赖nekohtml\r\npom文件代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_thymeleaf</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_thymeleaf</name>\r\n	<description>springboot_thymeleaf</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.10.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>net.sourceforge.nekohtml</groupId>\r\n			<artifactId>nekohtml</artifactId>\r\n			<version>1.9.15</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\ncontroller代码大致与freemarker相同，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email 397600342@qq.com\r\n * @date 2018/3/14\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String testThymeleaf(ModelMap modelMap){\r\n        modelMap.addAttribute(\"msg\", \"Hello dalaoyang , this is thymeleaf\");\r\n        return \"thymeleaf\";\r\n    }\r\n}\r\n```\r\napplication.properties如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n\r\n#设定thymeleaf文件路径 默认为src/main/resources/templates\r\nspring.thymeleaf.prefix=classpath:/templates/ \r\n#设定静态文件路径，js,css等\r\nspring.mvc.static-path-pattern=/static/**\r\n# 是否开启模板缓存，默认true\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n# 模板编码\r\nspring.thymeleaf.encoding=UTF-8\r\n```\r\nhtml代码如下\r\n\r\n```\r\n<!DOCTYPE html>\r\n<!--解决th报错 -->\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>thymeleaf</title>\r\n</head>\r\n<body>\r\n<h1 th:text=\"${msg}\"></h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n启动项目，访问http://localhost:8888/ 即可看到以下页面，\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/4/1)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-02-09', 966, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (5, 'maven仓库设置', 'Maven 中央仓库地址：  \n\n1、http://www.sonatype.org/nexus/  私服nexus工具使用  \n2、http://mvnrepository.com/   \n3、http://repo1.maven.org/maven2  \n4、http://maven.aliyun.com/nexus/content/repositories/central/  阿里云 \n5、http://repo2.maven.org/maven2/ 私服nexus工具使用  \n6、http://uk.maven.org/maven2/  \n7、http://repository.jboss.org/nexus/content/groups/public  \n8、http://maven.oschina.net/content/groups/public/oschina  \n9、http://mirrors.ibiblio.org/maven2/  \n10、http://maven.antelink.com/content/repositories/central/  \n11、http://nexus.openkoala.org/nexus/content/groups/Koala-release/   \n12、http://maven.tmatesoft.com/content/groups/public/\n\n\nmaven库配置\n```\n<mirror>\n<id>oschina-repo</id>\n<name>开源中国镜像</name>\n<mirrorOf>central</mirrorOf>\n<url>可以根据自己的网络情况选填上面的url</url>\n</mirror>\n```', 'dalaoyang', '2018-04-02', 410, 'Y', '9', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (6, 'SpringBoot使用WebJars', '本人主要做的是java，但是从第一份工作开始，就一直在做一个写前端又写后端的程序员，相信很多朋友和我一样，不仅要会后台代码，还要懂得很多的前端代码，例如javascipt和css样式。\n\n本文就为大家简单介绍一下SpringBoot如何结合前端代码。\n\nSpringBoot结合前端有很多种方法，比如在static里面直接加入css或js，又或者引入webjars，以jar包的形式加入项目，本文就是简单介绍一下这种方式。\n\n\n话不多说，直接引入代码，还是新建一个SpringBoot Web项目。然后在pom文件引入webjars的jar，pom文件代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_webjars</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_webjars</name>\n	<description>springboot_webjars</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n       <!-- 引用bootstrap -->\n		<dependency>\n			<groupId>org.webjars</groupId>\n			<artifactId>bootstrap</artifactId>\n			<version>3.3.7-1</version>\n		</dependency>\n\n		<!-- 引用jquery -->\n		<dependency>\n			<groupId>org.webjars</groupId>\n			<artifactId>jquery</artifactId>\n			<version>3.1.1</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n然后我们观察一下项目的依赖jar包，依赖中就有了bootstrap.jar和jquery.jar\n\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/6/1)\n\n\n然后在src/main/resources/static文件下新建index.html，代码如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dalaoyang</title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css\" />\n    <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js\"></script>\n</head>\n<body>\n<div class=\"container\"><br/>\n    <div class=\"alert alert-success\">\n        <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">×</a>\n        Hello, <strong>Dalaoyang!</strong>\n    </div>\n</div>\n</body>\n</html>\n```\n\n至此配置已经结束，启动项目，访问http://localhost:8888/\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/6/2)\n\n\n至此SpringBoot结合WebJars成功就完成。\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n', 'dalaoyang', '2018-02-23', 807, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (7, '服务注册与发现---eureka', 'eureka简介：云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。\r\n\r\n\r\n话不多说直接上代码\r\n\r\n首先新建一个springcloud eurekaserver项目。\r\npom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_eureka_server</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springcloud_eureka_server</name>\r\n	<description>springcloud_eureka_server</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-eureka-server</artifactId>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>Edgware.SR1</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n然后在application.properties加入如下配置:\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n最后只需在启动类application上加入注解@EnableEurekaServer \r\n开启服务注册中心，然后启动项目，访问[http://localhost:8761/](http://localhost:8761/)可以看到如下页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/1)\r\n\r\n下图可见当前并没有实例\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/2)\r\n\r\n然后新建一个eureka-client项目，pom文件如下\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_eureka_client</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springcloud_eureka_client</name>\r\n	<description>springcloud_eureka_client</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-eureka</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>${spring-cloud.version}</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n```\r\n\r\napplication.properties如下所示：\r\n```\r\n##端口号\r\nserver.port=8762\r\n\r\nspring.application.name=eureka_client\r\n\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\n```\r\n\r\n启动类appliction加入@EnableEurekaClient注解，application代码如下\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaClient\r\npublic class SpringcloudEurekaClientApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudEurekaClientApplication.class, args);\r\n	}\r\n}\r\n```\r\n\r\n启动eureka-client，在观察eurekaserver管理页面\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/3)\r\n\r\n这时就可以看到一个实例已经注册成功了，服务名为EUREKA_CLIENT ,端口为8762\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n', 'dalaoyang', '2018-02-08', 797, 'Y', '2', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (8, '简单实现自定义注解', '在Java中创建自定义注解\n\n创建自定义注解与编写接口很相似，除了它的接口关键字前有个@符号。\n注意以下几点：\n\n·注解方法不能有参数。  \n·注解方法的返回类型局限于原始类型，字符串，枚举，注解，或以上类型构成的数组。  \n·注解方法可以包含默认值。  \n·注解可以包含与其绑定的元注解，元注解为注解提供信息，有四种元注解类型：  \n\n1. @Documented – 表示使用该注解的元素应被javadoc或类似工具文档化，它应用于类型声明，类型声明的注解会影响客户端对注解元素的使用。如果一个类型声明添加了Documented注解，那么它的注解会成为被注解元素的公共API的一部分。\n\n2. @Target – 表示支持注解的程序元素的种类，一些可能的值有TYPE, METHOD, CONSTRUCTOR, FIELD等等。如果Target元注解不存在，那么该注解就可以使用在任何程序元素之上。\n\n3. @Inherited – 表示一个注解类型会被自动继承，如果用户在类声明的时候查询注解类型，同时类声明中也没有这个类型的注解，那么注解类型会自动查询该类的父类，这个过程将会不停地重复，直到该类型的注解被找到为止，或是到达类结构的顶层（Object）。\n\n4. @Retention – 表示注解类型保留时间的长短，它接收RetentionPolicy参数，可能的值有SOURCE, CLASS, 以及RUNTIME。\n\n以下是一个简单自定义注解的实现过程：\n\n首先创建自定义注解类Annotations，代码如下:\n```\npackage com.dalaoyang.test;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Annotations {\n    long time() default -1;\n}\n```\n\n写一个简单的实现类:\n```\npackage com.dalaoyang.test;\n\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project java_custon_annotations\n * @package com.dalaoyang.test\n * @email 397600342@qq.com\n * @date 2018/3/27\n */\npublic class DoSomeThing {\n    public void test() {\n        System.out.println(\"执行自定义注解\");\n        System.out.println(\"执行自定义注解结束时间：\"+new Date());\n\n    }\n}\n```\n\n然后写一个使用注解的类：\n```\npackage com.dalaoyang.test;\n\n\npublic class Test {\n\n    private DoSomeThing doSomeThing= new DoSomeThing();\n\n\n    @Annotations\n    public void test(){\n        doSomeThing.test();\n    }\n\n}\n```\n\n最后利用反射，使注解可以使用：\n```\npackage com.dalaoyang.test;\n\n\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\n\n// 反射注解\npublic class AnnotationsRunner {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"执行自定义注解开始时间：\"+new Date());\n        Class clazz = Test.class;\n        Method[] ms = clazz.getMethods();\n        for (Method method : ms) {\n            boolean flag = method.isAnnotationPresent(Annotations.class);\n            if (flag) {\n                method.invoke(clazz.newInstance(), null);\n            }\n        }\n    }\n}\n```\n\n执行AnnotationsRunner类中得main函数，可以看到控制台如下所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/8/1)', 'dalaoyang', '2017-02-15', 403, 'Y', '5', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (9, '解决Intellij IDEA部署JavaWeb项目 404问题', '今天朋友问了我一个问题，他的公司项目用idea启动tomcat是成功的，\n但是访问页面是404。一般来说，这个问题普遍都是打war包的时候配置有一定的问题导致的。\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/1)\n\n检查一下Project Structure的配置，首先是project：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/2)\n\nModules-Sources如下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/3)\n\nModules-Paths中没什么需要特别修改的地方。\nModules-Dependencis如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/4)\n\n\nLiraires如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/5)\n\nFacets如下，路径一定不要配错，不如一定404，如下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/6)\n\n最后就是Artifacts:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/7)\n\n项目到这就配置完了，有些路径一定要结合自己的项目来配置。\n\n接下来配置tomcat：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/8)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/9)\n\n\n到此，启动项目即可。', 'dalaoyang', '2018-03-14', 378, 'N', '10', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (10, 'SpringBoot的国际化使用', '在项目中，很多时候需要国际化的支持，这篇文章要介绍一下springboot项目中国际化的使用。\n\n   \n在这个项目中前端页面使用的thymeleaf，另外加入了nekohtml去掉html严格校验，如果不了解springboot和thymeleaf的使用，可以去看我的上一篇文章[《SpringBoot集成Thymeleaf》](https://juejin.im/post/5aa8ce8ff265da23a404836f)。\n\n新建一个springboot项目，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_internationalization</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_internationalization</name>\n	<description>springboot_internationalization</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>net.sourceforge.nekohtml</groupId>\n			<artifactId>nekohtml</artifactId>\n			<version>1.9.15</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n从上面可以看出，其实和之前结合thymeleaf的时候一样。接下来给大家看一下application.propertie配置：\n```\n##端口号\nserver.port=8888\n\n\n##去除thymeleaf的html严格校验\nspring.thymeleaf.mode=LEGACYHTML5\n\n#设定thymeleaf文件路径 默认为src/main/resources/templates\nspring.freemarker.template-loader-path=classpath:/templates\n```\n\n新建IndexController\n```\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String hello(Model model){\n        return \"index\";\n    }\n}\n```\n\n到这里可以看出来，其实和整合thymeleaf一样。\n\n接下来我们要加入国际化的关键，在resources里面新建messages.properties（默认配置），messages_en_US.properties（英文），messages_zh_CN.properties（中文）\n\n其中messages.properties里面加入：\n```\nmessage = 欢迎使用国际化（默认）\n```\n\nmessages_en_US.properties里面加入：\n```\nmessage = Welcome to internationalization (English)\n```\n\nmessages_zh_CN.properties里面加入\n```\nmessage = \\u6b22\\u8fce\\u4f7f\\u7528\\u56fd\\u9645\\u5316\\uff08\\u4e2d\\u6587\\uff09\n```\n\n\n然后在templates下新建index.html，代码如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<a href=\"/?lang=en_US\">English(US)</a>\n<a href=\"/?lang=zh_CN\">简体中文</a></br>\n<p><label th:text=\"#{message}\"></label></p>\n\n\n</body>\n</html>\n```\n\n创建国际化配置文件，I18Config 代码如下:\n```\npackage com.dalaoyang.config;\n\nimport java.util.Locale;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email 397600342@qq.com\n * @date 2018/3/28\n */\npublic class I18Config extends WebMvcConfigurerAdapter{\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver slr = new SessionLocaleResolver();\n        // 默认语言\n        slr.setDefaultLocale(Locale.US);\n        return slr;\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();\n        // 参数名\n        lci.setParamName(\"lang\");\n        return lci;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n```\n\n最后修改IndexController，修改成如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport java.util.Locale;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.ui.Model;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/28\n */\n@Controller\npublic class IndexController {\n\n    @Autowired\n    private MessageSource messageSource;\n\n    @RequestMapping(\"/\")\n    public String hello(Model model){\n        Locale locale = LocaleContextHolder.getLocale();\n        model.addAttribute(\"message\", messageSource.getMessage(\"message\", null, locale));\n        return \"index\";\n    }\n}\n```\n\n现在启动项目，访问http://localhost:8888/\n\n然后点击中文或者English就可以自由切换语言了。', 'dalaoyang', '2018-03-15', 1465, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (11, 'SpringBoot使用数据库', '这一篇简单介绍一下SpringBoot配置数据库的配置（依赖和application.properties）,以下全是以本地数据库为例子，具体用户名密码地址都根据实际去修改。\n\nMysql数据库：\n\npom文件：\n```\n<dependency>\n	<groupId>mysql</groupId>\n	<artifactId>mysql-connector-java</artifactId>\n	<scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\nSql Server数据库：\n\npom文件：\n```\n<dependency>\n    <groupId>com.microsoft.sqlserver</groupId>\n    <artifactId>mssql-jdbc</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\n##数据库地址\nspring.datasource.url=jdbc:sqlserver://192.168.16.218:1433;databaseName=dev_btrpawn\n##数据库用户名\nspring.datasource.username=sa\n##数据库密码\nspring.datasource.password=p@ssw0rd\n##数据库驱动\nspring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n\noracle数据库：\n\n没有找到仓库中oracle得jar 需要自己下载然后加入\n\napplication.properties:\n```\nspring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver\nspring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl\nspring.datasource.username=dalaoyang\nspring.datasource.password=dalaoyang123\n```\n\nmongodb数据库：\n\npom文件：\n```\n<dependencies>\n	<dependency> \n	    <groupId>org.springframework.boot</groupId>\n	    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n	</dependency> \n</dependencies>\n```\n\napplication.properties:\n```\nspring.data.mongodb.uri=mongodb://localhost:27017/test\n```\n\nh2数据库：\n\npom文件：\n```\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\nspring.datasource.url=jdbc:h2:file:D:/roncoo_h2/roncoo_spring_boot;AUTO_SERVER=TRUE;DBCLOSE_ON_EXIT=FALSE\nspring.datasource.username=sa\nspring.datasource.password=\n```\n', 'dalaoyang', '2018-03-23', 1434, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (12, 'linux下安装mysql', ' 这是自己踩过的坑，记录一下，翻了一天博客，csdn等等，最后在网上看到了一个十分简单的安装过程。\n\n安装\n```\n# yum -y install http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n# yum info mysql-community-server\n# yum -y install mysql-community-server\n# vi /etc/my.cnf\n    character-set-server=utf8\n# /etc/init.d/mysqld restart\n# mysqld --version\n    mysqld  Ver 5.6.23 for Linux on x86_64 (MySQL Community Server (GPL))\n```\n    \n设置\n\n```\n# mysql_secure_installation  \n    Enter current password for root (enter for none):　←　回车  \n  \n    Set root password? [Y/n]　←　回车  \n    New password:　←　123456  \n    Re-enter new password:　←　123456  \n  \n    Remove anonymous users? [Y/n]　←　回车(删除匿名用户)  \n  \n    Disallow root login remotely? [Y/n]　←　回车(禁止远程root登录)  \n  \n    Remove test database and access to it? [Y/n]　←　回车(删除test库)  \n  \n    Reload privilege tables now? [Y/n]　←　回车  \n  \n    Thanks for using MySQL!  \n# mysql -u root -p  \n    Enter password:123456  \n  \n    mysql> create database mydb;  \n    mysql> grant all privileges on mydb.* to testuser@localhost identified by \'123456\';  \n    mysql> select user, host from mysql.user;  \n    mysql> quit  \n```\n    \n    \n装到这之后，本地使用没问题了，但是远程连接却不好用，提示Host is not allowed to connect to this MySQL server。然后在一片文章里找到解决办法，记录一下。\n\n\n先说说这个错误，其实就是我们的MySQL不允许远程登录，所以远程登录失败了，解决方法如下：\n\n1、在装有MySQL的机器上登录MySQL mysql -u root -p密码  \n2、执行use mysql;  \n3、执行update user set host = \'%\' where user = \'root\';这一句执行完可能会报错，不用管它。  \n4、执行FLUSH PRIVILEGES;  \n\n经过上面4步，就可以解决这个问题了。 \n注: 第四步是刷新MySQL的权限相关表，一定不要忘了，我第一次的时候没有执行第四步，结果一直不成功，最后才找到这个原因。', 'dalaoyang', '2018-03-15', 716, 'Y', '4', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (13, 'SpringBoot学习历程', '## SpringBoot学习历程\r\n\r\n\r\n以下为本人学习SpringBoot的历程，大家可以跟我参考跟我一样的学习历程。   \r\n\r\n\r\n\r\n## 入门\r\n\r\n[使用IntelliJ Idea新建SpringBoot项目](https://www.dalaoyang.cn/article/1)\r\n\r\n[SpringBoot启动banner更改](https://www.dalaoyang.cn/article/47)\r\n\r\n[SpringBoot定时任务](https://www.dalaoyang.cn/article/19)\r\n\r\n[SpringBoot返回json和xml](https://www.dalaoyang.cn/article/20)\r\n\r\n[SpringBoot启动banner更改](https://www.dalaoyang.cn/article/47)\r\n\r\n[SpringBoot使用validator校验](https://www.dalaoyang.cn/article/48)\r\n\r\n[SpringBoot统一处理异常](https://www.dalaoyang.cn/article/45)\r\n\r\n[SpringBoot拦截器](https://www.dalaoyang.cn/article/43)\r\n\r\n[SpringBoot使用缓存](https://www.dalaoyang.cn/article/60)\r\n\r\n[SpringBoot使用事务](https://www.dalaoyang.cn/article/59)\r\n\r\n[SpringBoot使用AOP](https://www.dalaoyang.cn/article/75)\r\n\r\n## Web学习\r\n\r\n[SpringBoot的第一个web项目](https://www.dalaoyang.cn/article/2)\r\n\r\n[SpringBoot集成FreeMarker](https://www.dalaoyang.cn/article/3)\r\n\r\n[SpringBoot集成Thymeleaf](https://www.dalaoyang.cn/article/4)\r\n\r\n[SpringBoot使用Jsp](https://www.dalaoyang.cn/article/71)\r\n\r\n[SpringBoot使用WebJars](https://www.dalaoyang.cn/article/6)\r\n\r\n[SpringBoot的国际化使用](https://www.dalaoyang.cn/article/10)\r\n\r\n[SpringBoot文件上传下载](https://www.dalaoyang.cn/article/22)\r\n\r\n[SpringBoot邮件发送](https://www.dalaoyang.cn/article/23)\r\n\r\n## 数据库学习\r\n\r\n[SpringBoot使用数据库](https://www.dalaoyang.cn/article/11)\r\n\r\n[SpringBoot整合Jpa](https://www.dalaoyang.cn/article/18)\r\n\r\n[SpringBoot整合Mybatis](https://www.dalaoyang.cn/article/17)\r\n\r\n[SpringBoot多数据源](https://www.dalaoyang.cn/article/25)\r\n\r\n[SpringBoot使用Swagger2实现Restful API](https://www.dalaoyang.cn/article/21)\r\n\r\n[SpringBoot集成阿里巴巴Druid监控](https://www.dalaoyang.cn/article/26)\r\n\r\n[SpringBoot使用JdbcTemplate](https://www.dalaoyang.cn/article/67)\r\n\r\n[SpringBoot整合Mybatis-Plus](https://www.dalaoyang.cn/article/66)\r\n\r\n[SpringBoot使用Mybatis-PageHelper](https://www.dalaoyang.cn/article/65)\r\n\r\n[SpringBoot使用Mybatis-Generator](https://www.dalaoyang.cn/article/74)\r\n\r\n\r\n## 日志学习\r\n\r\n[使用Log4j日志处理](https://www.dalaoyang.cn/article/24)\r\n\r\n## 监控学习\r\n\r\n[使用Actuator监控](https://www.dalaoyang.cn/article/27)\r\n\r\n[使用Admin监控](https://www.dalaoyang.cn/article/33)\r\n\r\n## 安全学习\r\n\r\n[SpringBoot使用validator校验](https://www.dalaoyang.cn/article/48)\r\n\r\n[使用shiro安全管理](https://www.dalaoyang.cn/article/49)\r\n\r\n[使用SpringSecurity](https://www.dalaoyang.cn/article/46)\r\n\r\n## 中间件\r\n\r\n[SpringBoot整合RabbitMQ](https://www.dalaoyang.cn/article/41)\r\n\r\n[SpringBoot整合Redis](https://www.dalaoyang.cn/article/32)\r\n\r\n[SpringBoot使用LomBok](https://www.dalaoyang.cn/article/54)\r\n\r\n[SpringBoot整合mongoDB](https://www.dalaoyang.cn/article/53)\r\n\r\n[SpringBoot整合elasticsearch](https://www.dalaoyang.cn/article/52)\r\n\r\n[SpringBoot整合dubbo](https://www.dalaoyang.cn/article/63)\r\n\r\n\r\n## 部署\r\n\r\n[Jenkins部署码云SpringBoot项目](https://www.dalaoyang.cn/article/83)\r\n\r\n[Jenkins部署码云SpringBoot项目到远程服务器](https://www.dalaoyang.cn/article/84)\r\n\r\n[docker部署springboot项目](https://www.dalaoyang.cn/article/58)\r\n\r\n[SpringBoot应用War包形式部署到外部Tomcat](https://www.dalaoyang.cn/article/70)\r\n\r\n## 2.X\r\n\r\n[SpringBoot使用Sharding-JDBC分库分表](https://www.dalaoyang.cn/article/95)\r\n\r\n[SpringBoot使用Nacos服务发现](https://www.dalaoyang.cn/article/94)\r\n\r\n[SpringBoot使用Nacos配置中心](https://www.dalaoyang.cn/article/93)\r\n\r\n[SpringBoot使用WebFlux响应式编程操作数据库](https://www.dalaoyang.cn/article/76)\r\n\r\n[SpringBoot2使用WebFlux函数式编程](https://www.dalaoyang.cn/article/69)\r\n\r\n\r\n\r\n个人网站：[http://www.dalaoyang.cn](http://www.dalaoyang.cn)\r\n\r\n未完待续。。。   \r\n\r\n## **大家可以关注我的写作平台。**\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)   \r\nCSDN    ：[https://blog.csdn.net/qq_33257527](https://blog.csdn.net/qq_33257527)    \r\n博客园  ：[http://www.cnblogs.com/dalaoyang/](http://www.cnblogs.com/dalaoyang/)   \r\n简书    ：[https://www.jianshu.com/u/128b6effde53](https://www.jianshu.com/u/128b6effde53)   \r\n掘金    ：[https://juejin.im/user/5aa50b96f265da23866f836e](https://juejin.im/user/5aa50b96f265da23866f836e)\r\n \r\n\r\n\r\n', 'dalaoyang', '2018-01-03', 2761, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (14, 'SpringCloud学习目录', 'Spring Cloud直接建立在Spring Boot的企业Java创新方法上，它通过实现经过验证的模式来简化分布式、微服务风格的体系结构，从而为您的微服务带来弹性、可靠性和协调。\n\n以上来自spring官网中文翻译。\n\n中文文档：[https://springcloud.cc/](https://springcloud.cc/)\n\n官方文档：[http://projects.spring.io/spring-cloud/#quick-start](http://projects.spring.io/spring-cloud/#quick-start)\n   \n学习SpringCloud到现在，看了两本书，分别是翟永超的《Spring Cloud微服务实战》和周立的《Spring Cloud与Docker微服务架构实战》，目前正在看方志朋的《深入理解Spring Cloud与微服务构建》，这几本书都不错，有空大家也可以去看看。\n\n最近总结了一下本人SpringCloud的学习历程，由于文章都是近期才开始写，文章内所有项目都是以jdk1.8+springboot1.5.9+springcloudEdgware.SR1来构建的，ide使用的是IntelliJ Idea。\n\n本人创建了一个公益eureka地址：[eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)\n\n\n下面是我学习SpringCloud的历程目录。\n  \n基础篇：\n\n[服务注册与发现---eureka ](https://www.dalaoyang.cn/article/7)  \n[负载均衡---ribbon  ](https://www.dalaoyang.cn/article/34)  \n[声明式调用---Feign](https://www.dalaoyang.cn/article/36)  \n[熔断器---Hystrix](https://www.dalaoyang.cn/article/37)  \n[路由网关---zuul ](https://www.dalaoyang.cn/article/38)  \n[分布式配置  ](https://www.dalaoyang.cn/article/39) \n[消息总线   ](https://www.dalaoyang.cn/article/40) \n[服务链路追踪---Sleuth   ](https://www.dalaoyang.cn/article/42)      \n[SpringBoot Admin监控  ](https://www.dalaoyang.cn/article/33) \n\n\n安全篇：\n\nSpringCloud Oauth2认证\nSpringBoot Security\n\n\n未完待续，文章目录和内容在整理中，后续会不断更新......\n\n\n个人网站：[http://dalaoyang.cn](https://link.jianshu.com/?t=http%3A%2F%2Fdalaoyang.cn%2F)\n\n\n\n', 'dalaoyang', '2018-02-01', 1433, 'Y', '2', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (15, '利用nginx，腾讯云免费证书制作https\r\n', '之前一直在研究，https怎么弄。最近看到了腾讯云提供的免费得ssl证书，寻思把网站弄成https。\r\n\r\n首先先去腾讯云购买一个免费得证书。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/1)\r\n\r\n点击后填写内容，\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/2)\r\n\r\n然后下载证书\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/3)\r\n\r\n解压证书就可以看到，提供四种方式来修改https，我们需要用到的是\r\nNginx包里面的东西。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/4)\r\n\r\n\r\n证书到这里就搞完了。\r\n\r\n然后说一下项目配置，本人网站项目是用springboot做的，端口号8888。\r\n\r\n然后服务器安装nginx，具体安装细节就不细说了，不懂的就百度一下吧，特别简单。需要说的就是nginx.conf配置：\r\n\r\n```\r\n    ##这里是将http默认的80端口重定向到https\r\n    server {\r\n        listen       80;\r\n        server_name  www.dalaoyang.cn;\r\n        rewrite ^ https://$http_host$request_uri? permanent; \r\n    }\r\n	\r\n	##这里是将默认请求https的443端口拦截\r\n	##并请求转发到http://127.0.0.1:8888/\r\n    server {\r\n        listen 443;\r\n        server_name www.dalaoyang.cn;\r\n        ssl on;     \r\n         ssl_certificate 1_dalaoyang.cn_bundle.crt;\r\n        ssl_certificate_key 2_dalaoyang.cn.key;\r\n        ssl_session_timeout 5m;\r\n        location / {\r\n            proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_set_header Host $http_host;\r\n            proxy_set_header X-NginX-Proxy true;\r\n               #你的项目端口号\r\n            proxy_pass http://127.0.0.1:8888/;\r\n            proxy_redirect off;\r\n        }\r\n    }\r\n```\r\n\r\n然后在网站上输入www.dalaoyang.cn就可以看到如下图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/5)\r\n', 'dalaoyang', '2018-01-01', 928, 'Y', '3', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (16, 'linux安装jdk', '本文介绍的是使用yum方式安装jdk，想要用其他方式绕行。\r\n\r\n\r\n1.查看yum中管理的可用的JDK软件包列表：\r\n\r\n```\r\nyum search java | grep -i --color JDK\r\n```\r\n\r\n结果如下图所示：\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-bad4b7610a836356?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n2.选择合适版本，安装jdk，本人选择的是java-1.8.0-openjdk-devel.x86_64\r\n\r\n```\r\nyum install java-1.8.0-openjdk-devel.x86_64\r\n```\r\n\r\n3配置环境变量，打开etc文件下profile\r\n\r\n```\r\nvi  /etc/profile\r\n```\r\n\r\n在文件内添加\r\n\r\n```\r\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.71-2.b15.el7_2.x86_64\r\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r\nexport PATH=$PATH:$JAVA_HOME/bin\r\n```\r\n\r\n保存关闭后，执行，让配置生效：\r\n\r\n```\r\nsource  /etc/profile\r\n```\r\n\r\n然后分别输入下面命令确认jdk是否安装成功：\r\n\r\n```\r\njava\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-554d793642e2a29c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n```\r\njavac\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-d6b3ae68b1e18ed1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n```\r\njava -version\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-5fe09193970694c4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n能显示以上信息，就说明安装成功了。', 'dalaoyang', '2018-04-04', 318, 'Y', '4', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (17, 'SpringBoot整合Mybatis', '介绍一下SpringBoot整合mybatis，数据库选用的是mysql。\n\n首先创建数据库\n```\nCREATE DATABASE test;\n```\n\n建表以及插入初始数据(sql是从navicat中导出的)\n\n```\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for user\n-- ----------------------------\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_name` varchar(255) NOT NULL,\n  `user_password` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;\n\n-- ----------------------------\n-- Records of user\n-- ----------------------------\nBEGIN;\nINSERT INTO `user` VALUES (1, \'dalaoyang\', \'13\');\nINSERT INTO `user` VALUES (2, \'xiaoli\', \'123\');\nINSERT INTO `user` VALUES (3, \'xiaoxiongmao\', \'123\');\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n下图为项目目录结构，  \njava---  \ncontroller包负责测试整合  \ndao包作为数据操作层  \nentity作为数据实体类\n\nresources---  \nmapper写dao层对应实现的sql\nmybatis里面是mybatis配置，包含typeAlias等等\nsql里面放的是上面写的建表数据及sql\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/17/1)\n\n\n接下来直接上代码，启动类没有修改，代码如下\n```\npackage com.dalaoyang;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n\n\n@SpringBootApplication\npublic class SpringbootMybatisApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootMybatisApplication.class, args);\n    }\n}\n```\n\napplication.properties包含了数据库配置，mybatis配置，代码如下:\n\n```\n##端口号\nserver.port=8888\n\n\n##检查 mybatis 配置是否存在，一般命名为 mybatis-config.xml\nmybatis.check-config-location =true\n##配置文件位置\nmybatis.config-location=classpath:mybatis/mybatis-config.xml\n## mapper xml 文件地址\nmybatis.mapper-locations=classpath*:mapper/*Mapper.xml\n##日志级别\nlogging.level.com.yang.dao=debug\n\n##数据库url\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n实体类User\n\n```\npackage com.dalaoyang.entity;\n\nimport org.apache.ibatis.type.Alias;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@Alias(\"user\")\npublic class User {\n\n    private int id;\n    private String user_name;\n    private String user_password;\n\n    public User(String user_name, String user_password) {\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public User(int id, String user_name, String user_password) {\n        this.id = id;\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getUser_password() {\n        return user_password;\n    }\n\n    public void setUser_password(String user_password) {\n        this.user_password = user_password;\n    }\n}\n```\n\ndao层代码\n\n```\npackage com.dalaoyang.dao;\n\nimport com.dalaoyang.entity.User;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.util.List;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dao\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@Mapper\npublic interface UserMapper {\n    User findUserByUsername(String username);\n\n    void updateUserByUsername(User user);\n\n    void deleteUserByUsername(String username);\n\n    void saveUser(User user);\n\n    List<User> getUserList();\n}\n```\n\nUserMapper.xml代码\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\">\n    <resultMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    <parameterMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    <select id=\"findUserByUsername\" parameterType=\"String\" resultMap=\"user\">\n        SELECT * FROM user\n        WHERE user_name=#{1}\n    </select>\n\n\n    <update id=\"updateUserByUsername\" parameterMap=\"user\">\n        UPDATE USER SET USER_PASSWORD=#{user_password} WHERE USER_NAME=#{user_name}\n    </update>\n\n    <delete id=\"deleteUserByUsername\" parameterType=\"String\">\n        DELETE FROM USER WHERE USER_NAME=#{1}\n    </delete>\n\n    <!-- 使用alias自定义的parameterType-->\n    <insert id=\"saveUser\" parameterType=\"user\">\n        INSERT INTO USER (user_password,user_name) VALUES (#{user_password},#{user_name})\n    </insert>\n\n    <select id=\"getUserList\" resultMap=\"user\">\n        SELECT  * FROM USER\n    </select>\n</mapper>\n```\n\nmybatis-config.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD SQL Map Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\" />\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\" />\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\" />\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\" />\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\" />\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\" />\n        <typeAlias alias=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    </typeAliases>\n</configuration>\n```\n\npom文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mybatis</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mybatis</name>\n    <description>springboot_mybatis</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\nUserController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.dao.UserMapper;\nimport com.dalaoyang.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    UserMapper userMapper;\n\n    //http://localhost:8888/getUser?username=xiaoli2\n    @RequestMapping(\"/getUser\")\n    public String getUser(String username){\n        User user =userMapper.findUserByUsername(username);\n        return user!=null ? username+\"的密码是：\"+user.getUser_password():\"不存在用户名为\"+username+\"的用户\";\n    }\n\n    //http://localhost:8888/updateUser?username=xiaoli2&password=123\n    @RequestMapping(\"/updateUser\")\n    public String updateUser(String password,String username){\n        User user = new User(username,password);\n        userMapper.updateUserByUsername(user);\n        return \"success!\";\n    }\n\n\n    //http://localhost:8888/addUser?username=xiaoli2&password=123\n    @RequestMapping(\"/addUser\")\n    public String addUser(String username,String password){\n        User user = new User(username,password);\n        userMapper.saveUser(user);\n        return \"success!\";\n    }\n\n    //http://localhost:8888/addUser?username=xiaoli2\n    @RequestMapping(\"/deleteUser\")\n    public String deleteUser(String username){\n        userMapper.deleteUserByUsername(username);\n        return \"success!\";\n    }\n\n    //http://localhost:8888/getUserList\n    @RequestMapping(\"/getUserList\")\n    public List getUserList(String username, String password){\n        return userMapper.getUserList();\n    }\n}\n```\n\n启动项目，访问controller上面对应的注释上的地址即可以测试，\n其中包含了简单的增删改查，SpringBoot整合Mybatis就这样完成了。\n\n', 'dalaoyang', '2018-04-05', 1194, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (18, 'SpringBoot整合Jpa', '上一篇介绍了springboot简单整合mybatis的教程。这一篇是介绍springboot简单整合jpa的教程。\n\n由于jpa的功能强大，后续会继续写关于jpa的介绍已经使用，本文只是简单介绍一下它与springboot的整合。\n\njpa不需要像mybatis一样创建表，首先给大家看一下application.properties文件代码，其中包含了jpa的配置和数据库配置，尤其注意一下spring.jpa.hibernate.ddl-auto属性，代码如下：\n\n```\n##端口号\nserver.port=8888\n\n\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=create\n\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n启动类application\n\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootJpaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootJpaApplication.class, args);\n    }\n}\n\n```\n\npom文件大致和整合mybatis一样，只是把其中的mybatis改成了jpa，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_jpa</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_jpa</name>\n    <description>springboot_jpa</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n实体类city，其中@Table中的name对应数据库中表的名称\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n然后就是jpa的重要地方，CityRepository，继承了JpaRepository，\n由于本文只是简单介绍了jpa的简单功能，所以JpaRepository中内置的方法已经足够使用。\n\n代码如下：\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\n\n最后是controller，里面和mybatis整合一样，方法上面写的就是对应的测试方法。\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.repository.CityRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n\n    @Autowired\n    private CityRepository cityRepository;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(String cityName,String cityIntroduce){\n        City city = new City(cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCity?cityId=2\n    @GetMapping(value = \"deleteCity\")\n    public String deleteCity(int cityId){\n        cityRepository.delete(cityId);\n        return \"success\";\n    }\n\n    //http://localhost:8888/updateCity?cityId=3&cityName=沈阳&cityIntroduce=辽宁省省会\n    @GetMapping(value = \"updateCity\")\n    public String updateCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/getCityById?cityId=3\n    @GetMapping(value = \"getCityById\")\n    public City getCityById(int cityId){\n        City city = cityRepository.findOne(cityId);\n        return city;\n    }\n}\n```\n\n\n到这里启动项目就可以简单测试一下整合的效果了。', 'dalaoyang', '2018-04-06', 979, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (19, 'SpringBoot定时任务', '项目中很多时候会使用到定时任务，这篇文章介绍一下springboot整合定时任务。\n\nspringboot整合定时任务其实就两点，  \n1.创建一个能被定时任务类，方法上加入@Scheduled注解\n2.在启动类application上加入@EnableScheduling注解\n\n\n代码如下，pom文件我只加入了devtools，其实不加入也可以\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_scheduled</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_scheduled</name>\n    <description>springboot_scheduled</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\napplication类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@SpringBootApplication\n@EnableScheduling\npublic class SpringbootScheduledApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootScheduledApplication.class, args);\n    }\n}\n\n```\n\n定时任务类TestTimer\n\n```\npackage com.dalaoyang.timer;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.timer\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/7\n */\n@Component\npublic class TestTimer {\n\n    @Scheduled(cron = \"0/1 * * * * ?\")\n    private void test() {\n        System.out.println(\"执行定时任务的时间是：\"+new Date());\n    }\n\n}\n```\n\n\n到这里启动项目，可以看到控制台如下\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/19/1)\n\n\n\n需要注意的是@Scheduled(cron = \"0/1 * * * * ?\")中cron的值根据自己实际需要去写，如果需要可以去下面的网站去弄。  \n[http://cron.qqe2.com/](http://cron.qqe2.com/)', 'dalaoyang', '2018-04-07', 3210, 'N', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (20, 'SpringBoot返回json和xml', '有些情况接口需要返回的是xml数据，在springboot中并不需要每次都转换一下数据格式，只需做一些微调整即可。\n\n\n新建一个springboot项目，加入依赖jackson-dataformat-xml，pom文件代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_xml</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_xml</name>\n    <description>springboot_xml</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-xml</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n启动类默认即可，没有做任何调整。\n \n新建一个user类，代码如下：\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/8\n */\n@XmlRootElement\npublic class User {\n\n    String userName;\n    String userAge;\n    String userAddress;\n\n    public User(String userName, String userAge, String userAddress) {\n        this.userName = userName;\n        this.userAge = userAge;\n        this.userAddress = userAddress;\n    }\n\n    @XmlElement\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    @XmlElement\n    public String getUserAge() {\n        return userAge;\n    }\n\n    public void setUserAge(String userAge) {\n        this.userAge = userAge;\n    }\n\n    @XmlElement\n    public String getUserAddress() {\n        return userAddress;\n    }\n\n    public void setUserAddress(String userAddress) {\n        this.userAddress = userAddress;\n    }\n}\n```\n\n\n最后是controller，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.User;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/8\n */\n@RestController\npublic class UserController {\n\n    //http://localhost:8080/json\n    @GetMapping(value = \"/json\",produces = MediaType.APPLICATION_JSON_VALUE)\n    public User index(){\n        User user = new User(\"dalaoyang\", \"26\", \"北京\");\n        return user;\n    }\n\n\n    //http://localhost:8080/xml\n    @GetMapping(value = \"/xml\",produces = MediaType.APPLICATION_XML_VALUE)\n    public User XML(){\n        User user = new User(\"dalaoyang\", \"26\", \"北京\");\n        return user;\n    }\n}\n```\n\n\n到这里就可以启动项目了，访问http://localhost:8080/json,可以看到如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/20/1)\n\n\n访问http://localhost:8080/xml，如下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/20/2)', 'dalaoyang', '2018-04-08', 760, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (21, 'SpringBoot使用Swagger2实现Restful API', '很多时候，我们需要创建一个接口项目用来数据调转，其中不包含任何业务逻辑，比如我们公司。这时我们就需要实现一个具有Restful API的接口项目。\n\n本文介绍springboot使用swagger2实现Restful API。\n\n本项目使用mysql+jpa+swagger2。\n\n首先pom中加入swagger2，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_swagger2</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_swagger2</name>\n    <description>springboot_swagger2</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n接下来是配置文件，和整合jpa一样。代码如下：\n```\n##端口号\nserver.port=8888\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n创建一个swagger2配置类，简单解释一下，@Configuration注解让spring来加载配置，@EnableSwagger2开启swagger2。\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.dalaoyang.swagger\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"使用Swagger2构建RESTful APIs\")\n                .description(\"关注博主博客：https://www.dalaoyang.cn/\")\n                .termsOfServiceUrl(\"https://www.dalaoyang.cn/\")\n                .contact(\"dalaoyang\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n创建一个user类作为model\n```\npackage com.dalaoyang.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotNull;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.model\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Entity\n@ApiModel(description = \"user\")\npublic class User {\n\n    @ApiModelProperty(value = \"主键id\",hidden = true)\n    @GeneratedValue\n    @Id\n    int id;\n\n    @ApiModelProperty(value = \"用户名称\")\n    @NotNull\n    @Column\n    String userName;\n\n    @ApiModelProperty(value = \"用户密码\")\n    @Column\n    String userPassword;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getUserPassword() {\n        return userPassword;\n    }\n\n    public void setUserPassword(String userPassword) {\n        this.userPassword = userPassword;\n    }\n\n    public User(int id, String userName, String userPassword) {\n        this.id=id;\n        this.userName = userName;\n        this.userPassword = userPassword;\n    }\n    public User(String userName, String userPassword) {\n        this.userName = userName;\n        this.userPassword = userPassword;\n    }\n\n    public User() {\n    }\n}\n```\n\njpa数据操作类UserRepository\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n    User findById(int id);\n}\n\n```\n然后添加文档内容，其实和写controller一样，只不过方法和参数中间穿插一些注解。\n```\npackage com.dalaoyang.swagger;\n\nimport com.dalaoyang.model.User;\nimport com.dalaoyang.repository.UserRepository;\nimport io.swagger.annotations.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.swagger\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@RestController\n@RequestMapping(value=\"/users\")\n@Api(value=\"用户操作接口\",tags={\"用户操作接口\"})\npublic class UserSwagger {\n\n    @Autowired\n    UserRepository userRepository;\n\n    @ApiOperation(value=\"获取用户详细信息\", notes=\"根据用户的id来获取用户详细信息\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @GetMapping(value=\"/findById\")\n    public User findById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        return user;\n    }\n\n    @ApiOperation(value=\"获取用户列表\", notes=\"获取用户列表\")\n    @GetMapping(value=\"/getUserList\")\n    public List getUserList(){\n        return userRepository.findAll();\n    }\n\n\n    @ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @PostMapping(value=\"/saveUser\")\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userRepository.save(user);\n        return \"success!\";\n    }\n\n    @ApiOperation(value=\"修改用户\", notes=\"修改用户\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name=\"id\",value=\"主键id\",required=true,paramType=\"query\",dataType=\"Integer\"),\n            @ApiImplicitParam(name=\"username\",value=\"用户名称\",required=true,paramType=\"query\",dataType = \"String\"),\n            @ApiImplicitParam(name=\"password\",value=\"用户密码\",required=true,paramType=\"query\",dataType = \"String\")\n    })\n    @GetMapping(value=\"/updateUser\")\n    public String updateUser(@RequestParam(value = \"id\")int id,@RequestParam(value = \"username\")String username,\n                             @RequestParam(value = \"password\")String password){\n        User user = new User(id, username, password);\n        userRepository.save(user);\n        return \"success!\";\n    }\n\n\n    @ApiOperation(value=\"删除用户\", notes=\"根据用户的id来删除用户\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @DeleteMapping(value=\"/deleteUserById\")\n    public String deleteUserById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        userRepository.delete(user);\n        return \"success!\";\n    }\n\n}\n```\n\n\n启动项目，访问http://localhost:8888/swagger-ui.html，可以看到如下图\n\n\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/1)\n\n\n为了方便大家学习观看，我分别用了几种不同的方法写，\n\n1.删除用户，代码如下\n```\n\n\n    @ApiOperation(value=\"删除用户\", notes=\"根据用户的id来删除用户\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @DeleteMapping(value=\"/deleteUserById\")\n    public String deleteUserById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        userRepository.delete(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/2)\n2.获取用户详细信息\n```\n @ApiOperation(value=\"获取用户详细信息\", notes=\"根据用户的id来获取用户详细信息\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @GetMapping(value=\"/findById\")\n    public User findById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        return user;\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/3)\n\n3.获取用户列表\n```\n@ApiOperation(value=\"获取用户列表\", notes=\"获取用户列表\")\n    @GetMapping(value=\"/getUserList\")\n    public List getUserList(){\n        return userRepository.findAll();\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/4)\n\n4.保存用户\n```\n@ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @PostMapping(value=\"/saveUser\")\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userRepository.save(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/5)\n\n5.修改用户\n```\n   @ApiOperation(value=\"修改用户\", notes=\"修改用户\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name=\"id\",value=\"主键id\",required=true,paramType=\"query\",dataType=\"Integer\"),\n            @ApiImplicitParam(name=\"username\",value=\"用户名称\",required=true,paramType=\"query\",dataType = \"String\"),\n            @ApiImplicitParam(name=\"password\",value=\"用户密码\",required=true,paramType=\"query\",dataType = \"String\")\n    })\n    @PutMapping(value=\"/updateUser\")\n    public String updateUser(@RequestParam(value = \"id\")int id,@RequestParam(value = \"username\")String username,\n                             @RequestParam(value = \"password\")String password){\n        User user = new User(id, username, password);\n        userRepository.save(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/6)\n\n\n然后给大家分享一下我之前学习时记录在有道云笔记的关于swagger2的使用说明，原创作者是谁，我也记不清了。如果原创作者看到的话，可以私聊我，我给您的名字加上，抱歉。\n\n```\n@Api：用在请求的类上，表示对类的说明\n    tags=\"说明该类的作用，可以在UI界面上看到的注解\"\n    value=\"该参数没什么意义，在UI界面上也看到，所以不需要配置\"\n示例：\n@Api(tags=\"APP用户注册Controller\")\n\n@ApiOperation：用在请求的方法上，说明方法的用途、作用\n    value=\"说明方法的用途、作用\"\n    notes=\"方法的备注说明\"\n示例：\n@ApiOperation(value=\"用户注册\",notes=\"手机号、密码都是必输项，年龄随边填，但必须是数字\")\n\n@ApiImplicitParams：用在请求的方法上，表示一组参数说明\n    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramType：参数放在哪个地方\n            · header --> 请求参数的获取：@RequestHeader\n            · query --> 请求参数的获取：@RequestParam\n            · path（用于restful接口）--> 请求参数的获取：@PathVariable\n            · body（不常用）\n            · form（不常用）    \n        dataType：参数类型，默认String，其它值dataType=\"Integer\"       \n        defaultValue：参数的默认值\n示例：\n@ApiImplicitParams({\n    @ApiImplicitParam(name=\"mobile\",value=\"手机号\",required=true,paramType=\"form\"),\n    @ApiImplicitParam(name=\"password\",value=\"密码\",required=true,paramType=\"form\"),\n    @ApiImplicitParam(name=\"age\",value=\"年龄\",required=true,paramType=\"form\",dataType=\"Integer\")\n})\n\n@ApiResponses：用在请求的方法上，表示一组响应\n    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如\"请求参数没填好\"\n        response：抛出异常的类\n@ApiOperation(value = \"select1请求\",notes = \"多个参数，多种的查询参数类型\")\n@ApiResponses({\n    @ApiResponse(code=400,message=\"请求参数没填好\"),\n    @ApiResponse(code=404,message=\"请求路径没有或页面跳转路径不对\")\n})\n\n@ApiModel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@RequestBody这样的场景，\n            请求参数无法使用@ApiImplicitParam注解进行描述的时候）\n    @ApiModelProperty：用在属性上，描述响应类的属性\n示例：\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport java.io.Serializable;\n\n@ApiModel(description= \"返回响应数据\")\npublic class RestMessage implements Serializable{\n\n    @ApiModelProperty(value = \"是否成功\")\n    private boolean success=true;\n    @ApiModelProperty(value = \"返回对象\")\n    private Object data;\n    @ApiModelProperty(value = \"错误编号\")\n    private Integer errCode;\n    @ApiModelProperty(value = \"错误信息\")\n    private String message;\n\n    \n}\n\n\n\nPOST请求传入对象 \n示例：\n   @ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @RequestMapping(value=\"/saveUser\", method= RequestMethod.POST)\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userDao.save(user);\n        return \"success!\";\n    }\n```', 'dalaoyang', '2018-04-09', 960, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (22, 'SpringBoot文件上传下载', '项目中经常会有上传和下载的需求，这篇文章简述一下springboot项目中实现简单的上传和下载。\n\n新建springboot项目，前台页面使用的thymeleaf模板，其余的没有特别的配置，pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_upload_download</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_upload_download</name>\n	<description>springboot_upload_download</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>net.sourceforge.nekohtml</groupId>\n			<artifactId>nekohtml</artifactId>\n			<version>1.9.15</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n前台页面index.html，其中包含单个上传，下载，批量上传。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<p>单文件上传</p>\n<form action=\"upload\" method=\"POST\" enctype=\"multipart/form-data\">\n    文件：<input type=\"file\" name=\"file\"/>\n    <input type=\"submit\"/>\n</form>\n<hr/>\n<p>文件下载</p>\n<a href=\"download\">下载文件</a>\n<hr/>\n<p>多文件上传</p>\n<form method=\"POST\" enctype=\"multipart/form-data\" action=\"batch\">\n    <p>文件1：<input type=\"file\" name=\"file\"/></p>\n    <p>文件2：<input type=\"file\" name=\"file\"/></p>\n    <p><input type=\"submit\" value=\"上传\"/></p>\n</form>\n</body>\n</html>\n```\n\nIndexController只是用来页面的跳转\n```\npackage com.dalaoyang.Controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index()\n    {\n        return \"index\";\n    }\n}\n```\n\n最后是本文的重点，FileController，其中包含单个上传，单个下载，批量上传对应的方法。需要注意下载功能写的是对应我电脑里面固定位置的文件，仅供大家来参考。以下是代码：\n```\npackage com.dalaoyang.Controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.util.List;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@RestController\npublic class FileController {\n    private static final Logger log = LoggerFactory.getLogger(FileController.class);\n\n    @RequestMapping(value = \"/upload\")\n    public String upload(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            if (file.isEmpty()) {\n                return \"文件为空\";\n            }\n            // 获取文件名\n            String fileName = file.getOriginalFilename();\n            log.info(\"上传的文件名为：\" + fileName);\n            // 获取文件的后缀名\n            String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\n            log.info(\"文件的后缀名为：\" + suffixName);\n            // 设置文件存储路径\n            String filePath = \"/Users/dalaoyang/Downloads/\";\n            String path = filePath + fileName;\n            File dest = new File(path);\n            // 检测是否存在目录\n            if (!dest.getParentFile().exists()) {\n                dest.getParentFile().mkdirs();// 新建文件夹\n            }\n            file.transferTo(dest);// 文件写入\n            return \"上传成功\";\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"上传失败\";\n    }\n\n    @PostMapping(\"/batch\")\n    public String handleFileUpload(HttpServletRequest request) {\n        List<MultipartFile> files = ((MultipartHttpServletRequest) request).getFiles(\"file\");\n        MultipartFile file = null;\n        BufferedOutputStream stream = null;\n        for (int i = 0; i < files.size(); ++i) {\n            file = files.get(i);\n            String filePath = \"/Users/dalaoyang/Downloads/\";\n            if (!file.isEmpty()) {\n                try {\n                    byte[] bytes = file.getBytes();\n                    stream = new BufferedOutputStream(new FileOutputStream(\n                            new File(filePath + file.getOriginalFilename())));//设置文件路径及名字\n                    stream.write(bytes);// 写入\n                    stream.close();\n                } catch (Exception e) {\n                    stream = null;\n                    return \"第 \" + i + \" 个文件上传失败 ==> \"\n                            + e.getMessage();\n                }\n            } else {\n                return \"第 \" + i\n                        + \" 个文件上传失败因为文件为空\";\n            }\n        }\n        return \"上传成功\";\n    }\n\n    @GetMapping(\"/download\")\n    public String downloadFile(HttpServletRequest request, HttpServletResponse response) {\n        String fileName = \"dalaoyang.jpeg\";// 文件名\n        if (fileName != null) {\n            //设置文件路径\n            File file = new File(\"/Users/dalaoyang/Documents/dalaoyang.jpeg\");\n            //File file = new File(realPath , fileName);\n            if (file.exists()) {\n                response.setContentType(\"application/force-download\");// 设置强制下载不打开\n                response.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + fileName);// 设置文件名\n                byte[] buffer = new byte[1024];\n                FileInputStream fis = null;\n                BufferedInputStream bis = null;\n                try {\n                    fis = new FileInputStream(file);\n                    bis = new BufferedInputStream(fis);\n                    OutputStream os = response.getOutputStream();\n                    int i = bis.read(buffer);\n                    while (i != -1) {\n                        os.write(buffer, 0, i);\n                        i = bis.read(buffer);\n                    }\n                    return \"下载成功\";\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    if (bis != null) {\n                        try {\n                            bis.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    if (fis != null) {\n                        try {\n                            fis.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        return \"下载失败\";\n    }\n}\n```', 'dalaoyang', '2018-04-10', 1468, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (23, 'SpringBoot邮件发送', '这篇文章介绍springboot的邮件发送。\n\n由于很简单就没有分出server和imp之类，只是在controller简单写个方法进行测试。\n\n首先pom文件加入spring-boot-starter-mail，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mail</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mail</name>\n    <description>springboot_mail</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-mail</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n接下来是application.properties，里面包含发送邮箱的地址，账号密码，接信地址，由于只是测试，所以都是固定写死的，如果项目中需要，可以根据自行情况进行修改。\n```\n##端口号\nserver.port=8888\n\n##这里根据自己的情况填写\n##邮箱服务器地址\n##QQ smtp.qq.com\n##sina smtp.sina.cn\n##aliyun smtp.aliyun.com\n##163 smtp.163.com\nspring.mail.host=smtp.aliyun.com\n##邮箱用户名\nspring.mail.username=dalaoyang@aliyun.com\n##邮箱密码（注意：qq邮箱应该使用独立密码，去qq邮箱设置里面获取）\nspring.mail.password=******\n##编码格式\nspring.mail.default-encoding=UTF-8\n\n##发送邮件地址\nmail.fromMail.sender=dalaoyang@aliyun.com\n##接收邮件地址\nmail.fromMail.receiver=yangyang@dalaoyang.cn\n\n\n```\n\n然后先展示一下controller的完整代码：\n```\npackage com.dalaoyang.controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.MimeMessageHelper;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.mail.MessagingException;\nimport javax.mail.internet.MimeMessage;\nimport java.io.File;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@RestController\npublic class MailController {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Value(\"${mail.fromMail.sender}\")\n    private String sender;\n\n    @Value(\"${mail.fromMail.receiver}\")\n    private String receiver;\n\n    @Autowired\n    private JavaMailSender javaMailSender;\n\n    /* *\n     * @Description  http://localhost:8888/sendMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送文本邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendMail\")\n    public String sendMail() {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(sender);\n        message.setTo(receiver);\n        message.setSubject(\"大老杨\");\n        message.setText(\"你好你好你好！\");\n        try {\n            javaMailSender.send(message);\n            logger.info(\"简单邮件已经发送。\");\n        } catch (Exception e) {\n            logger.error(\"发送简单邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description  http://localhost:8888/sendHtmlMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送html邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendHtmlMail\")\n    public String testHtmlMail() {\n        String content=\"<html>\\n\" +\n                \"<body>\\n\" +\n                \"    <h3>hello world ! 这是一封Html邮件!</h3>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            //true表示需要创建一个multipart message\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"html mail\");\n            helper.setText(content, true);\n\n            javaMailSender.send(message);\n            logger.info(\"html邮件发送成功\");\n        } catch (MessagingException e) {\n            logger.error(\"发送html邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description http://localhost:8888/sendFilesMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送附件邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendFilesMail\")\n    public String sendFilesMail() {\n        String filePath=\"/Users/dalaoyang/Downloads/article_tag.sql\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"附件邮件\");\n            helper.setText(\"这是一封带附件的邮件\", true);\n\n            FileSystemResource file = new FileSystemResource(new File(filePath));\n            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));\n            helper.addAttachment(fileName, file);\n\n            javaMailSender.send(message);\n            logger.info(\"带附件的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送带附件的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description http://localhost:8888/sendInlineResourceMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送图片邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendInlineResourceMail\")\n    public String sendInlineResourceMail() {\n        String Id = \"dalaoyang12138\";\n        String content=\"<html><body>这是有图片的邮件：<img src=\\\'cid:\" + Id + \"\\\' ></body></html>\";\n        String imgPath = \"/Users/dalaoyang/Downloads/dalaoyang.jpeg\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"这是有图片的邮件\");\n            helper.setText(content, true);\n\n            FileSystemResource res = new FileSystemResource(new File(imgPath));\n            helper.addInline(Id, res);\n\n            javaMailSender.send(message);\n            logger.info(\"嵌入静态资源的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送嵌入静态资源的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n}\n\n```\n\n然后一点一点来，本文分4种情况：\n1.发送简单的文本邮件\n```\n /* *\n     * @Description  http://localhost:8888/sendMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送文本邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendMail\")\n    public String sendMail() {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(sender);\n        message.setTo(receiver);\n        message.setSubject(\"大老杨\");\n        message.setText(\"你好你好你好！\");\n        try {\n            javaMailSender.send(message);\n            logger.info(\"简单邮件已经发送。\");\n        } catch (Exception e) {\n            logger.error(\"发送简单邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/1)\n\n2.发送html邮件\n\n```\n/* *\n     * @Description  http://localhost:8888/sendHtmlMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送html邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendHtmlMail\")\n    public String testHtmlMail() {\n        String content=\"<html>\\n\" +\n                \"<body>\\n\" +\n                \"    <h3>hello world ! 这是一封Html邮件!</h3>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            //true表示需要创建一个multipart message\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"html mail\");\n            helper.setText(content, true);\n\n            javaMailSender.send(message);\n            logger.info(\"html邮件发送成功\");\n        } catch (MessagingException e) {\n            logger.error(\"发送html邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendHtmlMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/2)\n\n\n3.发送附件邮件\n```\n/* *\n     * @Description http://localhost:8888/sendFilesMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送附件邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendFilesMail\")\n    public String sendFilesMail() {\n        String filePath=\"/Users/dalaoyang/Downloads/article_tag.sql\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"附件邮件\");\n            helper.setText(\"这是一封带附件的邮件\", true);\n\n            FileSystemResource file = new FileSystemResource(new File(filePath));\n            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));\n            helper.addAttachment(fileName, file);\n\n            javaMailSender.send(message);\n            logger.info(\"带附件的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送带附件的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n访问http://localhost:8888/sendFilesMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/3)\n\n\n4.发送图片邮件\n\n```\n /* *\n     * @Description http://localhost:8888/sendInlineResourceMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送图片邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendInlineResourceMail\")\n    public String sendInlineResourceMail() {\n        String Id = \"dalaoyang12138\";\n        String content=\"<html><body>这是有图片的邮件：<img src=\\\'cid:\" + Id + \"\\\' ></body></html>\";\n        String imgPath = \"/Users/dalaoyang/Downloads/dalaoyang.jpeg\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"这是有图片的邮件\");\n            helper.setText(content, true);\n\n            FileSystemResource res = new FileSystemResource(new File(imgPath));\n            helper.addInline(Id, res);\n\n            javaMailSender.send(message);\n            logger.info(\"嵌入静态资源的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送嵌入静态资源的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendInlineResourceMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/4)', 'dalaoyang', '2018-04-11', 1051, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (24, '使用Log4j日志处理', 'Springboot日志默认使用的是logback，本文将介绍将springboot项目日志修改为log4j。\n\n首先要将默认的日志依赖排除，然后引用log4j，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_log4j</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_log4j</name>\n    <description>springboot_log4j</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupI>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-log4j</artifactId>\n            <version>1.3.2.RELEASE</version>\n            <type>pom</type>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n引用log4j之后，在resources加入log4j配置即可，下面是本人之前项目的log4j.properties内容，代码如下：\n```\nlog4j.rootLogger=debug,CONSOLE,FILE\n\n##输出到控制台\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=DEBUG\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH\\:mm\\:ss} -%-4r [%t] %-5p  %x - %m%n\nlog4j.appender.CONSOLE.Target=System.out\nlog4j.appender.CONSOLE.Encoding=gbk\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n\n\n##输出到日志文件 每10M分成一个日志文件\nlog4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.FILE.File=/Users/dalaoyang/Downloads/log\nlog4j.appender.FILE.DatePattern = \'_\'yyyy-MM-dd-HH-mm\'.log\'\nlog4j.appender.FILE.MaxFileSize=10MB\nlog4j.appender.FILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.FILE.layout.ConversionPattern=%d%n%m%n\n\n\n\n```\n\n简单讲解一下：  \nCONSOLE里面是输出到控制台的日志\nFILE是输入到日志文件的日志，日志是按照大小分的，最大为10M，\n每小时一个日志文件。', 'dalaoyang', '2018-04-13', 753, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (25, 'SpringBoot多数据源', '很多业务场景都需要使用到多数据库，本文介绍springboot对多数据源的使用。\n\n这次先说一下application.properties文件，分别连接了2个数据库test和test1。完整代码如下：\n```\n##端口号\nserver.port=8888\n\n\n##数据库url\nspring.datasource.test.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.test.username=root\n##数据库密码\nspring.datasource.test.password=root\n##数据库驱动\nspring.datasource.test.driver-class-name=com.mysql.jdbc.Driver\n\n\n##数据库url\nspring.datasource.test2.url=jdbc:mysql://localhost:3306/test2?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.test2.username=root\n##数据库密码\nspring.datasource.test2.password=root\n##数据库驱动\nspring.datasource.test2.driver-class-name=com.mysql.jdbc.Driver\n\n\nspring.jpa.hibernate.ddl-auto=create\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n然后说一下处理多数据源的DataSourceConfig，其中@ConfigurationProperties注解对应刚才的数据库，而且这个重点是一定要有一个主数据源，并且在上面加上@Primary，代码如下：\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport javax.sql.DataSource;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\npublic class DataSourceConfig {\n    @Bean(name = \"testDataSource\")\n    @Qualifier(\"testDataSource\")\n    @ConfigurationProperties(prefix=\"spring.datasource.test\")\n    public DataSource primaryDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = \"test2DataSource\")\n    @Qualifier(\"test2DataSource\")\n    @Primary\n    @ConfigurationProperties(prefix=\"spring.datasource.test2\")\n    public DataSource secondaryDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n}\n```\n\n\n接下来是对应test数据库的配置，其中需要说一下的是@EnableJpaRepositories注解里面的basePackages属性对应的是这个数据源对应的repository（因为本文使用的是jpa）， @Qualifier注解内的value要和DataSourceConfig的值一致即可。\n代码如下：\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        entityManagerFactoryRef=\"entityManagerFactoryPrimary\",\n        transactionManagerRef=\"transactionManagerPrimary\",\n        basePackages= { \"com.dalaoyang.repository.datasource\" })\npublic class TestDataSourceConfig {\n    @Autowired\n    @Qualifier(\"testDataSource\")\n    private DataSource dataSource;\n\n    @Primary\n    @Bean(name = \"entityManagerPrimary\")\n    public EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n        return entityManagerFactoryPrimary(builder).getObject().createEntityManager();\n    }\n\n    @Primary\n    @Bean(name = \"entityManagerFactoryPrimary\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary (EntityManagerFactoryBuilder builder) {\n        return builder\n                .dataSource(dataSource)\n                .properties(getVendorProperties(dataSource))\n                .packages(\"com.dalaoyang.entity.datasource\") //设置实体类所在位置\n                .persistenceUnit(\"primaryPersistenceUnit\")\n                .build();\n    }\n\n    @Autowired\n    private JpaProperties jpaProperties;\n\n    private Map<String, String> getVendorProperties(DataSource dataSource) {\n        return jpaProperties.getHibernateProperties(dataSource);\n    }\n\n    @Primary\n    @Bean(name = \"transactionManagerPrimary\")\n    public PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());\n    }\n}\n```\n\nTest2DataSourceConfig就不多说了，和TestDataSourceConfig原理一致，代码如下：\n```\npackage com.dalaoyang.config;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\nimport java.util.Map;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        entityManagerFactoryRef=\"entityManagerFactorySecondary\",\n        transactionManagerRef=\"transactionManagerSecondary\",\n        basePackages= { \"com.dalaoyang.repository.datasource2\" }) //设置Repository所在位置\npublic class Test2DataSourceConfig {\n    @Autowired\n    @Qualifier(\"test2DataSource\")\n    private DataSource dataSource;\n\n    @Bean(name = \"entityManagerSecondary\")\n    public EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n        return entityManagerFactorySecondary(builder).getObject().createEntityManager();\n    }\n\n    @Bean(name = \"entityManagerFactorySecondary\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactorySecondary (EntityManagerFactoryBuilder builder) {\n        return builder\n                .dataSource(dataSource)\n                .properties(getVendorProperties(dataSource))\n                .packages(\"com.dalaoyang.entity.datasource2\") //设置实体类所在位置\n                .persistenceUnit(\"secondaryPersistenceUnit\")\n                .build();\n    }\n\n    @Autowired\n    private JpaProperties jpaProperties;\n\n    private Map<String, String> getVendorProperties(DataSource dataSource) {\n        return jpaProperties.getHibernateProperties(dataSource);\n    }\n\n    @Bean(name = \"transactionManagerSecondary\")\n    PlatformTransactionManager transactionManagerSecondary(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());\n    }\n}\n```\n\n下面是对应的model和repository\n\nCity类\n```\npackage com.dalaoyang.entity.datasource;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n\n\n}\n\n```\nHouse类\n\n```\npackage com.dalaoyang.entity.datasource2;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Entity\n@Table(name=\"house\")\npublic class House {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int houseId;\n    private String houseName;\n    private String houseIntroduce;\n\n    public int getHouseId() {\n        return houseId;\n    }\n\n    public void setHouseId(int houseId) {\n        this.houseId = houseId;\n    }\n\n    public String getHouseName() {\n        return houseName;\n    }\n\n    public void setHouseName(String houseName) {\n        this.houseName = houseName;\n    }\n\n    public String getHouseIntroduce() {\n        return houseIntroduce;\n    }\n\n    public void setHouseIntroduce(String houseIntroduce) {\n        this.houseIntroduce = houseIntroduce;\n    }\n\n    public House(String houseName, String houseIntroduce) {\n        this.houseName = houseName;\n        this.houseIntroduce = houseIntroduce;\n    }\n}\n```\n\nCityRepository\n\n```\npackage com.dalaoyang.repository.datasource;\n\nimport com.dalaoyang.entity.datasource.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\nHouseRepository\n\n```\npackage com.dalaoyang.repository.datasource2;\n\nimport com.dalaoyang.entity.datasource2.House;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository.datasource2\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\npublic interface HouseRepository extends JpaRepository<House,Integer> {\n}\n```\n\npom文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_datasources</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_datasources</name>\n	<description>springboot_datasources</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-jpa</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>mysql</groupId>\n			<artifactId>mysql-connector-java</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n\n```\n\n因为上面这些都没什么可说的，都是和正常的写法没什么区别，最后是TestController测试类\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.datasource.City;\nimport com.dalaoyang.entity.datasource2.House;\nimport com.dalaoyang.repository.datasource.CityRepository;\nimport com.dalaoyang.repository.datasource2.HouseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@RestController\npublic class TestController {\n\n    @Autowired\n    CityRepository cityRepository;\n\n    @Autowired\n    HouseRepository houseRepository;\n\n    @GetMapping(\"/testDataSource\")\n    public String testDataSource(){\n        City city = new City(\"北京\",\"中国首都\");\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    @GetMapping(\"/testDataSource2\")\n    public String testDataSource2(){\n        House house = new House(\"豪宅\",\"特别大的豪宅\");\n        houseRepository.save(house);\n        return \"success\";\n    }\n\n}\n```\n\n启动项目可以看到test数据库中新建了city表，test2数据库中新建了house表。\n\n', 'dalaoyang', '2018-04-14', 994, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (26, 'SpringBoot集成阿里巴巴Druid监控', 'druid是阿里巴巴开源的数据库连接池，提供了优秀的对数据库操作的监控功能，本文要讲解一下springboot项目怎么集成druid。\n\n本文在基于jpa的项目下开发，首先在pom文件中额外加入druid依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_druid</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_druid</name>\n    <description>springboot_druid</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.12.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.28</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\napplication.properties上半段和整合jpa一点没变，下面加入了一些druid的配置，如果对druid的配置有什么不理解的，可以去网上查一下。（这篇文章我觉得写的很好，[传送门](https://blog.csdn.net/hj7jay/article/details/51686418)）\n\n```\n#端口号\nserver.port=8888\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=create\n\n##控制台打印sql\nspring.jpa.show-sql=true\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n#这里是不同的\n#使用druid的话 需要多配置一个属性spring.datasource.type\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource  \n\n\n# 连接池的配置信息\n# 初始化大小，最小，最大\nspring.datasource.initialSize=5  \nspring.datasource.minIdle=5  \nspring.datasource.maxActive=20  \n# 配置获取连接等待超时的时间\nspring.datasource.maxWait=60000  \n# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\nspring.datasource.timeBetweenEvictionRunsMillis=60000  \n# 配置一个连接在池中最小生存的时间，单位是毫秒\nspring.datasource.minEvictableIdleTimeMillis=300000  \nspring.datasource.validationQuery=SELECT 1 FROM DUAL  \nspring.datasource.testWhileIdle=true  \nspring.datasource.testOnBorrow=false  \nspring.datasource.testOnReturn=false  \n# 打开PSCache，并且指定每个连接上PSCache的大小\nspring.datasource.poolPreparedStatements=true  \nspring.datasource.maxPoolPreparedStatementPerConnectionSize=20  \n# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\nspring.datasource.filters=stat,wall,log4j\n# 通过connectProperties属性来打开mergeSql功能；慢SQL记录\n```\n\n然后在项目中加入DruidConfig，简单讲解一下，这个配置文件主要是加载application.properties的配置，代码如下：\n```\npackage com.dalaoyang.config;\n\nimport java.sql.SQLException;\n\nimport javax.sql.DataSource;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport com.alibaba.druid.pool.DruidDataSource;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n@Configuration\npublic class DruidConfig {\n    private Logger logger = Logger.getLogger(this.getClass());\n\n    @Value(\"${spring.datasource.url}\")\n    private String dbUrl;\n\n    @Value(\"${spring.datasource.username}\")\n    private String username;\n\n    @Value(\"${spring.datasource.password}\")\n    private String password;\n\n    @Value(\"${spring.datasource.driver-class-name}\")\n    private String driverClassName;\n\n    @Value(\"${spring.datasource.initialSize}\")\n    private int initialSize;\n\n    @Value(\"${spring.datasource.minIdle}\")\n    private int minIdle;\n\n    @Value(\"${spring.datasource.maxActive}\")\n    private int maxActive;\n\n    @Value(\"${spring.datasource.maxWait}\")\n    private int maxWait;\n\n    @Value(\"${spring.datasource.timeBetweenEvictionRunsMillis}\")\n    private int timeBetweenEvictionRunsMillis;\n\n    @Value(\"${spring.datasource.minEvictableIdleTimeMillis}\")\n    private int minEvictableIdleTimeMillis;\n\n    @Value(\"${spring.datasource.validationQuery}\")\n    private String validationQuery;\n\n    @Value(\"${spring.datasource.testWhileIdle}\")\n    private boolean testWhileIdle;\n\n    @Value(\"${spring.datasource.testOnBorrow}\")\n    private boolean testOnBorrow;\n\n    @Value(\"${spring.datasource.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Value(\"${spring.datasource.poolPreparedStatements}\")\n    private boolean poolPreparedStatements;\n\n    @Value(\"${spring.datasource.maxPoolPreparedStatementPerConnectionSize}\")\n    private int maxPoolPreparedStatementPerConnectionSize;\n\n    @Value(\"${spring.datasource.filters}\")\n    private String filters;\n\n    @Value(\"{spring.datasource.connectionProperties}\")\n    private String connectionProperties;\n\n    @Bean\n    @Primary  //主数据源\n    public DataSource dataSource(){\n        DruidDataSource datasource = new DruidDataSource();\n\n        datasource.setUrl(this.dbUrl);\n        datasource.setUsername(username);\n        datasource.setPassword(password);\n        datasource.setDriverClassName(driverClassName);\n\n        //configuration\n        datasource.setInitialSize(initialSize);\n        datasource.setMinIdle(minIdle);\n        datasource.setMaxActive(maxActive);\n        datasource.setMaxWait(maxWait);\n        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);\n        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);\n        datasource.setValidationQuery(validationQuery);\n        datasource.setTestWhileIdle(testWhileIdle);\n        datasource.setTestOnBorrow(testOnBorrow);\n        datasource.setTestOnReturn(testOnReturn);\n        datasource.setPoolPreparedStatements(poolPreparedStatements);\n        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);\n        try {\n            datasource.setFilters(filters);\n        } catch (SQLException e) {\n            logger.error(\"druid configuration Exception\", e);\n        }\n        datasource.setConnectionProperties(connectionProperties);\n\n        return datasource;\n    }\n}\n```\n\n然后创建DruidFilter，代码如下：\n```\npackage com.dalaoyang.filter;\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.annotation.WebInitParam;\n\nimport com.alibaba.druid.support.http.WebStatFilter;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.filter\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n\n\n@WebFilter(filterName=\"druidWebStatFilter\",urlPatterns=\"/*\",\n        initParams={\n                @WebInitParam(name=\"exclusions\",value=\"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")//忽略资源\n        }\n)\npublic class DruidFilter extends WebStatFilter  {\n}\n```\n\n\n新建DruidServlet，在类上面加注解@WebServlet，其中配置了登录druid监控页面的账号密码，白名单黑名单之类的配置，代码如下：\n```\npackage com.dalaoyang.servlet;\nimport javax.servlet.annotation.WebInitParam;\nimport javax.servlet.annotation.WebServlet;\n\nimport com.alibaba.druid.support.http.StatViewServlet;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.servlet\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n\n\n@WebServlet(urlPatterns=\"/druid/*\",\n        initParams={\n                @WebInitParam(name=\"allow\",value=\"\"),// IP白名单(没有配置或者为空，则允许所有访问)\n                @WebInitParam(name=\"deny\",value=\"\"),// IP黑名单 (deny优先于allow)\n                @WebInitParam(name=\"loginUsername\",value=\"admin\"),// 登录druid管理页面用户名\n                @WebInitParam(name=\"loginPassword\",value=\"admin\")// 登录druid管理页面密码\n        })\npublic class DruidServlet extends StatViewServlet {\n\n}\n```\n\n然后在启动类加入注解@ServletComponentScan，让项目扫描到servlet，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\n\n\n@SpringBootApplication\n// 启动类必须加入@ServletComponentScan注解，否则无法扫描到servlet\n@ServletComponentScan\npublic class SpringbootDruidApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDruidApplication.class, args);\n    }\n}\n```\n\n\n剩余的就是和整合jpa一样的entity（实体类），repository（数据操作层），controller（测试使用的controller），直接展示代码。\n\nCity\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n\nCityRepository\n\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\nCityController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.repository.CityRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n\n    @Autowired\n    private CityRepository cityRepository;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(String cityName,String cityIntroduce){\n        City city = new City(cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCity?cityId=2\n    @GetMapping(value = \"deleteCity\")\n    public String deleteCity(int cityId){\n        cityRepository.delete(cityId);\n        return \"success\";\n    }\n\n    //http://localhost:8888/updateCity?cityId=3&cityName=沈阳&cityIntroduce=辽宁省省会\n    @GetMapping(value = \"updateCity\")\n    public String updateCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n\n    //http://localhost:8888/getCityById?cityId=3\n    @GetMapping(value = \"getCityById\")\n    public City getCityById(int cityId){\n        City city = cityRepository.findOne(cityId);\n        return city;\n    }\n}\n```\n\n然后启动项目，可以看到控制台已经创建了city表。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/1)\n\n然后访问http://localhost:8888/druid，可以看到如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/2)\n\n输入账号密码admin，admin，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/3)\n\n然后这时我们可以访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n\n然后点击导航上面的SQL监控，如下图，\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/4)\n\n从上图可以看到启动项目创建表的sql已经刚刚执行的sql。到这里整合已经完成了。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-15', 1129, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (27, '使用Actuator监控', 'Actuator可能大家非常熟悉，它是springboot提供对应用自身监控，以及对应用系统配置查看等功能。\n\n\nspringboot使用actuator的方式非常简单，只需要在项目中加入依赖spring-boot-starter-actuator，完整pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_actuator</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_actuator</name>\n	<description>springboot_actuator</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n其余没有任何修改，没有新建任何类，在配置文件中加入了几条属性，配置文件如下：\n```\n##端口号\nserver.port=8888\n\n\n##项目信息\ninfo.name=dalaoyang\ninfo.server.port=${server.port}\n```\n\n\n然后启动项目可以看到：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/1)\n\n介绍一下红框内的Actuator暴露的功能：\n\nHTTP方法 | 路径 | 描述 | 鉴权\n- | :-: | :-: | :-:\nGET	| /autoconfig |	查看自动配置的使用情况 |	true\nGET	|/configprops|	查看配置属性，包括默认配置|	true\nGET	|/beans	|查看bean及其关系列表|	true\nGET	|/dump	|打印线程栈|	true\nGET	|/env	|查看所有环境变量|	true\nGET	|/env/{name}|	查看具体变量值|	true\nGET	|/health|	查看应用健康指标|	false\nGET	|/info|	查看应用信息|	false\nGET	|/mappings|	查看所有url映射|	true\nGET	|/metrics|	查看应用基本指标|	true\nGET	|/metrics/{name}|	查看具体指标|	true\nPOST |	/shutdown|	关闭应用|	true\nGET	|/trace|	查看基本追踪信息|	true\n\n\n通过上面表格，我们可以在浏览器上访问http://localhost:8888/health可以看到如下图:\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/2)\n\n\n访问http://localhost:8888/info，可以看到\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/3)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-15', 612, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (28, 'linux6.8安装docker', 'Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\n本文介绍一下本人在阿里云服务器centos6.8安装docker的方法：\n\n使用root登录服务器，输入\n```\nyum install docker-io\n```\n\n\n安装完成之后启动docker，如下图即为启动成功\n```\nservice docker start\n```\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/1)\n\n\n查看docker状态\n```\nservice docker status\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/2)\n\n查看docker版本\n```\ndocker version\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/3)\n\n\nps:本人在第一次安装的时候遇到一个小插曲，执行下面命令，无法启动docker\n```\nyum install docker\n```\n\n然后我通过卸载docker在用上面安装的方法成功的。\n```\nyum remove docker\n```\n\n下图是我之前启动的提示\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/4)\n\n\n遇到相似的问题可以跟我的方法一样去解决，由于本人也是刚刚开始学习docker很多东西我也不是理解的很明白，有不对的地方可以及时指正我。', 'dalaoyang', '2018-04-16', 353, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (29, 'linux安装tomcat', '在linux上安装tomcat可以直接在linux服务器上通过wget方式直接下载tomcat，也可以把本地的tomcat上传到服务器。由于本人之前下载过tomcat，就直接从电脑上上传到服务器。\n\n本人使用的是mac 通过命令行 \n```\nscp /Users/dalaoyang/downloads/apache-tomcat-7.0.77.tar.gz root@47.98.***.***:/usr/local/tomcat//apache-tomcat-7.0.77.tar.gz\n```\n\n简单说一下   \nscp 上传  \n/Users/dalaoyang/downloads/apache-tomcat-7.0.77.tar.gz  本地文件路径\nroot 登录服务器用户  \n@47.98.***.*** 服务器地址  \n/root/Downloads/apache-tomcat-7.0.77.tar.gz 上传到服务器上的地址及名称\n\n\n接下来是要在linux服务器上操作的：\n\n创建一个tomcat目录，位置可以根据自己情况选择\n\n```\nmkdir /usr/local/tomcat\n```\n\n将上传的tomcat复制到上面目录\n```\ncp apache-tomcat-7.0.77.tar.gz /usr/local/tomcat/\n```\n\n进入tomcat目录\n```\ncd /usr/local/tomcat/\n```\n\n解压tomcat\n```\ntar -zxvf apache-tomcat-7.0.77.tar.gz\n```\n\n下面是启动tomcat：\n\n进入tomcat的bin目录\n```\ncd /usr/local/tomcat/apache-tomcat-7.0.77/bin/\n```\n\n启动tomcat\n```\n./startup.sh\n```\n\n关闭tomcat\n```\n./shutdown.sh\n```', 'dalaoyang', '2018-04-16', 394, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (30, 'linux安装jenkins', '首先先安装一个jdk，如果没有安装可以查看我的文章[linux安装jdk](https://juejin.im/post/5ac47dd5518825558c47a5d7)\n\n\n然后使用下面命令\n```\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nsudo yum install jenkins\n```\n\n\n启动jenkins\n```\nservice jenkins start\n```\n\n然后访问http://${ip}/8080，可以看到jenkins那个小老头，根据自行配置安装插件，其中密码在这里\n\n```\nvi /var/lib/jenkins/secrets/initialAdminPassword\n```\n', 'dalaoyang', '2018-04-16', 296, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (31, 'linux安装maven', 'maven之前本地就有，直接上传到了服务器上，我使用的是maven-3.5.3\r\n\r\n从本地上传maven\r\n\r\n```\r\nscp /Users/dalaoyang/downloads/apache-maven-3.5.3-bin.tar.gz root@47.98.***.***:/usr/local/maven/apache-maven-3.5.3-bin.tar.gz\r\n```\r\n\r\n\r\n到服务器上  \r\n\r\n解压maven\r\n```\r\ntar -zxvf apache-maven-3.5.3-bin.tar.gz\r\n```\r\n\r\n打开配置文件\r\n```\r\nvi /etc/profile\r\n```\r\n\r\n然后配置环境变量，在文件最后加入\r\n```\r\nexport M2_HOME=/usr/local/maven/apache-maven-3.5.3\r\nexport PATH=$PATH:$M2_HOME/bin\r\n```\r\n\r\n使配置生效\r\n```\r\nsource /etc/profile\r\n```\r\n\r\n验证结果\r\n```\r\nmvn -v\r\n```\r\n\r\n\r\n', 'dalaoyang', '2018-04-17', 376, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (32, 'SpringBoot整合Redis', '偷懒了几天，好几天没写springboot了。真的不是没什么可写，是因为坚持做一件事真的很难。  \n\n今天抽空弄了一个springboot整合redis的小例子。\n\n首先做好准备工作，在本地安装一个redis，具体步骤可以自行百度，然后启动redis。出现下图页面就启动成功了。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/1)\n\n\n然后新建项目，加入redis依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_redis</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_redis</name>\n	<description>springboot_redis</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-redis</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n然后在application.properties加入redis配置：\n```\n##端口号\nserver.port=8888\n\n# Redis数据库索引（默认为0）\nspring.redis.database=0 \n# Redis服务器地址\nspring.redis.host=localhost\n# Redis服务器连接端口\nspring.redis.port=6379 \n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n#连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8 \n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1 \n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8 \n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0 \n# 连接超时时间（毫秒）\nspring.redis.timeout=0\n\n```\n\nRedisConfig配置类，其中@EnableCaching开启注解\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/18\n */\n@Configuration\n@EnableCaching//开启缓存\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public CacheManager cacheManager(RedisTemplate<?,?> redisTemplate) {\n        CacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        return cacheManager;\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n\n由于只是简单整合，我只创建了一个RedisService来用来存取缓存数据，实际项目中可以根据需求创建interface，impl等等，代码如下：\n```\npackage com.dalaoyang.service;\nimport javax.annotation.Resource;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.service\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/18\n */\n@Service\npublic class RedisService {\n    @Resource\n    private RedisTemplate<String,Object> redisTemplate;\n\n    public void set(String key, Object value) {\n        //更改在redis里面查看key编码问题\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n    }\n\n    public Object get(String key) {\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n}\n```\n\n实体类City：\n```\npackage com.dalaoyang.entity;\n\nimport java.io.Serializable;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic class City implements Serializable {\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n测试类CityController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.service.RedisService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n    @Autowired\n    private RedisService redisService;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=1\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        redisService.set(cityId+\"\",city);\n        return \"success\";\n    }\n\n\n\n    //http://localhost:8888/getCityById?cityId=1\n    @GetMapping(value = \"getCityById\")\n    public City getCity(int cityId){\n        City city = (City) redisService.get(cityId+\"\");\n        return city;\n    }\n}\n```\n\n到这里配置基本上都完成了，然后启动项目访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=18\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/2)\n\n发现报错了，看了一下后台，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/3)\n\n发现是实体类没有序列化，然后给City类序列化，然后访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=18发现这次成功了。\n\n然后查看redis，发现key值的编码不对\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/4)\n\n在RedisService中加入\n```\n //更改在redis里面查看key编码问题\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n```\n在查看redis的key发现编码正确了\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/5)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-18', 1124, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (33, '使用Admin监控', '在springboot中，也提供了很全面的监控系统。这篇文章介绍一下springboot—admin监控springboot项目。\n\n\n原来大致是这样的，springboot——admin——server负责当监控中心，功能类似springcloud--eureka。其他springboot作为client把自身信息注册到admin--server中去。\n\n\n创建一个springboot-admin-server项目。pom文件中加入依赖，pom文件完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_admin_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_admin_server</name>\n    <description>springboot_admin_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-server</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-server-ui</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n在springboot启动类上加入注解@EnableAdminServer，代码如下：\n```\npackage com.dalaoyang;\n\nimport de.codecentric.boot.admin.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableAdminServer\npublic class SpringbootAdminServerApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootAdminServerApplication.class, args);\n	}\n}\n```\n\n\n到这里就配置完成了，启动项目访问http://localhost:8080/可以看到下图，目前还没有发现client\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/1)\n\n\n然后创建一个springboot-admin-client项目，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_admin_client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_admin_client</name>\n    <description>springboot_admin_client</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-client</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n然后只需配置一下服务注册到admin-server即可，配置如下：\n```\n##将服务注册到admin-server\nspring.boot.admin.url=http://localhost:8080\n\n##端口号\nserver.port=8388\n\n#禁用安全控制\nmanagement.security.enabled=false\n```\n\n启动项目，在访问http://localhost:8080/发现服务已经注册成功了，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/2)\n\n然后点击右侧的Details，可以看到更详细的监控信息\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/3)\n\nDetails:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/4)\nMetrices:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/5)\n\nEnviroment:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/6)\n\nLogging:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/7)\n\nJMX:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/8)\n\n\nThreads:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/9)\n\nAudit:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/10)\n\nTrace:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/11)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-19', 735, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (34, '负载均衡---ribbon', 'Ribbon:提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。\n\n\n上一篇简单讲解了eureka的使用，这一篇文章基于上一篇的基础上，讲一下springcloud的另一个重要的组件ribbon。\n\n这篇文章需要新建三个工程，service（8762），service（8763），service-ribbon（8764），三个服务分别向eureka-server注册中心注册，本文的服务使用的注册中心都是本人创建的测试eureka--[http://eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)。\n\n首先新建一个service（8762），括号内的8762是项目的端口号，加入eureka依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_service</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_service</name>\n    <description>springcloud_service</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件\n```\n##端口号\nserver.port=8762\n\n##服务名称\nspring.application.name=service\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类使用注解@EnableEurekaClient向注册中心注册，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@EnableEurekaClient\npublic class SpringcloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudServiceApplication.class, args);\n    }\n\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @Value(\"${spring.application.name}\")\n    String serviceName;\n\n    @GetMapping(\"/\")\n    public String index(){\n        return \"serviceName=\" + serviceName + \"-------port=\" + port;\n    }\n}\n```\n\n到这里service（8762）创建完成，然后复制一个项目，端口号改为8763作为service（8763）。\n\n然后新建项目service-ribbon（8764），pom文件加入ribbon依赖，pom完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_ribbon</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_ribbon</name>\n    <description>springcloud_ribbon</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-ribbon</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8764\n\n##服务名称\nspring.application.name=service_ribbon\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n由于只是一个简单demo，所有我将java代码都写在了启动类里面，解释一下，@LoadBalanced放在RestTemplate上面，表明RestTemplate开启负载均衡。代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\npublic class SpringcloudRibbonApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudRibbonApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${server.port}\")\n	String port;\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@GetMapping(\"/\")\n	public String index(){\n		return restTemplate().getForObject(\"http://service/\",String.class);\n	}\n}\n```\n\n分别启动service（8762），service（8763），service-ribbon（8764）三个工程。\n先查看http://eureka.dalaoyang.cn/,可以看到三个实例注册成功。如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/1)\n多次访问http://localhost:8764/，可以看到页面交替显示\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/2)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/3)\n可以看到负载均衡已经做到了。\n\n完整项目流程如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/4)', 'dalaoyang', '2018-04-19', 648, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (35, 'linux安装redis', '进入usr/local文件夹\n```\ncd usr/local\n```\n\n先创建一个redis文件夹\n```\nmkdir redis\n```\n\n下载redis\n```\nwget http://download.redis.io/releases/redis-4.0.9.tar.gz\n```\n\n解压缩 \n```\ntar xzf redis-4.0.9.tar.gz\n```\n\n进入redis文件夹\n```\ncd redis-4.0.9\n```\n\n编译\n```\nmake\n```\n\n进入到src文件夹\n\n```\ncd src\n```\n\n执行安装 \n```\nmake install\n```\n\n到这里就安装完成了\n\n然后输入命令，启动redis\n```\n./redis-server\n```\n\n在打开一个终端\n```\nredis-cli\n```\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/35/1)\n', 'dalaoyang', '2018-04-19', 338, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (36, '声明式调用---Feign', 'Feign:Feign是一种声明式、模板化的HTTP客户端。\n\n\n用我的理解来说，Feign的功能类似dubbo暴露服务，但是与dubbo稍有不同的是Feign是HTTP REST接口的形式暴露的。\n\n\n这一篇还是要利用到上一篇中的service（8762），service（8763）两个服务，先启动这两个服务。\n\n新建项目，service-feign（8765），pom加入feign依赖，完整pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_feign</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_feign</name>\n    <description>springcloud_feign</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-feign</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n在启动类加入@EnableFeignClients注解，如果没有加入basePackages制定扫描包得话，默认会去找项目会扫描到的所有@FeignClient。启动类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.feign.EnableFeignClients;\n\n\n@SpringBootApplication\n@EnableEurekaClient\n//@EnableFeignClients(basePackages = \"com.dalaoyang.interfaces\")\n@EnableFeignClients\npublic class SpringcloudFeignApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudFeignApplication.class, args);\n	}\n}\n\n```\n\n创建Feign暴露接口，接口上加入@FeignClient(value=\"service\",fallback = FeignFallbackService.class)\n注解。\nservice为要远程调用服务的名字，即你要调用服务的spring.application.name  \nfallback为远程调用失败后回调的方法。代码如下：\n```\npackage com.dalaoyang.interfaces;\n\nimport com.dalaoyang.back.FeignFallbackService;\nimport org.springframework.cloud.netflix.feign.FeignClient;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.interfaces\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/20\n */\n@FeignClient(value=\"service\",fallback = FeignFallbackService.class)\n//这里是要远程调用的服务的名称，即你要调用服务的spring.application.name\n//fallback是远程调用失败回调的方法\npublic interface FeignInterface {\n    @GetMapping(\"/\")\n    String IndexInfo();\n}\n```\n\n\n远程调用失败回调类FeignFallbackService，要实现对应的FeignClient实现对应的方法:\n```\npackage com.dalaoyang.back;\n\nimport com.dalaoyang.interfaces.FeignInterface;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.back\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/20\n */\n@Service\npublic class FeignFallbackService implements FeignInterface {\n    @Override\n    public String IndexInfo(){\n        return \"远程调用失败！\";\n    };\n}\n```\n\n最后看一下配置文件，需要注意的是feign.hystrix.enabled，如果配置远程调用回调的话需要声明一下Feign的 hystrix支持，不然页面还是会显示错误。\n```\n##端口号\nserver.port=8765\n\n##服务名称\nspring.application.name=service_feign\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n\n##声明Feign的 hystrix支持\nfeign.hystrix.enabled=true\n```\n\n\n启动service-feign（8765），先去看一眼http://eureka.dalaoyang.cn\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-87667680dca691ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到服务注册成功，然后访问http://localhost:8765/，可以看到页面和使用ribbon的时候一样交替显示。\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-faba991d2a5179ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-a694c9236e536594?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n控制台\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-38b1ed5c0efa0aca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们关闭service（8762），service（8763）两个服务，再次访问，可以看到\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-3f9670835711631c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-20', 693, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (37, '熔断器---Hystrix', 'Hystrix：熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。\n\n\n说到熔断器，先要引入另外一个词，雪崩效应。\n\n雪崩效应，百度百科的解释是这样的：    \n\n**登山时，决不能顺着山边扔石子儿。一是有击中别人的危险，一枚从数千英尺落下的小石头，破坏力相当惊人；二是有可能引发雪崩，一枚不起眼的小石子儿，顶多只能撞动几块差不多大小的石头；但只要有足够数量的石头翻滚起来，用不了多久，大块大块的岩石也会松动下滑。于是乎，这一颗小小的石子儿，就能引发一场雪崩。这个道理不言自明，好比就是水滴石穿、蝴蝶效应，说的都是一个小因素的变化，却往往有着无比强大的力量，以至于最后改变整体结构、产生意想不到的结果。现在，把这个原理适用于商业和技术领域，它同样能得到类似的效果—商业和技术本身具有一定的结构和体系，当人们适当地拆散其结构，并予以重新组合，便能释放出犹如雪崩般巨大的能量。雪崩把旧有的产业体系打得粉碎，甚至，有时候干脆让整个产业消失。在雪崩的巨大压力下，商业与技术之间固有的联系被彻底中断，不得不接受新的改造和整合，其最终将引爆一系列创新的革命，这就是“雪崩效应”。\n以上来自百度百科。**\n\n从上面可以看到，造成雪崩效应很可能就是因为一个特别小的原因，比如一个石子。然后让我们在看一下下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/1)\n\n图中每个字母代表了一个微服务，剪头代表服务的调用。  \n假设1：\n服务G由于某种原因瘫痪了，可以看出来影响的是服务M无法调用服务G，可能说某种意义上，影响的只是单服务，光看图可能没那么大影响。\n假设2：\n服务B瘫痪了，从图中能够发现上半区的所有服务都要瘫痪。\n假设3：\n最坏的可能，服务A瘫痪了，服务A的瘫痪导致B,C,D全部瘫痪，连锁反应造成所有服务都死了，造成整个系统的瘫痪。\n\n为了不让这样的事情发生，springcloud中提供了Hystrix熔断器，即在失败率达到阈值时（默认为5秒内20次失败），自动调用回调方法，使请求快速返回。\n\n举一个通俗的例子，大家都能遇到这样的情况，家里的用电量过高的时候，会出现“跳闸”，为什么出现跳闸，就是因为长期用电量过高，会出现超载，长期这样就会升温，引起火灾等不好的连锁反应。\n\n下面介绍一下ribbon整合断路器：\n\n新建一个项目springcloud_hystric_ribbon，项目在springboot_ribbon上做了简单的修改，pom文件中加入hystrix，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_hystric_ribbon</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_hystric_ribbon</name>\n	<description>springcloud_hystric_ribbon</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-ribbon</artifactId>\n		</dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-hystrix</artifactId>\n        </dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8764\n\n##服务名称\nspring.application.name=springcloud_hystric_ribbon\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类加入注解@EnableHystrix开启熔断器，然后在之前的方法上加上注解	@HystrixCommand(fallbackMethod = \"indexError\")，其中fallbackMethod是在调用失败时的回调方法。代码如下：\n```\npackage com.dalaoyang;\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.ribbon.proxy.annotation.Hystrix;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\n@EnableHystrix\npublic class SpringcloudHystricRibbonApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudHystricRibbonApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${server.port}\")\n	String port;\n\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@HystrixCommand(fallbackMethod = \"indexError\")\n	@GetMapping(\"/\")\n	public String index(){\n		return restTemplate().getForObject(\"http://service/\",String.class);\n	}\n\n\n	public String indexError(){\n		return \"调用服务失败!\";\n	}\n}\n```\n\n启动服务，访问http://localhost:8764/，可以看到响应如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/2)\n\n\n\n接下来说一下feign的熔断器使用，其实上一篇文章已经使用了断路器，这里就不具体介绍了，如果需要可以看我的上一篇文章--[《声明式调用---Feign》](https://www.dalaoyang.cn/article/36)\n\n\n然后我们在改造一下springcloud_hystric_ribbon项目，加入Hystrix Dashboard仪表盘，pom文件中加入依赖：\n```\n\n<dependency>\n	<groupId>org.springframework.boot</groupId>\n	<artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<dependency>\n	<groupId>org.springframework.cloud</groupId>\n	<artifactId>spring-cloud-starter-hystrix-dashboard</artifactI>\n</dependency>\n```\n\n启动类加入@EnableHystrixDashboard启动仪表盘。启动项目，访问http://localhost:8764/hystrix\n\n可以看到下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/3)\n\n\n上面填写http://localhost:8764/hystrix.stream，title随便填写一下即可，然后点击Monitor Stream，看到下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/4)\n\n这是发现一直在loading，不要着急，在打开一个窗口请求一下http://localhost:8764/，然后在看一下仪表盘，如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/5)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-21', 576, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (38, '路由网关---zuul', 'Zuul：Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。\n\n\n在微服务盛行的时代，客户端与系统之间的交互基本上如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/1)\n\n客户端想要请求到服务，首先请求到zuul网关，然后zuul网管将请求分发到对应的服务去。\n\n新建一个springcloud_zuul（8766），pom文件加入zuul依赖，pom文件完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_zuul</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_zuul</name>\n    <description>springcloud_zuul</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zuul</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n然后在启动类上添加@EnableZuulProxy启动zuul，完整代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@SpringBootApplication\n@EnableZuulProxy\npublic class SpringcloudZuulApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZuulApplication.class, args);\n	}\n\n}\n\n```\n\n在配置文件加入如下配置：\n```\n##端口号\nserver.port=8766\n\n##服务名称\nspring.application.name=service-zuul\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n\n##zuul路由转发 service-a转发到service_ribbon\nzuul.routes.service-a.path=/service-a/**\n\nzuul.routes.service-a.service-id=service_ribbon\n\n##zuul路由转发 service-b转发到service\nzuul.routes.service-b.path=/service-b/**\n\nzuul.routes.service-b.service-id=service\n\n```\n\n然后分别启动之前service（8762），service_ribbon（8764）和springcloud_zuul（8766）。\n\n先看一下[http://eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)，如下：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/2)\n\n然后在浏览器上分别访问http://localhost:8766/service-a，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/3)\n\nhttp://localhost:8766/service-b，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/4)\n\nzuul网关的简单配置到这里基本上完成了。\n\n\n然后介绍一个zuul的过滤器，新建一个过滤器的类RequestLogFilter，这个类需要继承ZuulFilter，需要实现几个方法。\n\n\nfilterType：这个方法返回过滤器的类型，pre（路由前执行），route（路由中执行），post（路由后执行），error（发生错误后执行）\n\nfilterOrder：返回一个int来指定过滤器的执行顺序\n\nshouldFilter：返回boolean值来决定过滤器是否执行，true执行，false不执行。\n\nrun：过滤器要执行的操作。\n\n本项目中过滤器代码如下：\n```\npackage com.dalaoyang.filter;\n\nimport com.netflix.zuul.ZuulFilter;\nimport com.netflix.zuul.context.RequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.http.HttpServletRequest;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.filter\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/22\n */\npublic class RequestLogFilter extends ZuulFilter {\n\n    Logger logger = LoggerFactory.getLogger(RequestLogFilter.class);\n\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext requestContext = RequestContext.getCurrentContext();\n        HttpServletRequest httpServletRequest = requestContext.getRequest();\n        logger.info(\"请求路径：\"+httpServletRequest.getRequestURL().toString());\n        return null;\n    }\n}\n```\n\n修改一下启动类：\n```\npackage com.dalaoyang;\n\nimport com.dalaoyang.filter.RequestLogFilter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\n@EnableZuulProxy\npublic class SpringcloudZuulApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZuulApplication.class, args);\n	}\n\n	@Bean\n	public RequestLogFilter requestLogFilter(){\n		return new RequestLogFilter();\n	}\n}\n\n```\n\n在重启项目，访问http://localhost:8766/service-a，然后看控制台可以看到如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/5)\n\n有时会出现这样的情况，比如本文的service实例down了，如下图这种情况\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/6)\n\n那么在访问，就会无法转发，其实zuul也提供了失败回调的方法。\n新建一个ServiceFallback类实现ZuulFallbackProvider接口，需要重写2个方法。\n\n其中getRoute方法中可以指定为哪个微服务回退，*为所有服务。\n\n代码如下：\n```\npackage com.dalaoyang.fallback;\n\nimport org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.stereotype.Component;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.fallback\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/22\n */\n@Component\npublic class ServiceFallback implements ZuulFallbackProvider {\n\n    @Override\n    public String getRoute() {\n        return \"*\";\n    }\n\n    @Override\n    public ClientHttpResponse fallbackResponse() {\n        return new ClientHttpResponse() {\n            @Override\n            public HttpStatus getStatusCode() throws IOException {\n                return HttpStatus.OK;\n            }\n\n            @Override\n            public int getRawStatusCode() throws IOException {\n                return this.getStatusCode().value();\n            }\n\n            @Override\n            public String getStatusText() throws IOException {\n                return this.getStatusCode().getReasonPhrase();\n            }\n\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public InputStream getBody() throws IOException {\n                return new ByteArrayInputStream(\"当前访问服务不可用！\".getBytes());\n            }\n\n            @Override\n            public HttpHeaders getHeaders() {\n                HttpHeaders httpHeaders = new HttpHeaders();\n                MediaType mediaType = new MediaType(\"application\", \"json\",\n                        Charset.forName(\"UTF-8\"));\n                httpHeaders.setContentType(mediaType);\n                return httpHeaders;\n            }\n        };\n    }\n}\n```\n\n重启项目，访问http://localhost:8766/service-a如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/7)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-22', 582, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (39, '分布式配置', '分布式配置：配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。\n\n\n在生产环境，由于配置繁多，造成运维人员或开发人员配置上的不便，springcloud提供了分布式配置中心组建，支持从远程配置仓库（git）中读取配置。\n\n读取配置流程如下图：\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-b7b40102e5561be3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nconfig-server从git中读取远程配置，config-client在从config-server中读取配置。\n\n\n新建项目config-server，pom文件中加入config-server依赖，完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_config_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_config_server</name>\n    <description>springcloud_config_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n启动类加入@EnableConfigServer注解，表明这是一个config-server并开启配置服务器功能。代码如下:\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n@SpringBootApplication\n@EnableConfigServer\npublic class SpringcloudConfigServerApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigServerApplication.class, args);\n	}\n}\n```\n\napplication.properties配置如下：\n```\n##端口号\nserver.port=9000\n\n##服务名称\nspring.application.name=config_server\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n##远程仓库配置\n\n##git仓库地址\nspring.cloud.config.server.git.uri=https://gitee.com/dalaoyang/SpringCloudConfig.git\n\n##git仓库配置路径\nspring.cloud.config.server.git.searchPaths=config\n\n##git仓库分支\nspring.cloud.config.label=master\n\n##如果为公开仓库，用户名密码可不填\n##git仓库用户名\n##spring.cloud.config.server.git.username=\n\n##git仓库密码\n##spring.cloud.config.server.git.password=\n```\n\nconfig-server到这里构建完成，然后新建一个config-client服务。pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_config_client</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_config_client</name>\n	<description>springcloud_config_client</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n\n```\n\n\n然后新建一个配置文件，这里需要说明一下，config-client默认会去找8888端口的配置中心，如果配置中心使用8888端口，config-client可以使用application.properties配置文件。如果配置中心没有使用8888端口，那么config-client要使用bootstrap.properties，原因是bootstrap.* 命名的文件会被优先读取和配置。由于这个例子的项目使用端口为9000，所以新建一个bootstrap.properties，代码如下：\n```\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n然后做一个测试类，修改一下application，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudConfigClientApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigClientApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n\n}\n```\n\n到这里就全部构建完成了，依次启动config-server和config-client。\n\n先访问一下[http://eureka.dalaoyang.cn/](http://eureka.dalaoyang.cn/)\n![image](http://upload-images.jianshu.io/upload_images/9953332-1b97b85abe9283be?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到服务构建成功，然后访问http://localhost:8080/getTitle，可以看到：\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-861ea849971fc387?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-23', 581, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (40, '消息总线', 'SpringCloudBus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。\n\n在上一篇写出了springcloud对微服务的集中配置，那么就出现了一个问题，如果修改配置了怎么实现不需重启服务来实现配置的更新，下面有集中解决方法。\n\n1.使用/refresh手动刷新配置\n\n缺点：单点刷新，如果集群服务多的话，无论是工作量还是维护上都十分麻烦。\n\n使用上一篇的config-client服务，加入依赖，\n```\nspring-boot-starter-actuator\n```\npom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_config_client</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_config_client</name>\n	<description>springcloud_config_client</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n在Controller类上加入@RefreshScope注解，由于上一篇controller写在了启动类上，所以直接加在启动类上，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@RefreshScope\npublic class SpringcloudConfigClientApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigClientApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n\n}\n```\n\n配置文件新增配置management.security.enabled=false，在刷新时关闭安全验证。\n\n代码如下：\n```\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n## 刷新时，关闭安全验证\nmanagement.security.enabled=false\n```\n\n分别启动项目config-server，config-client。访问http://localhost:8080/getTitle，结果如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/1)\n\n修改git上配置，修改为dalaoyang_test_change，在次请求，结果没有改变，使用postman或者其他工具post请求http://localhost:8080/getTitle看到返回如下结果。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/2)\n\n在次访问http://localhost:8080/getTitle，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/3)\n\n\n2.使用springcloudbus刷新配置\n\nspringcloudbus需要使用轻量消息代理，本文使用rabbitmq，启动rabbitmq如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/4)\n\n访问http://localhost:15672/#/如下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/5)\n\n新建项目springcloud_bus，同时改造config-client，pom文件加入bus依赖，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_bus</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_bus</name>\n	<description>springcloud_bus</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-bus-amqp</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n加入rabbitmq配置，配置文件如下：\n```\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n\n##端口号\nserver.port=8881\n\n## 刷新时，关闭安全验证\nmanagement.security.enabled=false\n\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类加入注解@RefreshScope，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@RefreshScope\npublic class SpringcloudBusApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudBusApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n}\n```\n\nconfig-client加入同样依赖和配置，重启config-client，启动springcloud_bus，先去[http://eureka.dalaoyang.cn/](http://eureka.dalaoyang.cn/)，可以看到\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/6)\n\n先将git上配置改回dalaoyang_test，分别请求http://localhost:8881/getTitle和http://localhost:8080/getTitle结果如下：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/7)\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/8)\n\n然后用postman使用post请求访问http://localhost:8881/bus/refresh\n\n再次分别请求http://localhost:8881/getTitle和http://localhost:8080/getTitle结果如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/9)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/10)\n\n从图中可以看出刷新配置成功。\n\n3.局部刷新配置，配置与第2种方法一样，只是在使用postman刷新时略加改变，在本文中使用http://localhost:8881/bus/refresh?destination=config-client:8881可以刷新服务名为config-client端口为8881的服务，如果想要刷新服务名为config-client的所有服务可以写成http://localhost:8881/bus/refresh?destination=config-client:**\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n', 'dalaoyang', '2018-04-24', 682, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (41, 'SpringBoot整合RabbitMQ', 'RabbitMQ是开源消息队列系统，用erlang语言开发。如果不了解可以查看官网[http://www.rabbitmq.com/](http://www.rabbitmq.com/)\n\n这篇文章介绍一个springboot简单整合RabbitMQ。\n\n1.安装rabbitmq，自行百度即可，方法很多。\n\n2.启动rabbitmq，成功如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/1)\n\n可以访问[http://localhost:15672/](http://localhost:15672/)查看管理页面\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/2)\n\n新建项目，pom文件加入依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_rabbitmq</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_rabbitmq</name>\n	<description>springboot_rabbitmq</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-amqp</artifactId>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n新建一个消息发送者Sender，使用AmqpTemplate将消息发送到消息队列message中去。代码如下：\n```\npackage com.dalaoyang.sender;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.send\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@Component\npublic class Sender {\n    Logger logger = Logger.getLogger(Sender.class);\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public String send(){\n        String context = \"简单消息发送\";\n        logger.info(\"简单消息发送时间：\"+new Date());\n        amqpTemplate.convertAndSend(\"message\", context);\n        return \"发送成功\";\n    }\n}\n```\n\n创建消息接收者Receiver，使用注解@RabbitListener(queues = \"message\")来监听message的消息队列@RabbitHandler来实现具体消费。\n\n```\npackage com.dalaoyang.receiver;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.receiver\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@Component\n@RabbitListener(queues = \"message\")\npublic class Receiver {\n    Logger logger = Logger.getLogger(Receiver.class);\n\n    @RabbitHandler\n    public void process(String Str) {\n        logger.info(\"接收消息：\"+Str);\n        logger.info(\"接收消息时间：\"+new Date());\n    }\n}\n```\n\n\n然后看一下配置信息，因为是简单整合，所以只配置了端口和rabbitmq的信息，如下：\n```\n##端口号\nserver.port=8888\n\n##rabbitmq\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n```\n\n创建一个controller，这里仅用来测试，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.sender.Sender;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@RestController\npublic class TestController {\n\n    @Autowired\n    private Sender sender;\n\n    @GetMapping(\"hello\")\n    public String helloTest(){\n        sender.send();\n        return \"success\";\n    }\n\n}\n```\n\n启动项目，访问[http://localhost:8888/hello](http://localhost:8888/hello)然后观看控制台可以看到消息已经发送成功。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/3)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-25', 785, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (42, '服务链路追踪---Sleuth', 'Sleuth：日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。\n\n\n当服务与服务之间调用复杂时，SpringCloud Sleuth配合Zipkin提供的界面，可以直观的分析追踪数据，这篇文章介绍SpringCloud Sleuth与Zipkin配合使用。\n\n新建Zipkin Server，加入zipkin依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_zipkin</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_zipkin</name>\n	<description>springcloud_zipkin</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>io.zipkin.java</groupId>\n			<artifactId>zipkin-server</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>io.zipkin.java</groupId>\n			<artifactId>zipkin-autoconfigure-ui</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件只配置了一个端口号：\n```\n##端口号\nserver.port=9000\n```\n\n启动类加入注解@EnableZipkinServer，来声明是一个ZipkinServer，启动项目，可以看到控制的log已经变化了，如图\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-54a36a74c760ab97?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n然后在浏览器访问[http://localhost:9000/zipkin/dependency/](http://localhost:9000/zipkin/dependency/)，如下图\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-17e4555d6c7d52d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n为了方便我们观察，分别创建了两个项目，first_service（9001），second_service（9002），pom文件加入spring-cloud-starter-zipkin依赖，\nfirst_service（9001）pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_zipkin_firstservice</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_zipkin_firstservice</name>\n	<description>springcloud_zipkin_firstservice</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-zipkin</artifactId>\n			<version>1.3.1.RELEASE</version>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件，其中spring.zipkin.base-url指定zipkin server地址\n```\nserver.port=9001\nspring.zipkin.base-url=http://localhost:9000\nspring.application.name=first_service\n```\n\n启动类加上@RestController注解方便测试，然后新建两个方法，一个用于被调用，一个调用其他，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudZipkinFirstserviceApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZipkinFirstserviceApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@RequestMapping(\"/callSecond\")\n	public String callSecond(){\n		return restTemplate().getForObject(\"http://localhost:9002/second\", String.class);\n	}\n\n\n	@RequestMapping(\"/first\")\n	public String first(){\n		return serviceName;\n\n	}\n}\n```\n\n到这里first_service（9001）代码展示完成，接下来是second_service（9002）代码，内容不在赘述，和first_service（9001）类似。\n\npom文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_zipkin_secondservice</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_zipkin_secondservice</name>\n    <description>springcloud_zipkin_secondservice</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n            <version>1.3.1.RELEASE</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n配置文件：\n```\nserver.port=9002\nspring.zipkin.base-url=http://localhost:9000\nspring.application.name=second_service\n```\n\n启动类：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudZipkinSecondserviceApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZipkinSecondserviceApplication.class, args);\n	}\n\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@RequestMapping(\"/second\")\n	public String second(){\n		return serviceName;\n	}\n\n	@RequestMapping(\"/callFirst\")\n	public String callFirst(){\n		return restTemplate().getForObject(\"http://localhost:9001/first\",String.class);\n	}\n}\n\n```\n\n启动这两个项目，浏览器访问[http://localhost:9001/callSecond](http://localhost:9001/callSecond)，然后观看Zipkin Server页面，可以看到调用关系，请求细节等，如下图：\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-6ce3a4e59bf5ab21?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-52a1b88202106b1a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-4e6ee8bdbb1d3b36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-2781280af5dc6a08?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n', 'dalaoyang', '2018-04-26', 575, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (43, 'SpringBoot拦截器', '在实际开发中，总存在着这样的场景，比如拦截请求的ip地址，或者在所有的请求都返回相同的数据，如果每一个方法都写出相同数据固然可以实现，但是随着项目的变大，重复的代码会越来越多，所以在这种情况我们可以用拦截器来实现。\n\n\n最近一直在研究thymeleaf，越发的感觉这个很好用，所以这篇文章也选择结合这个来使用。\n\n新建项目，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_interceptor</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_interceptor</name>\n    <description>springboot_interceptor</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.sourceforge.nekohtml</groupId>\n            <artifactId>nekohtml</artifactId>\n            <version>1.9.15</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n新建一个拦截器CommonInterceptor，继承HandlerInterceptorAdapter。给大家说一下，在继承HandlerInterceptorAdapter有三个拦截器是经常使用的：\n1.preHandle在业务处理器处理请求之前被调用  \n2.postHandle在业务处理器处理请求执行完成后,生成视图之前执行\n3.afterCompletion在DispatcherServlet完全处理完请求后被调用\n\n本文使用的是postHandle，代码如下：\n```\npackage com.dalaoyang.interceptor;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.stereotype.Component;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.interceptor\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/27\n */\n@Component\npublic class CommonInterceptor extends HandlerInterceptorAdapter {\n    Logger logger = Logger.getLogger(CommonInterceptor.class);\n\n\n\n    //preHandle在业务处理器处理请求之前被调用，\n    //postHandle在业务处理器处理请求执行完成后,生成视图之前执行\n    //afterCompletion在DispatcherServlet完全处理完请求后被调用\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n                           ModelAndView modelAndView) throws Exception {\n        logger.info(\"请求ip：\"+request.getRemoteAddr());\n        logger.info(\"请求的方法：\"+request.getMethod());\n        ModelMap modelMap = modelAndView.getModelMap();\n        modelMap.addAttribute(\"title\",\"dalaoyang\");\n    }\n}\n```\n\n在启动类继承WebMvcConfigurerAdapter来为项目添加拦截器，代码如下：\n```\npackage com.dalaoyang;\n\nimport com.dalaoyang.interceptor.CommonInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n@SpringBootApplication\npublic class SpringbootInterceptorApplication extends WebMvcConfigurerAdapter {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootInterceptorApplication.class, args);\n    }\n\n    @Autowired\n    CommonInterceptor commonInterceptor;\n\n    // 增加拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(commonInterceptor);\n    }\n}\n```\n\nIndexController负责跳转，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/27\n */\n\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index(Model model){\n        model.addAttribute(\"content\",\"hi , dalaoyang !\");\n        return \"index\";\n    }\n}\n```\n\n在templates下新建index.html，其中content是controller返回的内容，title是在拦截器中返回的内容，代码如下：\n```\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n\n<!DOCTYPE html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title th:text=\"${title}\"></title>\n</head>\n<body>\n<p th:text=\"${content}\"></p>\n</body>\n</html>\n```\n\n\n启动项目，访问[http://localhost:8888/](http://localhost:8888/)，控制台如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/43/1)\n\n在看一下页面：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/43/2)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-27', 1047, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (45, 'SpringBoot统一处理异常', '在springboot项目，报错有着默认的提示，这篇文章介绍一下如何统一处理异常。\r\n\r\n新建项目，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_error</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_error</name>\r\n    <description>springboot_error</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n创建一个IndexController，里面写两个方法，index方法正常跳转，test方法是故意写的一个nullpoint的错误的方法。 代码如下：\r\n```\r\npackage com.dalaoyang.Controller;\r\n\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.Controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@RestController\r\npublic class IndexController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/test\")\r\n    public String test(){\r\n        Map map = null;\r\n        return map.toString();\r\n    }\r\n}\r\n```\r\n\r\n启动项目访问[http://localhost:8080/](http://localhost:8080/)，如下图，没有任何问题\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/1)\r\n\r\n\r\n然后随便访问一个项目里没有的地址，比如[http://localhost:8080/aaa](http://localhost:8080/aaa)，如下图所示，404没有找到：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/2)\r\n\r\n访问[http://localhost:8080/test](http://localhost:8080/test)，如下图500错误：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/3)\r\n\r\n\r\n从图上可以看到，springboot报错的时候都在找/error这个地址，这时我们新建一个CommonErrorController来统一处理异常，这个类实现了ErrorController，代码如下：\r\n```\r\npackage com.dalaoyang.Controller;\r\n\r\nimport org.springframework.boot.autoconfigure.web.ErrorController;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.Controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@RestController\r\npublic class CommonErrorController implements ErrorController {\r\n\r\n    private final String ERROR_PATH = \"/error\";\r\n\r\n\r\n    @Override\r\n    public String getErrorPath() {\r\n        return ERROR_PATH;\r\n    }\r\n\r\n    @RequestMapping(value = ERROR_PATH)\r\n    public String handleError(){\r\n        System.out.println(getErrorPath());\r\n        return \"error\";\r\n    }\r\n}\r\n```\r\n\r\n重启项目，在访问http://localhost:8080/aaa和http://localhost:8080/test就都返回\"error\"字符串了，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/4)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-28', 1135, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (46, '使用SpringSecurity', '前几天写了一个SpringBoot对拦截器的使用，在实际项目中，对一些情况需要做一些安全验证，比如在没有登录的情况下访问特定的页面应该解释的拦截处理。这一篇介绍使用SpringSecurity来做简单的安全控制，由于SpringSecurity比较复杂，如果有不对的地方可以大家一起学习。\r\n\r\n新建项目，前端页面使用thymeleaf，加入security依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_security</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_security</name>\r\n    <description>springboot_security</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-security</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.sourceforge.nekohtml</groupId>\r\n            <artifactId>nekohtml</artifactId>\r\n            <version>1.9.15</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n\r\n配置文件本文就是将之前整合thymeleaf的配置拿了过来，代码如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n\r\n#设定thymeleaf文件路径 默认为src/main/resources/templates\r\nspring.freemarker.template-loader-path=classpath:/templates\r\n#设定静态文件路径，js,css等\r\nspring.mvc.static-path-pattern=/static/**\r\n# 是否开启模板缓存，默认true\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n# 模板编码\r\nspring.freemarker.charset=UTF-8\r\n```\r\n\r\n接下来是这篇文章重要的地方，新建一个SecurityConfig类，继承WebSecurityConfigurerAdapter类，重写configure(HttpSecurity httpSecurity)方法，其中/css/**和/index的资源不需要验证，直接可以请求，/user/**的资源需要验证，权限是USER，/admin/**的资源需要验证，权限是ADMIN，登录地址是/login，登录失败地址是/login_error，异常重定向到 /401，注销跳转到/logout。\r\n注入AuthenticationManagerBuilder，在内存中创建一个用户dalaoyang，密码123的用户，权限是USER，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    // /css/**和/index的资源不需要验证，直接可以请求\r\n    // /user/**的资源需要验证，权限是USER /admin/**的资源需要验证，权限是ADMIN\r\n    // 登录地址是/login 登录失败地址是 /login_error\r\n    // 异常重定向到 /401\r\n    // 注销跳转到 /logout\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception{\r\n        httpSecurity\r\n                .authorizeRequests()\r\n                .antMatchers(\"/css/**\",\"/index\").permitAll()\r\n                .antMatchers(\"/user/**\").hasRole(\"USER\")\r\n                .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\r\n                .and()\r\n                .formLogin().loginPage(\"/login\").failureUrl(\"/login_error\")\r\n                .and()\r\n                .exceptionHandling().accessDeniedPage(\"/401\");\r\n\r\n        httpSecurity.logout().logoutSuccessUrl(\"/logout\");\r\n    }\r\n\r\n\r\n    //内存中创建用户，用户名为dalaoyang，密码123，权限是USER\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth\r\n                .inMemoryAuthentication()\r\n                .withUser(\"dalaoyang\").password(\"123\").roles(\"USER\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n创建一个TestController负责跳转，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/index\")\r\n    public String index2(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/user\")\r\n    public String user(){\r\n        return \"user/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/admin\")\r\n    public String admin(){\r\n        return \"admin/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/login\")\r\n    public String login(){\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/login_error\")\r\n    public String login_error(Model model){\r\n        model.addAttribute(\"login_error\", \"用户名或密码错误\");\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/logout\")\r\n    public String logout(Model model){\r\n        model.addAttribute(\"login_error\", \"注销成功\");\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/401\")\r\n    public String error(){\r\n        return \"401\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n创建一个user/index.html，用于校验USER权限，没有登录的话不能直接访问，代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>user/index</title>\r\n</head>\r\n<body>\r\nuser/index\r\n\r\n<form th:action=\"@{/logout}\" method=\"post\">\r\n    <input type=\"submit\" value=\"注销\"/>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\n创建一个admin/index.html，只允许ADMIN权限访问，代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>admin</title>\r\n</head>\r\n<body>\r\nadmin/index\r\n</body>\r\n</html>\r\n```\r\n\r\n401页面，用于没有权限跳转：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>401</title>\r\n</head>\r\n<body>\r\n401\r\n</body>\r\n</html>\r\n```\r\n\r\nindex页面，任何权限都能访问\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>index</title>\r\n</head>\r\n<body>\r\nindex\r\n</body>\r\n</html>\r\n```\r\n\r\nlogin页面，用于登录\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>login</title>\r\n</head>\r\n<body>\r\n<h1>login</h1>\r\n<form th:action=\"@{/login}\" method=\"post\">\r\n    <span th:text=\"${login_error}\"></span>\r\n<br/>\r\n    <input type=\"text\" name=\"username\">用户名<br/>\r\n<input type=\"password\" name=\"password\">密码<br/>\r\n    <input type=\"submit\" value=\"登录\">\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\n到这里就全部创建完成了，启动项目，访问[http://localhost:8888/](http://localhost:8888/)，如图，可以直接访问。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/1)\r\n\r\n\r\n访问[http://localhost:8888/user](http://localhost:8888/user)被拦截到http://localhost:8888/login，如图\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/2)\r\n\r\n\r\n先输入错误的密码，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/3)\r\n\r\n\r\n然后输入用户名dalaoyang密码123，点击登录结果如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/4)\r\n\r\n访问[http://localhost:8888/admin](http://localhost:8888/admin)，如图，没有权限\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/5)\r\n\r\n我们在回到http://localhost:8888/user点击注销，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/6)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-29', 767, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (47, 'SpringBoot启动banner更改', '这篇文章的开始先给大家看一个图片\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/1)\r\n\r\n用过或者看过springboot的人都知道，这就是springboot启动的banner，这一篇介绍如何自定义springboot的启动bannner。\r\n\r\n先介绍一个可以制作自定义banner的网站，传送门：[http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20](http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/2)\r\n\r\n黄框内输入自定义文字，红框内填写字体，本文使用banner\r\n```\r\n    ___        _        _           _        ____    _  _      _        _  _      ___\r\n   F __\".     /.\\      FJ          /.\\      F __ ]  FJ  LJ    /.\\      F L L]   ,\"___\". \r\n  J |--\\ L   //_\\\\    J |         //_\\\\    J |--| L J \\/ F   //_\\\\    J   \\| L  FJ---L] \r\n  | |  J |  / ___ \\   | |        / ___ \\   | |  | | J\\  /L  / ___ \\   | |\\   | J |  [\"\"L\r\n  F L__J | / L___J \\  F L_____  / L___J \\  F L__J J  F  J  / L___J \\  F L\\\\  J | \\___] |\r\n J______/FJ__L   J__LJ________LJ__L   J__LJ\\______/F|____|J__L   J__LJ__L \\\\__LJ\\_____/F\r\n |______F |__L   J__||________||__L   J__| J______F |____||__L   J__||__L  J__| J_____F \r\n```                                                      \r\n\r\n新建banner.txt放入resources下，启动可以看到\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/3)\r\n\r\n另外spring提供了几种类型来设定banner：\r\n1.${AnsiColor.BRIGHT_CYAN}来设定banner字体，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/4)\r\n\r\n2.${AnsiBackground.BRIGHT_CYAN}来设定banner背景颜色，（本次demo样板较丑，勿喷），如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/5)\r\n\r\n3.${AnsiStyle.UNDERLINE}设定字体样式\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/6)\r\n\r\n\r\n还提供了几种与版本相关的，这里就简单举例说明2个，\r\n\r\n1.在配置文件中加入配置，如下：\r\n```\r\napplication.version=dalaoyang_v1\r\n```\r\n\r\n在banner中加入${application.version}使用，启动如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/7)\r\n\r\n配置文件加入\r\n```\r\nspring.application.name=dalaoyang\r\n```\r\n\r\nbanner中加入${spring.application.name}，如图\r\n\r\n2.使用springboot的版本\r\n\r\n在banner中加入${spring-boot.version}，启动如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/8)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-04-30', 1618, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (48, 'SpringBoot使用validator校验', '在前台表单验证的时候，通常会校验一些数据的可行性，比如是否为空，长度，身份证，邮箱等等，那么这样是否是安全的呢，答案是否定的。因为也可以通过模拟前台请求等工具来直接提交到后台，比如postman这样的工具，那么遇到这样的问题怎么办呢，我们可以在后台也做相应的校验。\r\n\r\n\r\n新建项目，因为本文会使用postman模拟前端请求，所以本文需要加入web依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_validator</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_validator</name>\r\n	<description>springboot_validator</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n创建一个demo类，说一下本文使用demo中校验使用的注解：  \r\n@NotEmpty：非空  \r\n@Length：长度，最长或者最短  \r\n@Email：校验email  \r\n@Pattern：使用正则校验，本文使用的是身份证的正则  \r\n，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.Email;\r\nimport org.hibernate.validator.constraints.Length;\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.validation.constraints.Pattern;\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/1\r\n */\r\npublic class Demo implements Serializable {\r\n\r\n    @NotEmpty(message=\"用户名不能为空\")\r\n    @Length(min=6,max = 12,message=\"用户名长度必须位于6到12之间\")\r\n    private String userName;\r\n\r\n\r\n    @NotEmpty(message=\"密码不能为空\")\r\n    @Length(min=6,message=\"密码长度不能小于6位\")\r\n    private String passWord;\r\n\r\n    @Email(message=\"请输入正确的邮箱\")\r\n    private String email;\r\n\r\n    @Pattern(regexp = \"^(\\\\d{18,18}|\\\\d{15,15}|(\\\\d{17,17}[x|X]))$\", message = \"身份证格式错误\")\r\n    private String idCard;\r\n\r\n    public String getUserName() {\r\n        return userName;\r\n    }\r\n\r\n    public void setUserName(String userName) {\r\n        this.userName = userName;\r\n    }\r\n\r\n    public String getPassWord() {\r\n        return passWord;\r\n    }\r\n\r\n    public void setPassWord(String passWord) {\r\n        this.passWord = passWord;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public String getIdCard() {\r\n        return idCard;\r\n    }\r\n\r\n    public void setIdCard(String idCard) {\r\n        this.idCard = idCard;\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n创建一个TestDemoController，来测试本文的校验，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.Demo;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.validation.Valid;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/1\r\n */\r\n@RestController\r\npublic class TestDemoController {\r\n\r\n    @PostMapping(\"/\")\r\n    public String testDemo(@Valid Demo demo,BindingResult bindingResult){\r\n        StringBuffer stringBuffer = new StringBuffer();\r\n        if(bindingResult.hasErrors()){\r\n            List<ObjectError> list =bindingResult.getAllErrors();\r\n            for (ObjectError objectError:list) {\r\n                stringBuffer.append(objectError.getDefaultMessage());\r\n                stringBuffer.append(\"---\");\r\n            }\r\n        }\r\n        return stringBuffer!=null?stringBuffer.toString():\"\";\r\n    }\r\n}\r\n```\r\n\r\n启动项目使用postman分别做了三次请求，第一次所有属性都是随便填写的，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/1)\r\n\r\n第二次输入正确的身份证和邮箱，用户名和密码为空，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/2)\r\n\r\n第三次全部输入正确，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/3)\r\n\r\n\r\n本文只是使用的简单的几种校验，Hibernate-validator还有很多种校验的方法，大家可以参考这篇文章[https://blog.csdn.net/xgblog/article/details/52548659](https://blog.csdn.net/xgblog/article/details/52548659)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-01', 1885, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (49, '使用shiro安全管理', '之前介绍了springboot使用security进行权限管理，这篇文件介绍一下springboot使用shiro进行安全管理。\r\n\r\n\r\n简述本文的场景，本文使用springboot1.5.9+mysql+jpa+thymeleaf+shiro制作一个简单的验证，其中有2个角色，分别是admin和user，admin可以使用select和delete功能，user只能使用select功能。\r\n\r\n新建项目，加入shiro依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_shiro</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_shiro</name>\r\n    <description>springboot_shiro</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.sourceforge.nekohtml</groupId>\r\n            <artifactId>nekohtml</artifactId>\r\n            <version>1.9.15</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.shiro</groupId>\r\n            <artifactId>shiro-spring</artifactId>\r\n            <version>1.4.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n\r\n##数据库配置\r\n##数据库地址\r\nspring.datasource.url=jdbc:mysql://localhost:3306/shiro?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=root\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n##validate  加载hibernate时，验证创建数据库表结构\r\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\r\n##create-drop        加载hibernate时创建，退出是删除表结构\r\n##update                 加载hibernate自动更新数据库结构\r\n##validate 启动时验证表的结构，不会创建表\r\n##none  启动时不做任何操作\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\n##控制台打印sql\r\nspring.jpa.show-sql=true\r\n\r\n\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n```\r\n\r\n创建了三个实体类，分别是\r\nSysUser（用户表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysUser implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer userId;\r\n    @NotEmpty\r\n    private String userName;\r\n    @NotEmpty\r\n    private String passWord;\r\n\r\n    //多对多关系\r\n    @ManyToMany(fetch= FetchType.EAGER)\r\n    //急加载，加载一个实体时，定义急加载的属性会立即从数据库中加载\r\n    //FetchType.LAZY：懒加载，加载一个实体时，定义懒加载的属性不会马上从数据库中加载\r\n    @JoinTable(name = \"SysUserRole\", joinColumns = { @JoinColumn(name = \"userId\") },\r\n            inverseJoinColumns ={@JoinColumn(name = \"roleId\") })\r\n    private List<SysRole> roleList;// 一个用户具有多个角色\r\n\r\n\r\n    public Integer getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(Integer userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getUserName() {\r\n        return userName;\r\n    }\r\n\r\n    public void setUserName(String userName) {\r\n        this.userName = userName;\r\n    }\r\n\r\n    public String getPassWord() {\r\n        return passWord;\r\n    }\r\n\r\n    public void setPassWord(String passWord) {\r\n        this.passWord = passWord;\r\n    }\r\n\r\n    public List<SysRole> getRoleList() {\r\n        return roleList;\r\n    }\r\n\r\n    public void setRoleList(List<SysRole> roleList) {\r\n        this.roleList = roleList;\r\n    }\r\n}\r\n```\r\nSysRole（角色表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysRole implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer roleId;\r\n    private String roleName;\r\n\r\n    //多对多关系\r\n    @ManyToMany(fetch= FetchType.EAGER)\r\n    @JoinTable(name=\"SysRoleMenu\",joinColumns={@JoinColumn(name=\"roleId\")},inverseJoinColumns={@JoinColumn(name=\"menuId\")})\r\n    private List<SysMenu> menuList;\r\n\r\n    //多对多关系\r\n    @ManyToMany\r\n    @JoinTable(name=\"SysUserRole\",joinColumns={@JoinColumn(name=\"roleId\")},inverseJoinColumns={@JoinColumn(name=\"userId\")})\r\n    private List<SysUser> userList;// 一个角色对应多个用户\r\n\r\n    public Integer getRoleId() {\r\n        return roleId;\r\n    }\r\n\r\n    public void setRoleId(Integer roleId) {\r\n        this.roleId = roleId;\r\n    }\r\n\r\n    public String getRoleName() {\r\n        return roleName;\r\n    }\r\n\r\n    public void setRoleName(String roleName) {\r\n        this.roleName = roleName;\r\n    }\r\n\r\n    public List<SysMenu> getMenuList() {\r\n        return menuList;\r\n    }\r\n\r\n    public void setMenuList(List<SysMenu> menuList) {\r\n        this.menuList = menuList;\r\n    }\r\n\r\n    public List<SysUser> getUserList() {\r\n        return userList;\r\n    }\r\n\r\n    public void setUserList(List<SysUser> userList) {\r\n        this.userList = userList;\r\n    }\r\n}\r\n\r\n```\r\nSysMenu（菜单表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysMenu implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer menuId;\r\n    private String menuName;\r\n\r\n    @ManyToMany\r\n    @JoinTable(name=\"SysRoleMenu\",joinColumns={@JoinColumn(name=\"menuId\")},inverseJoinColumns={@JoinColumn(name=\"roleId\")})\r\n    private List<SysRole> roleList;\r\n\r\n    public Integer getMenuId() {\r\n        return menuId;\r\n    }\r\n\r\n    public void setMenuId(Integer menuId) {\r\n        this.menuId = menuId;\r\n    }\r\n\r\n    public String getMenuName() {\r\n        return menuName;\r\n    }\r\n\r\n    public void setMenuName(String menuName) {\r\n        this.menuName = menuName;\r\n    }\r\n\r\n    public List<SysRole> getRoleList() {\r\n        return roleList;\r\n    }\r\n\r\n    public void setRoleList(List<SysRole> roleList) {\r\n        this.roleList = roleList;\r\n    }\r\n}\r\n```\r\n\r\n\r\n创建一个UserRepository用于查询用户信息：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.SysUser;\r\nimport org.springframework.data.repository.CrudRepository;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\npublic interface UserRepository extends CrudRepository<SysUser,Long> {\r\n\r\n    SysUser findByUserName(String username);\r\n}\r\n```\r\n\r\n创建几个前台页面进行测试，分别是：\r\nlogin.html:\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Login</title>\r\n</head>\r\n<body>\r\n错误信息：<h4 th:text=\"${msg}\"></h4>\r\n<form action=\"\" method=\"post\">\r\n    <p>账号：<input type=\"text\" name=\"username\" value=\"dalaoyang\"/></p>\r\n    <p>密码：<input type=\"text\" name=\"password\" value=\"123\"/></p>\r\n    <p><input type=\"submit\" value=\"登录\"/></p>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\nindex.html\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\nindex\r\n<br/>\r\n<form th:action=\"@{/logout}\" method=\"post\">\r\n    <p><input type=\"submit\" value=\"注销\"/></p>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\ndelete.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\ndelete\r\n</body>\r\n</html>\r\n```\r\n\r\nselect.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\nselect\r\n</body>\r\n</html>\r\n```\r\n\r\n403.html\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n403\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n创建一个ShiroConfig，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport org.apache.shiro.mgt.SecurityManager;\r\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\r\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\r\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;\r\n\r\nimport java.util.Date;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Configuration\r\npublic class ShiroConfig {\r\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    @Bean\r\n    public ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {\r\n        logger.info(\"启动shiroFilter--时间是：\" + new Date());\r\n        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\r\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\r\n        //shiro拦截器\r\n        Map<String,String> filterChainDefinitionMap = new LinkedHashMap<String,String>();\r\n        //<!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问-->\r\n        //<!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 -->\r\n\r\n        // 配置不被拦截的资源及链接\r\n        filterChainDefinitionMap.put(\"/static/**\", \"anon\");\r\n        // 退出过滤器\r\n        filterChainDefinitionMap.put(\"/logout\", \"logout\");\r\n\r\n        //配置需要认证权限的\r\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\r\n        // 如果不设置默认会自动寻找Web工程根目录下的\"/login\"页面，即本文使用的login.html\r\n        shiroFilterFactoryBean.setLoginUrl(\"/login\");\r\n        // 登录成功后要跳转的链接\r\n        shiroFilterFactoryBean.setSuccessUrl(\"/index\");\r\n\r\n        //未授权界面\r\n        shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\r\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\r\n        return shiroFilterFactoryBean;\r\n    }\r\n\r\n    //自定义身份认证Realm（包含用户名密码校验，权限校验等）\r\n    @Bean\r\n    public MyShiroRealm myShiroRealm(){\r\n        MyShiroRealm myShiroRealm = new MyShiroRealm();\r\n        return myShiroRealm;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public SecurityManager securityManager(){\r\n        DefaultWebSecurityManager securityManager =  new DefaultWebSecurityManager();\r\n        securityManager.setRealm(myShiroRealm());\r\n        return securityManager;\r\n    }\r\n\r\n    //开启shiro aop注解支持，不开启的话权限验证就会失效\r\n    @Bean\r\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\r\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\r\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\r\n        return authorizationAttributeSourceAdvisor;\r\n    }\r\n\r\n    //配置异常处理，不配置的话没有权限后台报错，前台不会跳转到403页面\r\n    @Bean(name=\"simpleMappingExceptionResolver\")\r\n    public SimpleMappingExceptionResolver\r\n    createSimpleMappingExceptionResolver() {\r\n        SimpleMappingExceptionResolver simpleMappingExceptionResolver = new SimpleMappingExceptionResolver();\r\n        Properties mappings = new Properties();\r\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");//数据库异常处理\r\n        mappings.setProperty(\"UnauthorizedException\",\"403\");\r\n        simpleMappingExceptionResolver.setExceptionMappings(mappings);  // None by default\r\n        simpleMappingExceptionResolver.setDefaultErrorView(\"error\");    // No default\r\n        simpleMappingExceptionResolver.setExceptionAttribute(\"ex\");     // Default is \"exception\"\r\n        return simpleMappingExceptionResolver;\r\n    }\r\n}\r\n```\r\n\r\n在配置一个MyShiroRealm用于登录认证和授权认证，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dalaoyang.entity.SysMenu;\r\nimport com.dalaoyang.entity.SysRole;\r\nimport com.dalaoyang.entity.SysUser;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.apache.shiro.authc.AuthenticationException;\r\nimport org.apache.shiro.authc.AuthenticationInfo;\r\nimport org.apache.shiro.authc.AuthenticationToken;\r\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\r\nimport org.apache.shiro.authz.AuthorizationInfo;\r\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\r\nimport org.apache.shiro.realm.AuthorizingRealm;\r\nimport org.apache.shiro.subject.PrincipalCollection;\r\n\r\nimport javax.annotation.Resource;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\npublic class MyShiroRealm extends AuthorizingRealm {\r\n\r\n    @Resource\r\n    private UserRepository userRepository;\r\n\r\n    //授权\r\n    @Override\r\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\r\n        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();\r\n        SysUser userInfo  = (SysUser)principals.getPrimaryPrincipal();\r\n        for(SysRole role:userInfo.getRoleList()){\r\n            authorizationInfo.addRole(role.getRoleName());\r\n            for(SysMenu menu:role.getMenuList()){\r\n                authorizationInfo.addStringPermission(menu.getMenuName());\r\n            }\r\n        }\r\n        return authorizationInfo;\r\n    }\r\n\r\n    //认证\r\n    @Override\r\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)\r\n            throws AuthenticationException {\r\n        //获得当前用户的用户名\r\n        String username = (String)token.getPrincipal();\r\n        System.out.println(token.getCredentials());\r\n        //根据用户名找到对象\r\n        //实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法\r\n        SysUser userInfo = userRepository.findByUserName(username);\r\n        if(userInfo == null){\r\n            return null;\r\n        }\r\n        //这里会去校验密码是否正确\r\n        SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(\r\n                userInfo, //用户名\r\n                userInfo.getPassWord(),//密码\r\n                getName()\r\n        );\r\n        return authenticationInfo;\r\n    }\r\n}\r\n```\r\n\r\n最后新建一个controller，其中本文使用了2种验证权限的方法，select方法使用@RequiresPermissions(\"select\")来验证用户是否具有select权限，delete方法使用@RequiresRoles(\"admin\")来验证用户是否是admin，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.apache.shiro.authc.IncorrectCredentialsException;\r\nimport org.apache.shiro.authc.UnknownAccountException;\r\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\r\nimport org.apache.shiro.authz.annotation.RequiresRoles;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @GetMapping({\"/\",\"/index\"})\r\n    public String index(){\r\n        return\"index\";\r\n    }\r\n\r\n    @GetMapping(\"/403\")\r\n    public String unauthorizedRole(){\r\n        return \"403\";\r\n    }\r\n\r\n    @GetMapping(\"/delete\")\r\n    //@RequiresPermissions(\"delete\")\r\n    @RequiresRoles(\"admin\")\r\n    public String delete(){\r\n        return \"delete\";\r\n    }\r\n\r\n    @GetMapping(\"/select\")\r\n    @RequiresPermissions(\"select\")\r\n    public String select(){\r\n        return \"select\";\r\n    }\r\n\r\n    @RequestMapping(\"/login\")\r\n    public String login(HttpServletRequest request, Map<String, Object> map) throws Exception{\r\n        System.out.println(\"HomeController.login()\");\r\n        // 登录失败从request中获取shiro处理的异常信息。\r\n        // shiroLoginFailure:就是shiro异常类的全类名.\r\n        String exception = (String) request.getAttribute(\"shiroLoginFailure\");\r\n        String msg = \"\";\r\n        //根据异常判断错误类型\r\n        if (exception != null) {\r\n            if (UnknownAccountException.class.getName().equals(exception)) {\r\n                msg = \"账号不存在\";\r\n            } else if (IncorrectCredentialsException.class.getName().equals(exception)) {\r\n                msg = \"密码不正确\";\r\n            } else {\r\n                msg = \"else >> \"+exception;\r\n            }\r\n        }\r\n        map.put(\"msg\", msg);\r\n        // 此方法不处理登录成功,由shiro进行处理\r\n        return \"/login\";\r\n    }\r\n\r\n    @GetMapping(\"/logout\")\r\n    public String logout(){\r\n        return \"/login\";\r\n    }\r\n}\r\n```\r\n\r\n为了方便测试，本人插入了几条初始数据，sql如下：\r\n```\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (1, \'add\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (2, \'delete\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (3, \'update\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (4, \'select\');\r\nINSERT INTO `shiro`.`sys_role`(`role_id`, `role_name`) VALUES (1, \'admin\');\r\nINSERT INTO `shiro`.`sys_role`(`role_id`, `role_name`) VALUES (2, \'user\');\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 1);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 2);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 3);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 4);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (2, 4);\r\nINSERT INTO `shiro`.`sys_user`(`user_id`, `pass_word`, `user_name`) VALUES (1, \'123\', \'dalaoyang\');\r\nINSERT INTO `shiro`.`sys_user`(`user_id`, `pass_word`, `user_name`) VALUES (2, \'123\', \'xiaoli\');\r\nINSERT INTO `shiro`.`sys_user_role`(`role_id`, `user_id`) VALUES (1, 1);\r\nINSERT INTO `shiro`.`sys_user_role`(`role_id`, `user_id`) VALUES (2, 2);\r\n```\r\n\r\n启动项目，我在这里就不一一截图了，口述一下，访问http://localhost:8888/select由于没有登录的原因，会自动跳转到http://localhost:8888/login，输入错误的用户名和密码会出现对应的提示。输入角色user的用户名xiaoli，密码123。访问http://localhost:8888/select页面会正常跳转，访问http://localhost:8888/delete会拦截到403页面。\r\n\r\n如果使用角色为admin的用户dalaoyang密码123登录，以上请求全可以正常访问。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-05-02', 957, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (50, '递归基础思想', '有个朋友刚刚在学习java，刚学了一个月，他虽然脑袋很大（不是针对所有人，只是针对他），但是说自己总是在解题的时候找不到思路。他在学习时遇到了几道关于递归的小题，今天简单聊一下关于递归的思路。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/50/1)\n\n\n上面是朋友发过来的图片，就这几道题简单谈一下递归从哪里入手。\n\n先介绍一下递归，百度百科是这样解释的：程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。\n\n从上面的话我们可以看出，递归其实就是将大的问题分解成小的问题，并且这个子问题的解决方法和大问题的解决方法一样。  \n\n其中必须满足以下条件：   \n1.必要条件必须要有终止条件\n2.子问题要更接近终止条件\n\n\n以上图第一个例子说明一下：\n\n**编写代码，完成1+2+3+4+...+100输出结果**:\n\n这里以1加到5为例子\n```\npublic static void main(String args[]) {\n        System.out.println(result(5));\n    }\n\n    public static int result(int i){\n        int sum;\n        if (i == 1) return 1;\n        else\n            sum = i + result(i - 1);\n            System.out.println(\"i是：\"+i+\"------sum是：\"+sum);\n        return sum;\n    }\n```\n\n从代码来看是这样一个调用过程：\n```\nresult(5)\n5+result(4)\n5+(4+result(3))\n5+(4+(3+result(2)))\n5+(4+(3+(2+result(1))))\n```\n\n展开成数字来看：\n```\n(5+(4+(3+(2+(1))))）\n(5+(4+(3+(2+1)))）\n(5+(4+(3+3))）\n(5+(4+6)）\n(5+10）\n```\n\n这时我们在回头看递归的满足条件：  \n条件一：终止数字1（✔️）  \n条件二：每次减1来接近终止数字（✔️）', 'dalaoyang', '2018-05-03', 95, 'Y', '1', 'N');
INSERT INTO `ARTICLE_INFO` VALUES (51, 'mac安装Elasticsearch', '去官网下载[https://www.elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch)\r\n\r\n本人使用的是2.3.2版本，我下载的是tar版本的，然后解压。\r\n\r\n进入es的安装目录，\r\n\r\n```\r\ncd elasticsearch-2.3.2\r\n```\r\n\r\n启动es\r\n```\r\nbin/elasticsearch\r\n```\r\n\r\n这时可能会报一个logs文件夹权限问题的错误，由于我直接解决了，没有截图，给logs文件夹赋权限。\r\n```\r\nsudo chown -R dalaoyang logs\r\n```\r\n\r\n重启es\r\n\r\n在页面访问[http://localhost:9200/](http://localhost:9200/)，如下图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/51/1)\r\n\r\n\r\n安装一个可视化插件，elasticsearch-head\r\n\r\n```\r\nsudo bin/plugin install mobz/elasticsearch-head\r\n```\r\n\r\n安装成功后，重启es，访问[http://localhost:9200/_plugin/head/](http://localhost:9200/_plugin/head/) 如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/51/2)', 'dalaoyang', '2018-05-04', 648, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (52, 'SpringBoot整合elasticsearch', '在这一篇文章开始之前，你需要先安装一个ElasticSearch，如果你是mac或者linux可以参考[https://www.jianshu.com/p/e47b451375ea](https://www.jianshu.com/p/e47b451375ea)，如果是windows可以自定百度一下。\r\n\r\n\r\n下面是官方套话介绍elasticsearch：\r\n\r\n**ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\r\n我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。**\r\n\r\n具体elasticsearch相关问题可以去[elastic中文社区](https://elasticsearch.cn/)查看。  \r\n\r\n  \r\n这一篇文章将介绍springboot如何简单整合elasticsearch。\r\n\r\n1.启动elasticsearch。  \r\n2.新建项目，pom文件中加入elasticsearch依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_elasticsearch</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_elasticsearch</name>\r\n    <description>springboot_elasticsearch</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n##es地址\r\nspring.data.elasticsearch.cluster-nodes = 127.0.0.1:9300\r\n```\r\n\r\n新建一个商品实体类GoodsInfo，其中需要注意：   \r\nindexName：索引名称 可以理解为数据库名 必须为小写 不然会报org.elasticsearch.indices.InvalidIndexNameException异常   \r\ntype：类型 可以理解为表名\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.elasticsearch.annotations.Document;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@Document(indexName = \"testgoods\",type = \"goods\")\r\n//indexName索引名称 可以理解为数据库名 必须为小写 不然会报org.elasticsearch.indices.InvalidIndexNameException异常\r\n//type类型 可以理解为表名\r\npublic class GoodsInfo implements Serializable {\r\n    private Long id;\r\n    private String name;\r\n    private String description;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public GoodsInfo(Long id, String name, String description) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    public GoodsInfo() {\r\n    }\r\n}\r\n```\r\n\r\n创建GoodsRepository，继承ElasticsearchRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.GoodsInfo;\r\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@Component\r\npublic interface GoodsRepository extends ElasticsearchRepository<GoodsInfo,Long> {\r\n}\r\n```\r\n\r\n最后新建一个controller进行测试，其中包含简单的增删改查以及一个搜索，增删改查这里不做解释了。需要注意es的第一页页码是0\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.GoodsInfo;\r\nimport com.dalaoyang.repository.GoodsRepository;\r\nimport org.elasticsearch.index.query.QueryBuilders;\r\nimport org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;\r\nimport org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;\r\nimport org.springframework.data.elasticsearch.core.query.SearchQuery;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@RestController\r\npublic class GoodsController {\r\n\r\n    @Autowired\r\n    private GoodsRepository goodsRepository;\r\n\r\n    //http://localhost:8888/save\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        GoodsInfo goodsInfo = new GoodsInfo(System.currentTimeMillis(),\r\n                \"商品\"+System.currentTimeMillis(),\"这是一个测试商品\");\r\n        goodsRepository.save(goodsInfo);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/delete?id=1525415333329\r\n    @GetMapping(\"delete\")\r\n    public String delete(long id){\r\n        goodsRepository.delete(id);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/update?id=1525417362754&name=修改&description=修改\r\n    @GetMapping(\"update\")\r\n    public String update(long id,String name,String description){\r\n        GoodsInfo goodsInfo = new GoodsInfo(id,\r\n                name,description);\r\n        goodsRepository.save(goodsInfo);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/getOne?id=1525417362754\r\n    @GetMapping(\"getOne\")\r\n    public GoodsInfo getOne(long id){\r\n        GoodsInfo goodsInfo = goodsRepository.findOne(id);\r\n        return goodsInfo;\r\n    }\r\n\r\n\r\n    //每页数量\r\n    private Integer PAGESIZE=10;\r\n\r\n    //http://localhost:8888/getGoodsList?query=商品\r\n    //http://localhost:8888/getGoodsList?query=商品&pageNumber=1\r\n    //根据关键字\"商品\"去查询列表，name或者description包含的都查询\r\n    @GetMapping(\"getGoodsList\")\r\n    public List<GoodsInfo> getList(Integer pageNumber,String query){\r\n        if(pageNumber==null) pageNumber = 0;\r\n        //es搜索默认第一页页码是0\r\n        SearchQuery searchQuery=getEntitySearchQuery(pageNumber,PAGESIZE,query);\r\n        Page<GoodsInfo> goodsPage = goodsRepository.search(searchQuery);\r\n        return goodsPage.getContent();\r\n    }\r\n\r\n\r\n    private SearchQuery getEntitySearchQuery(int pageNumber, int pageSize, String searchContent) {\r\n        FunctionScoreQueryBuilder functionScoreQueryBuilder = QueryBuilders.functionScoreQuery()\r\n                .add(QueryBuilders.matchPhraseQuery(\"name\", searchContent),\r\n                        ScoreFunctionBuilders.weightFactorFunction(100))\r\n                .add(QueryBuilders.matchPhraseQuery(\"description\", searchContent),\r\n                        ScoreFunctionBuilders.weightFactorFunction(100))\r\n                //设置权重分 求和模式\r\n                .scoreMode(\"sum\")\r\n                //设置权重分最低分\r\n                .setMinScore(10);\r\n\r\n        // 设置分页\r\n        Pageable pageable = new PageRequest(pageNumber, pageSize);\r\n        return new NativeSearchQueryBuilder()\r\n                .withPageable(pageable)\r\n                .withQuery(functionScoreQueryBuilder).build();\r\n    }\r\n\r\n}\r\n```\r\n\r\n启动项目，先调用http://localhost:8888/save方法，插入几条数据，然后去es管理页面[http://localhost:9200/_plugin/head/](http://localhost:9200/_plugin/head/)，如下图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/52/1)\r\n\r\n\r\n访问[http://localhost:8888/getGoodsList?query=商品](http://localhost:8888/getGoodsList?query=商品)，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/52/2)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-04', 897, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (53, 'SpringBoot整合mongoDB', 'MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\r\n\r\n这一片文章介绍一个springboot整合mongodb，如果你了解整合mysql之类的数据库，可以一带而过。\r\n\r\n还是同样的套路，pom文件中加入mongodb依赖，完整pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_mongodb</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_mongodb</name>\r\n    <description>springboot_mongodb</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件中，配置对应mongodb的数据库信息，这里只配置了数据库地址，端口号，数据库名称，配置如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##mongo配置\r\nspring.data.mongodb.host=127.0.0.1\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=test\r\n```\r\n\r\n\r\n也是一样的创建一个实体类，如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.annotation.Id;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\n\r\npublic class UserInfo {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo(Long id, String username, String password) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n}\r\n```\r\n\r\n创建一个数据操作层，继承MongoRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\npublic interface UserRepository extends MongoRepository<UserInfo,Long> {\r\n}\r\n```\r\n\r\n\r\n和往常一样，创建一个controller进行增删改查测试，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        UserInfo userInfo = new UserInfo(System.currentTimeMillis(),\"用户\"+System.currentTimeMillis(),\"123\");\r\n        userRepository.save(userInfo);\r\n        return \"success\";\r\n    }\r\n\r\n\r\n    @GetMapping(\"getUserList\")\r\n    public List<UserInfo> getUserList(){\r\n        List<UserInfo> userInfoList = userRepository.findAll();\r\n        return userInfoList;\r\n    }\r\n\r\n    @GetMapping(\"delete\")\r\n    public String delete(Long id){\r\n        userRepository.delete(id);\r\n        return \"success\";\r\n    }\r\n\r\n    @GetMapping(\"update\")\r\n    public String update(Long id,String username,String password){\r\n        UserInfo userInfo = new UserInfo(id,username,password);\r\n        userRepository.save(userInfo);\r\n        return \"success\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n到这里就结束了，可以启动项目访问[http://localhost:8888/save](http://localhost:8888/save)创建几条数据。\r\n\r\n然后访问[http://localhost:8888/getUserList](http://localhost:8888/getUserList)可以查看刚才创建的数据，如下图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/53/1)\r\n\r\n修改和删除这里就不做测试了，在方法上有对应的测试访问地址。\r\n\r\n这里做一个简单的总结，通过整合几种数据库，包含关系型数据mysql，文件式数据库mongodb，甚至说elasticsearch等等其实步骤都大致如下： \r\n \r\n**1.加入对应依赖   \r\n2.配置文件配置对应数据库信息   \r\n3.数据操作层继承想要的repository**\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-05', 685, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (54, 'SpringBoot使用LomBok', 'Lombok是什么？它是一个能帮我们消除那些必须要写但是重复的代码，比如setter，getter，构造函数之类的方法。\r\n\r\n首先先简单说一下idea安装lombok，有2种方法：\r\n1.直接从[http://plugins.jetbrains.com/](http://plugins.jetbrains.com/)下载，然后放到idea安装文件下面的plugins，然后重启idea   \r\n2.在idea的settings（windows）或者Preferences（mac），下找到plugins菜单，点击Browse repositories，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/1)\r\n\r\n然后搜索lombok，点击右侧下载，下载完成重启即可，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/2)\r\n\r\n新建项目，在pom文件中加入lombok依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_lombok</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_lombok</name>\r\n    <description>springboot_lombok</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.16.20</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n新建一个User类，这个是使用lombok的类，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n\r\n    private Integer id;\r\n    private String name;\r\n    private String password;\r\n}\r\n```\r\n\r\n新建一个UserNoLombok类，这个和原来一样，目的为了对比使用lombok的好处，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\npublic class UserNoLombok {\r\n    private Integer id;\r\n    private String name;\r\n    private String password;\r\n\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserNoLombok(Integer id, String name, String password) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.password = password;\r\n    }\r\n\r\n\r\n    public UserNoLombok() {\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        UserNoLombok that = (UserNoLombok) o;\r\n        return Objects.equals(id, that.id) &&\r\n                Objects.equals(name, that.name) &&\r\n                Objects.equals(password, that.password);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n\r\n        return Objects.hash(id, name, password);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"UserNoLombok{\" +\r\n                \"id=\" + id +\r\n                \", name=\'\" + name + \'\\\'\' +\r\n                \", password=\'\" + password + \'\\\'\' +\r\n                \'}\';\r\n    }\r\n}\r\n```\r\n\r\n然后新建一个UserController测试，代码如下：\r\n```\r\n\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @GetMapping(\"/testUser\")\r\n    public User getUser(){\r\n        User user = new User();\r\n        user.setId(1);\r\n        user.setName(\"dalaoyang\");\r\n        user.setPassword(\"123\");\r\n        System.out.println(user.toString());\r\n        return user;\r\n    }\r\n}\r\n\r\n```\r\n访问[http://localhost:8080/testUser](http://localhost:8080/testUser)如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/3)\r\n\r\nlombok注解简介：\r\n\r\n```\r\n@Data 标签，生成getter/setter toString()等方法 \r\n@NonNull : 让你不在担忧并且爱上NullPointerException \r\n@CleanUp : 自动资源管理：不用再在finally中添加资源的close方法 \r\n@Setter/@Getter : 自动生成set和get方法 \r\n@ToString : 自动生成toString方法 \r\n@EqualsAndHashcode : 从对象的字段中生成hashCode和equals的实现 \r\n@NoArgsConstructor/@RequiredArgsConstructor/@AllArgsConstructor \r\n自动生成构造方法 \r\n@Data : 自动生成set/get方法，toString方法，equals方法，hashCode方法，不带参数的构造方法 \r\n@Value : 用于注解final类 \r\n@Builder : 产生复杂的构建器api类 \r\n@SneakyThrows : 异常处理（谨慎使用） \r\n@Synchronized : 同步方法安全的转化 \r\n@Getter(lazy=true) : \r\n@Log : 支持各种logger对象，使用时用对应的注解，如：@Log4j\r\n```\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-07', 787, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (55, 'linux安装nginx', '安装环境\r\n```\r\nyum install gcc\r\n```\r\n\r\n```\r\nyum install pcre-devel\r\n```\r\n\r\n```\r\nyum install zlib zlib-devel\r\n```\r\n\r\n```\r\nyum install openssl openssl-devel\r\n```\r\n\r\n在usr/local目录下新建nginx文件夹\r\n```\r\ncd /usr/local\r\n```\r\n\r\n```\r\nmkdir nginx\r\n```\r\n\r\n进入nginx文件夹\r\n```\r\ncd nginx\r\n```\r\n\r\n下载nginx的tar包\r\n```\r\nwget http://nginx.org/download/nginx-1.13.7.tar.gz\r\n```\r\n\r\n解压tar\r\n```\r\ntar -xvf nginx-1.13.7.tar.g\r\n```\r\n\r\n安装nginx\r\n```\r\n./configure\r\n```\r\n\r\n执行make\r\n```\r\nmake\r\n```\r\n\r\n执行make install\r\n```\r\nmake install\r\n```\r\n\r\n启动nginx\r\n\r\n进入sbin\r\n```\r\ncd sbin\r\n```\r\n\r\n启动\r\n```\r\nsudo ./nginx\r\n```\r\n\r\n查询nginx.conf是否正确\r\n```\r\n/usr/local/nginx/sbin/nginx -t\r\n```', 'dalaoyang', '2018-05-09', 753, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (56, 'linux安装git', '之前用yum安装过git，如下：\n```\nyum -y install git\n```\n\n但是后来发现版本太低了，git1.7.1\n\n选择下载一个安装包的方式安装\n\n安装插件\n```\n　　yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker\n```\n\n删除已有的git\n```\nyum remove git\n```\n前往安装目录\n```\ncd /usr/local/git/\n```\n\n下载git\n```\nwget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz\n```\n\n解压git\n```\ntar -zxvf git-2.8.3.tar.gz\n```\n\n配置git安装路径\n```\n./configure prefix=/usr/local/git/\n```\n\n编译安装\n```\nmake && make install\n```\n打开配置文件\n```\nvi /etc/profile\n```\n\n加入如下配置\n```\nexport PATH=$PATH:/usr/local/git/bin\n```\n使配置生效\n```\nsource /etc/profile\n```\n\n查看git版本\n```\ngit --version\n```\n\n如图\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/56/1)\n\n\n', 'dalaoyang', '2018-05-15', 442, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (57, 'Intellij IDEA更改项目优先编译顺序', '今天启动公司项目突然发现了一个问题，类里面明明有这个方法，但是无论怎样都不编译。（由于公司项目是二次开发，代码都是第三方写的，代码请勿仔细看，怕伤了你的眼睛。）\r\n\r\n如图，找不到setJGMC方法。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/1)\r\n\r\n\r\n但是去对应的类中可以找到这个方法，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/2)\r\n\r\n然后看一下编译后的，又没有这个方法，。。。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/3)\r\n\r\n这时 我想到，是不是某个jar包中含有这个方法，类内调用的是jar包内的方法，果然，被我找到了。项目一直编译的这个jar的方法，项目内重写的这个类没有编译。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/4)\r\n\r\n查看了一下项目的配置，如下，果然优先编译的是jar包，然后是项目内。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/5)\r\n\r\n点击下面的三角，将项目挪到lib上面在编译就可以了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/6)\r\n\r\n\r\n然后就不会报之前的错误了。', 'dalaoyang', '2018-05-23', 426, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (58, 'docker部署springboot项目', '>本文介绍一下docker如何部署springboot项目。\n \n## 前提条件：\n1.可以运行jar包的环境\n2.机器上已经安装了docker\n3.准备部署的springboot的jar包\n4.Dockerfile文件\n\n## 准备Dockerfile\n\n前三条都很容准备，创建一个Dockerfile：\n```\nFROM java:8 \nVOLUME /tmp \nADD dalaoyang_mgr.jar /dalaoyang.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/dalaoyang.jar\"]\n```\n\n### 解释一下需要注意的地方\n1.java:8 是使用jdk版本\n2.dalaoyang_mgr.jar是使用jar包名称\n3.ADD dalaoyang_mgr.jar /dalaoyang.jar 拷贝jar到容器\n4.ENTRYPOINT 执行jar文件\n\n## 生成docker镜像\n\n将Dockerfile和jar放在一个文件夹，使用下面命令生成镜像，注意最后的.\n```\ndocker build -t dalaoyang .\n```\n\n注意：dalaoyang是生成的镜像名称。\n\n更多docker build命令可以查看[菜鸟教程](http://www.runoob.com/docker/docker-build-command.html)\n\n查看一下docker镜像\n```\ndocker images\n```\n\n如图，可以看到已经有了一个名称为dalaoyang的镜像\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/58/1)\n\n\n## 运行Docker容器\n\n### 代码如下\n```\ndocker run -d -p 9000:9000 dalaoyang\n```\n\n### 解释一下需要注意的地方\n1.-d 后台运行\n2.-p 9000:9000 将docker容器的9000端口映射到服务器上的9000端口\n\n\n到这里就配置完成了，在浏览器使用：服务器ip:9000就能访问docker容器内部署的springboot项目了。\n\n\n# 个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-24', 839, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (59, 'SpringBoot使用事务', '>事务是很多项目中需要注意的东西，有些场景如果没有加事务控制就会导致一些脏数据进入数据库，本文简单介绍SpringBoot怎样使用事务。\n\n本文使用的是之前整合JPA的文章，具体可以参考 [传送门](https://www.jianshu.com/p/1f67d91543ce)。\n\n无论是配置还是pom文件等等，没有任何改变，改变的是测试的controller上面的两个方法，其中一个方法使用了@Transactional注解来进行事务控制。\ncontroller代码如下：\n```\n@RestController\npublic class HouseController {\n\n    @Autowired\n    private HouseRepository houseRepository;\n\n    @GetMapping(\"/test1\")\n    public String test1(){\n        houseRepository.save(new House(\"house1\", \"100平方米\"));\n        houseRepository.save(new House(\"house2\", \"100平方米\"));\n        houseRepository.save(new House(\"house3\", \"100平方米\"));\n        houseRepository.save(new House(\"house444444444\", \"100平方米\"));\n        houseRepository.save(new House(\"house5\", \"100平方米\"));\n        return \"success\";\n    }\n\n    @GetMapping(\"/test2\")\n    @Transactional\n    public String test2(){\n        houseRepository.save(new House(\"house6\", \"100平方米\"));\n        houseRepository.save(new House(\"house7\", \"100平方米\"));\n        houseRepository.save(new House(\"house8\", \"100平方米\"));\n        houseRepository.save(new House(\"house999999999\", \"100平方米\"));\n        houseRepository.save(new House(\"house10\", \"100平方米\"));\n        return \"success\";\n    }\n}\n```\n\n\ntest1方法没有加入事务，test2方法加入了事务注解。   \n启动项目，浏览器访问[http://localhost:8888/test1](http://localhost:8888/test1)，浏览器如图所示，报错了，因为第四条数据超长了。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/59/1)\n\n查看数据库，可以看到如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/59/2)\n\n从上图可以看出，前三条插入成功了，但是后两条都失败了，这并不是我们想要的结果。通常来讲，我们需要的只是成功的话都插入，失败的话都回滚，这时我们调用[http://localhost:8888/test2](http://localhost:8888/test2)，在次查看数据库，还是之前的三条数据，SpringBoot使用事务建当整合到这里就完成了。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-28', 823, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (60, 'SpringBoot使用缓存', '## 前言\n我们都知道，一个程序的瓶颈通常都在数据库，很多场景需要获取相同的数据。比如网站页面数据等，需要一次次的请求数据库，导致大部分时间都浪费在数据库查询和方法调用上，这时就可以利用到缓存来缓解这个问题。\n\n## 简介\n本文来介绍SpringBoot来简单整合缓存，使用SpringBoot+JPA+mysql来进行数据库操作。整合JPA的文章，具体可以参考 [传送门](https://www.jianshu.com/p/1f67d91543ce)。\n\n## 新建项目\n创建一个项目，pom文件中加入spring-boot-starter-cache依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_cache</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_cache</name>\n    <description>springboot_cache</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-cache</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下，和整合JPA一样，没有做任何修改：\n```\n##端口号\nserver.port=8888\n\n\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=update\n\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n\n实体类代码如下：\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\n@Entity\npublic class House {\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n    @Column(length = 10)\n    private String houseName;\n    private String houseSize;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getHouseName() {\n        return houseName;\n    }\n\n    public void setHouseName(String houseName) {\n        this.houseName = houseName;\n    }\n\n    public String getHouseSize() {\n        return houseSize;\n    }\n\n    public void setHouseSize(String houseSize) {\n        this.houseSize = houseSize;\n    }\n\n    public House(String houseName, String houseSize) {\n        this.houseName = houseName;\n        this.houseSize = houseSize;\n    }\n\n    public House(int id,String houseName, String houseSize) {\n        this.id = id;\n        this.houseName = houseName;\n        this.houseSize = houseSize;\n    }\n\n    public House() {\n    }\n}\n```\n\nRepository如下：\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.House;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\npublic interface HouseRepository extends JpaRepository<House,Integer> {\n}\n```\n\n启动类上加入@EnableCaching开启缓存，完整代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\n\n@SpringBootApplication\n//开启缓存\n@EnableCaching\npublic class SpringbootCacheApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootCacheApplication.class, args);\n	}\n}\n```\n\n\n还是和以往一样，使用Controller做测试，先展示一下代码：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.House;\nimport com.dalaoyang.repository.HouseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\n@RestController\npublic class HouseController {\n\n    @Autowired\n    private HouseRepository houseRepository;\n\n    //http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米\n    @GetMapping(\"/saveHouse\")\n    @CachePut(value = \"house\", key = \"#id\")\n    public House saveHouse(Integer id,String houseName,String houseSize){\n        House house = new House(id,houseName, houseSize);\n        houseRepository.save(house);\n        return house;\n    }\n\n    //http://localhost:8888/queryHouse?id=1\n    @GetMapping(\"/queryHouse\")\n    @Cacheable(value = \"house\", key = \"#id\")\n    public House queryHouse(Integer id){\n        House house = houseRepository.findOne(id);\n        return house;\n    }\n\n    //http://localhost:8888/deleteHouse?id=1\n    @GetMapping(\"/deleteHouse\")\n    @CacheEvict(value = \"house\", key = \"#id\")\n    public String deleteHouse(Integer id){\n        houseRepository.delete(id);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCache\n    @GetMapping(\"/deleteCache\")\n    @CacheEvict(value = \"house\", allEntries = true)\n    public void deleteCache() {\n    }\n}\n```\n\n## 解释测试方法\n\n### 1.saveHouse方法\n>方法中使用到了@CachePut注解，这个注解直接将返回值放入缓存中，通常用于保存和修改方法中\n\n### 2.queryHouse方法\n>方法中使用到了@Cacheable注解，这个注解在执行前先查看缓存中是不是已经存在了，如果存在，直接返回。如果不存在，将方法的返回值放入缓存。\n\n### 3.deleteHouse方法\n>方法中使用到了@CacheEvict注解，这个注解在执行方法执行成功后会从缓存中移除\n\n### 4.deleteCache方法\n>这个方法的也是使用的@CacheEvict注解，不同的是使用了allEntries熟悉，默认为false，true的时候移除所有缓存。\n\n## 测试\n\n### 1.首先访问[http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米](http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米)，然后查看数据库和控制台，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/1)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/2)\n\n### 2.访问[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看页面数据和控制台。因为设置了打印执行jpa查询的话打印sql，看下图控制台没有打印，证明在保存的时候@CachePut注解已经将其放入了缓存中。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/3)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/4)\n\n### 3.调用清空缓存方法[http://localhost:8888/deleteCache](http://localhost:8888/deleteCache)然后在次访问查询方法[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看控制台如下，可以到清空缓存后，在访问就需要查询数据库。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/5)\n\n### 4.调用删除方法[http://localhost:8888/deleteHouse?id=1](http://localhost:8888/deleteHouse?id=1)，然后在方法查询方法[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看控制台如下，可以到删除缓存后，在访问也查询了数据库。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/6)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-29', 1057, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (61, 'Intellij IDEA实现SpringBoot项目多端口启动', '## 前言\n\n>有时候使用springboot项目时遇到这样一种情况，用一个项目需要复制很多遍进行测试，除了端口号不同以外，没有任何不同。这时我们强大的Intellij IDEA就能替我们实现。\n\n\n## 实现方法\n\n### 第一种方法\n\n1.点击图中Edit Configurations，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/1)\n\n2.取消选中的Single instance only\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/2)\n\n3.启动项目，demo(9000)，如图。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/3)\n\n4.修改配置文件中的端口号为9001，启动项目，demo(9001)，如图。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/4)\n\n从下方可以看到demo项目分别以9000和9001启动了。\n\n\n### 第二种方法\n\n1.点击图中Edit Configurations，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/5)\n\n2.点击左上角+号，选择Spring Boot\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/6)\n\n3.点击...位置，如图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/7)\n\n4.选择需要启动的项目，点击ok\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/8)\n\n5.将上方name修改为demo2\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/9)\n\n6.启动demo(9000)，如图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/10)\n\n7.修改端口为9001，启动demo2，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/11)\n\n到这里第二种方法也结束了\n\n## 总结\n\n>两种方法都可以实现想要达到的效果，但是个人觉得第一种相对简单一些。具体怎么使用看个人喜好。\n\n## 个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n', 'dalaoyang', '2018-06-04', 601, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (63, 'SpringBoot整合dubbo', '**Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和Spring框架无缝集成。**\n\n\n以上介绍来源于[百度百科](https://baike.baidu.com/item/Dubbo/18907815?fr=aladdin)，具体dubbo相关可以自行查找资料，本文只是介绍SpringBoot简单整合dubbo。   \n\n## 1.安装zookeeper\n\n### 1.1 去官网下载，本文以3.4.12 版本为例子[http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.12/](http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.12/)\n\n### 1.2 下载之后解压ZooKeeper\n\n### 1.3 进入解压文件夹conf目录\n\n### 1.4 将zoo_sample.cfg修改名称为zoo.cfg\n\n### 1.5 修改内容为如下，注意，本人是将ZooKeeper解压到了e盘，具体\ndataDir和dataDirLog属性可以根据自己情况修改。\n\n```\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=E:\\\\zookeeper\\\\data  \ndataDirLog=E:\\\\zookeeper\\\\log  \n# the port at which the clients will connect\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n\n```\n\n### 1.6 启动zookeeper，进入bin目录，双击zkServer.cmd\n\n## 2 新建项目springboot_dubbo_server，项目中加入dubbo依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_dubbo_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_dubbo_server</name>\n    <description>springboot_dubbo_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.dubbo.springboot</groupId>\n            <artifactId>spring-boot-starter-dubbo</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8880\n\n## Dubbo 服务提供者配置\nspring.dubbo.application.name=dubbo_server\nspring.dubbo.registry.address=zookeeper://39.108.123.128:2181\nspring.dubbo.protocol.name=dubbo\nspring.dubbo.protocol.port=20880\nspring.dubbo.scan=com.dalaoyang.dubbo\n```\n\n定义一个Service Interface：HelloService.java\n```\npackage com.dalaoyang.dubbo;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\npublic interface HelloService {\n    String SayHello(String name);\n}\n```\n\n接口的实现类：HelloServiceImpl.java\n```\npackage com.dalaoyang.dubbo.imp;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.dalaoyang.dubbo.HelloService;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo.imp\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n\n    @Override\n    public String SayHello(String name) {\n        return \"Hello , \"+name;\n    }\n}\n```\n\n到这里dubbo服务提供者已经创建完成。\n\n### 3.新建项目springboot_dubbo_client，pom与提供者一致，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_dubbo_client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_dubbo_client</name>\n    <description>springboot_dubbo_client</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.dubbo.springboot</groupId>\n            <artifactId>spring-boot-starter-dubbo</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n## 端口号\nserver.port=8881\n\n## Dubbo 服务消费者配置\nspring.dubbo.application.name=dubbo_client\nspring.dubbo.registry.address=zookeeper://39.108.123.128:2181\nspring.dubbo.scan=com.dalaoyang.controller\n\n```\n\nHelloService接口如下：\n```\npackage com.dalaoyang.dubbo;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\npublic interface HelloService {\n    String SayHello(String name);\n}\n```\n\n创建一个controller进行测试，注意版本号要与提供者的版本号一致，dubbo扫描包要扫描到我们要使用的类上，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.dalaoyang.dubbo.HelloService;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\n@RestController\npublic class HelloController {\n\n    @Reference(version = \"1.0.0\")\n    HelloService helloService;\n\n    @GetMapping(\"sayHello\")\n    public String sayHello(String name){\n        return helloService.SayHello(name);\n    }\n}\n```\n\n到这里dubbo服务调用者也创建完成。\n\n分别启动服务提供者项目和服务调用者项目，在浏览器访问[http://localhost:8881/sayHello?name=dalaoyang](http://localhost:8881/sayHello?name=dalaoyang)，如图，证明调用成功。\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-94787e8498ef08a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n更多springboot-dubbo配置可以参考[https://github.com/JeffLi1993/springboot-learning-example/blob/master/springboot-dubbo-server/DubboProperties.md](https://github.com/JeffLi1993/springboot-learning-example/blob/master/springboot-dubbo-server/DubboProperties.md)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-06-14', 876, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (64, 'EurekaServer高可用', '## 前言\n\n>之前一篇文章文章[《服务注册与发现---eureka》](https://www.jianshu.com/p/d69744d9b935)介绍了单点EurekaServer。但是实际环境中，这种单点的的模式可能会有很多隐形的问题。比如EurekaServer发生宕机，或者某些意外情况发生，很可能影响其他服务之间的调用，严重影响到整个系统的可用性，所以，一般会部署一个高可用的EurekaServer集群。\n\n本文简单介绍EurekaServer高可用简单搭建。\n\n\n## 配置本地环境\n\n由于本地环境是单台电脑来配置高可用，所以需要修改一下电脑的host文件，本文简单说一下mac修改host文件，其他系统电脑可以自行百度一下，都很简单。\n\n### 1.进入/private/etc文件夹内\n### 2.打开host文件\n### 3.文件内加入以下两行\n\n```\n127.0.0.1	server1\n127.0.0.1	server2\n```\n\n本机完整host文件如下：\n```\n##\n# Host Database\n#\n# localhost is used to configure the loopback interface\n# when the system is booting.  Do not change this entry.\n##\n127.0.0.1	localhost\n255.255.255.255	broadcasthost\n::1             localhost\n127.0.0.1	server1\n127.0.0.1	server2\n\n```\n\n## 新建项目\n\n配置好了host文件之后，新建一个项目，与之前新建eurekaserver完全一致，不过配置文件进行了一下简单的修改（只有配置文件进行了修改），先看一下单机模式下的配置：\n```\nserver.port=8761\n\neureka.instance.hostname=localhost\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n##禁止自己向自己注册\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\n```\n\n\n从配置上可以看到，上面最后两行配置是让注册中心不注册自己，而其实eurekaserver就是将自己也当成服务，向其他注册中心注册自己。\n\n新建项目springcloud_eureka_server1（8761），除了配置其余没有任何不同，这里就不一一展示了，配置文件代码如下：\n```\nserver.port=8761\n\neureka.instance.hostname=server1\neureka.client.service-url.defaultZone=http://server2:8762/eureka/\n\nspring.application.name=server1\n```\n\n新建项目springcloud_eureka_server2（8762），配置文件代码如下：\n```\nserver.port=8762\n\neureka.instance.hostname=server2\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\n\nspring.application.name=server2\n```\n\n以上代码不难理解，springcloud_eureka_server1（8761）将自己注册到server2的eureka上，springcloud_eureka_server2（8762）注册到server1的eureka上。\n\n这时查看一下eureka管理页面，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/64/1)\n\n观察页面可以看到server1含有了server2的节点，server2有了server1的节点。\n\n\n## 应用注册到高可用EurekaServer上\n\n修改之前项目springcloud_eureka_client（8761）配置文件如下：\n```\n##端口号\nserver.port=8763\n\nspring.application.name=eureka_client\n\neureka.client.service-url.defaultZone=http://server1:8761/eureka/,http://server2:8762/eureka/\n```\n\n查看一下eureka管理页面，如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/64/2)\n\n此时就算断开server1，因为springcloud_eureka_client（8763）也像server2注册了，因此其他server2上的服务依然可以访问springcloud_eureka_client（8763），从而实现了EurekaServer的高可用。\n\n## 其他测试\n\n我们在做一下修改，springcloud_eureka_client（8763）项目配置文件中只配置一个eurekaserver，代码如下：\n```\n##端口号\nserver.port=8763\n\nspring.application.name=eureka_client\n\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\n```\n\neureka管理页面也是同样的展示了和配置两个服务一样的效果，因为多个eureka之间的数据会同步，但是建议在客户端像第一种方式那样配置。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n\n', 'dalaoyang', '2018-06-15', 617, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (65, 'SpringBoot使用Mybatis-PageHelper', '## 前言\n\n>之前一篇文章介绍了[《SpringBoot+Mybatis+MySql学习》](https://www.jianshu.com/p/8b545a537fd0)的整合，这一片扩展一下Mybatis的分页插件-Mybatis-PageHelper。\n\n## 新建项目\n\n首先，pom文件中加入pagehelper依赖，完整pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mybatis_pagehelper</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mybatis_pagehelper</name>\n    <description>springboot_mybatis_pagehelper</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n        <!--pagehelper -->\n        <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>1.2.5</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件增加PageHelper的配置，由于demo很简单，只用到了分页，所以没有增加其他配置，只设置了分页方言，完整代码如下：\n```\n##端口号\nserver.port=8888\n\n##日志级别\nlogging.level.com.dalaoyang.dao.UserMapper=debug\n\n##数据库url\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n\n#pagehelper分页插件配置\npagehelper.helperDialect=mysql\n\n```\n\n实体类User代码如下：\n```\npackage com.dalaoyang.entity;\n\nimport org.apache.ibatis.type.Alias;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@Alias(\"user\")\npublic class User {\n\n    private int id;\n    private String user_name;\n    private String user_password;\n\n    public User(String user_name, String user_password) {\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public User(int id, String user_name, String user_password) {\n        this.id = id;\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getUser_password() {\n        return user_password;\n    }\n\n    public void setUser_password(String user_password) {\n        this.user_password = user_password;\n    }\n}\n\n```\n\n启动类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootMybatisPagehelperApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootMybatisPagehelperApplication.class, args);\n	}\n}\n```\n\n新建一个UserMapper，之前介绍的整合mybatis是使用的mapper方式，本文选择使用注解方式，代码如下：\n```\npackage com.dalaoyang.dao;\n\nimport com.dalaoyang.entity.User;\nimport com.github.pagehelper.Page;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Select;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dao\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@Mapper\npublic interface UserMapper {\n\n    @Select(\"SELECT * FROM USER\")\n    Page<User> getUserList();\n}\n\n```\n\n还是一如既往的使用controller作为测试，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.dao.UserMapper;\nimport com.dalaoyang.entity.User;\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    UserMapper userMapper;\n\n    //http://localhost:8888/getUserList?pageNum=1&pageSize=2\n    @RequestMapping(\"/getUserList\")\n    public Page<User> getUserList(Integer pageNum, Integer pageSize){\n        PageHelper.startPage(pageNum, pageSize);\n        Page<User>  userList= userMapper.getUserList();\n        return userList;\n    }\n}\n```\n\n到这里项目就完全创建完成了。\n\n## 测试\n\n浏览器访问[http://localhost:8888/getUserList?pageNum=1&pageSize=2](http://localhost:8888/getUserList?pageNum=1&pageSize=2)，结果如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/65/1)\n\n然后查看控制台如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/65/2)\n\n可以看到sql已经进行分页了。\n\n然后回头看controller的方法，返回的Page对象中包含了很多关于分页的参数等数据，下面是Page的代码，具体使用可以查看一下：\n```\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage com.github.pagehelper;\n\nimport java.io.Closeable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Page<E> extends ArrayList<E> implements Closeable {\n    private static final long serialVersionUID = 1L;\n    private int pageNum;\n    private int pageSize;\n    private int startRow;\n    private int endRow;\n    private long total;\n    private int pages;\n    private boolean count;\n    private Boolean reasonable;\n    private Boolean pageSizeZero;\n    private String countColumn;\n    private String orderBy;\n    private boolean orderByOnly;\n\n    public Page() {\n        this.count = true;\n    }\n\n    public Page(int pageNum, int pageSize) {\n        this(pageNum, pageSize, true, (Boolean)null);\n    }\n\n    public Page(int pageNum, int pageSize, boolean count) {\n        this(pageNum, pageSize, count, (Boolean)null);\n    }\n\n    private Page(int pageNum, int pageSize, boolean count, Boolean reasonable) {\n        super(0);\n        this.count = true;\n        if (pageNum == 1 && pageSize == 2147483647) {\n            this.pageSizeZero = true;\n            pageSize = 0;\n        }\n\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.count = count;\n        this.calculateStartAndEndRow();\n        this.setReasonable(reasonable);\n    }\n\n    public Page(int[] rowBounds, boolean count) {\n        super(0);\n        this.count = true;\n        if (rowBounds[0] == 0 && rowBounds[1] == 2147483647) {\n            this.pageSizeZero = true;\n            this.pageSize = 0;\n        } else {\n            this.pageSize = rowBounds[1];\n            this.pageNum = rowBounds[1] != 0 ? (int)Math.ceil(((double)rowBounds[0] + (double)rowBounds[1]) / (double)rowBounds[1]) : 0;\n        }\n\n        this.startRow = rowBounds[0];\n        this.count = count;\n        this.endRow = this.startRow + rowBounds[1];\n    }\n\n    public List<E> getResult() {\n        return this;\n    }\n\n    public int getPages() {\n        return this.pages;\n    }\n\n    public Page<E> setPages(int pages) {\n        this.pages = pages;\n        return this;\n    }\n\n    public int getEndRow() {\n        return this.endRow;\n    }\n\n    public Page<E> setEndRow(int endRow) {\n        this.endRow = endRow;\n        return this;\n    }\n\n    public int getPageNum() {\n        return this.pageNum;\n    }\n\n    public Page<E> setPageNum(int pageNum) {\n        this.pageNum = this.reasonable != null && this.reasonable && pageNum <= 0 ? 1 : pageNum;\n        return this;\n    }\n\n    public int getPageSize() {\n        return this.pageSize;\n    }\n\n    public Page<E> setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }\n\n    public int getStartRow() {\n        return this.startRow;\n    }\n\n    public Page<E> setStartRow(int startRow) {\n        this.startRow = startRow;\n        return this;\n    }\n\n    public long getTotal() {\n        return this.total;\n    }\n\n    public void setTotal(long total) {\n        this.total = total;\n        if (total == -1L) {\n            this.pages = 1;\n        } else {\n            if (this.pageSize > 0) {\n                this.pages = (int)(total / (long)this.pageSize + (long)(total % (long)this.pageSize == 0L ? 0 : 1));\n            } else {\n                this.pages = 0;\n            }\n\n            if (this.reasonable != null && this.reasonable && this.pageNum > this.pages) {\n                this.pageNum = this.pages;\n                this.calculateStartAndEndRow();\n            }\n\n        }\n    }\n\n    public Boolean getReasonable() {\n        return this.reasonable;\n    }\n\n    public Page<E> setReasonable(Boolean reasonable) {\n        if (reasonable == null) {\n            return this;\n        } else {\n            this.reasonable = reasonable;\n            if (this.reasonable && this.pageNum <= 0) {\n                this.pageNum = 1;\n                this.calculateStartAndEndRow();\n            }\n\n            return this;\n        }\n    }\n\n    public Boolean getPageSizeZero() {\n        return this.pageSizeZero;\n    }\n\n    public Page<E> setPageSizeZero(Boolean pageSizeZero) {\n        if (pageSizeZero != null) {\n            this.pageSizeZero = pageSizeZero;\n        }\n\n        return this;\n    }\n\n    public String getOrderBy() {\n        return this.orderBy;\n    }\n\n    public <E> Page<E> setOrderBy(String orderBy) {\n        this.orderBy = orderBy;\n        return this;\n    }\n\n    public boolean isOrderByOnly() {\n        return this.orderByOnly;\n    }\n\n    public void setOrderByOnly(boolean orderByOnly) {\n        this.orderByOnly = orderByOnly;\n    }\n\n    private void calculateStartAndEndRow() {\n        this.startRow = this.pageNum > 0 ? (this.pageNum - 1) * this.pageSize : 0;\n        this.endRow = this.startRow + this.pageSize * (this.pageNum > 0 ? 1 : 0);\n    }\n\n    public boolean isCount() {\n        return this.count;\n    }\n\n    public Page<E> setCount(boolean count) {\n        this.count = count;\n        return this;\n    }\n\n    public Page<E> pageNum(int pageNum) {\n        this.pageNum = this.reasonable != null && this.reasonable && pageNum <= 0 ? 1 : pageNum;\n        return this;\n    }\n\n    public Page<E> pageSize(int pageSize) {\n        this.pageSize = pageSize;\n        this.calculateStartAndEndRow();\n        return this;\n    }\n\n    public Page<E> count(Boolean count) {\n        this.count = count;\n        return this;\n    }\n\n    public Page<E> reasonable(Boolean reasonable) {\n        this.setReasonable(reasonable);\n        return this;\n    }\n\n    public Page<E> pageSizeZero(Boolean pageSizeZero) {\n        this.setPageSizeZero(pageSizeZero);\n        return this;\n    }\n\n    public Page<E> countColumn(String columnName) {\n        this.countColumn = columnName;\n        return this;\n    }\n\n    public PageInfo<E> toPageInfo() {\n        PageInfo<E> pageInfo = new PageInfo(this);\n        return pageInfo;\n    }\n\n    public PageSerializable<E> toPageSerializable() {\n        PageSerializable<E> serializable = new PageSerializable(this);\n        return serializable;\n    }\n\n    public <E> Page<E> doSelectPage(ISelect select) {\n        select.doSelect();\n        return this;\n    }\n\n    public <E> PageInfo<E> doSelectPageInfo(ISelect select) {\n        select.doSelect();\n        return this.toPageInfo();\n    }\n\n    public <E> PageSerializable<E> doSelectPageSerializable(ISelect select) {\n        select.doSelect();\n        return this.toPageSerializable();\n    }\n\n    public long doCount(ISelect select) {\n        this.pageSizeZero = true;\n        this.pageSize = 0;\n        select.doSelect();\n        return this.total;\n    }\n\n    public String getCountColumn() {\n        return this.countColumn;\n    }\n\n    public void setCountColumn(String countColumn) {\n        this.countColumn = countColumn;\n    }\n\n    public String toString() {\n        return \"Page{count=\" + this.count + \", pageNum=\" + this.pageNum + \", pageSize=\" + this.pageSize + \", startRow=\" + this.startRow + \", endRow=\" + this.endRow + \", total=\" + this.total + \", pages=\" + this.pages + \", reasonable=\" + this.reasonable + \", pageSizeZero=\" + this.pageSizeZero + \'}\' + super.toString();\n    }\n\n    public void close() {\n        PageHelper.clearPage();\n    }\n}\n```\n\n## 其他\n\n关于更多Mybatis-PageHelper配置及介绍可以查看下面网站：\n[https://gitee.com/free/Mybatis_PageHelper](https://gitee.com/free/Mybatis_PageHelper)\n[https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md](https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md)\n\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-06-22', 914, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (66, 'SpringBoot整合Mybatis-Plus', '>这篇文章介绍一个SpringBoot整合Mybatis-Plus，提供一个小的Demo供大家参考。\r\n\r\n已经很久没有写文章了，最近家里有点事刚刚处理完，顺便也趁机休息了一段时间。刚回到公司看了一下码云，发现本期码云封面人员就是Mybatis-Plus团队苞米豆的负责人，如下图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/66/1)\r\n\r\n忽然想到，正好之前别人跟我说过怎么不出一个SpringBoot整合Mybatis-Plus的，已经很久的事了，正好想起来，这次就弄一个整合的Demo。\r\n\r\n言归正传，新建一个项目。pom文件中加入Mybatis依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_mybatisplus</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_mybatisplus</name>\r\n	<description>springboot_mybatisplus</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>com.baomidou</groupId>\r\n			<artifactId>mybatisplus-spring-boot-starter</artifactId>\r\n			<version>1.0.5</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.baomidou</groupId>\r\n			<artifactId>mybatis-plus</artifactId>\r\n			<version>2.3</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mybatis.spring.boot</groupId>\r\n			<artifactId>mybatis-spring-boot-starter</artifactId>\r\n			<version>1.3.1</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>mysql</groupId>\r\n			<artifactId>mysql-connector-java</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件配置数据库配置和对应Mybatis-Plus实体信息，配置如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n##数据库url\r\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=root\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n##日志级别\r\nlogging.level.com.dalaoyang.dao.UserMapper=debug\r\n##mybatis-plus mapper xml 文件地址\r\nmybatis-plus.mapper-locations=classpath*:mapper/*Mapper.xml\r\n##mybatis-plus type-aliases 文件地址\r\nmybatis-plus.type-aliases-package=com.dalaoyang.entity\r\n```\r\n\r\n实体类User代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\npublic class User {\r\n    private int id;\r\n    private String user_name;\r\n    private String user_password;\r\n\r\n    public User() {\r\n    }\r\n\r\n    public User(String user_name, String user_password) {\r\n        this.user_name = user_name;\r\n        this.user_password = user_password;\r\n    }\r\n\r\n    public User(int id, String user_name, String user_password) {\r\n        this.id = id;\r\n        this.user_name = user_name;\r\n        this.user_password = user_password;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUser_name() {\r\n        return user_name;\r\n    }\r\n\r\n    public void setUser_name(String user_name) {\r\n        this.user_name = user_name;\r\n    }\r\n\r\n    public String getUser_password() {\r\n        return user_password;\r\n    }\r\n\r\n    public void setUser_password(String user_password) {\r\n        this.user_password = user_password;\r\n    }\r\n}\r\n```\r\n\r\n\r\n下面要说的都是需要注意的地方，新增一个MybatisPlus配置类，其中没有做过多的设置，只是设置了一下方言，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.baomidou.mybatisplus.plugins.PaginationInterceptor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@Configuration\r\npublic class MybatisPlusConfig {\r\n\r\n    @Bean\r\n    public PaginationInterceptor paginationInterceptor(){\r\n        PaginationInterceptor page = new PaginationInterceptor();\r\n        //设置方言类型\r\n        page.setDialectType(\"mysql\");\r\n        return page;\r\n    }\r\n}\r\n```\r\n\r\nUserMapper继承了MybatisPlus的BaseMapper，这里面列举一个普通的查询方法getUserList，完整代码如下：\r\n```\r\npackage com.dalaoyang.dao;\r\n\r\nimport com.baomidou.mybatisplus.mapper.BaseMapper;\r\nimport com.dalaoyang.entity.User;\r\nimport org.apache.ibatis.annotations.Mapper;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.dao\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@Mapper\r\npublic interface UserMapper extends BaseMapper<User> {\r\n    List<User> getUserList();\r\n\r\n}\r\n```\r\n\r\n新建一个UserMapper.xml，里面写getUserList对应sql，代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\">\r\n    <resultMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\r\n    <parameterMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\r\n\r\n    <select id=\"getUserList\" resultMap=\"user\">\r\n        SELECT  * FROM USER\r\n    </select>\r\n</mapper>\r\n```\r\n\r\n最后和往常一样，新建一个Controller进行测试，完整代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.baomidou.mybatisplus.mapper.EntityWrapper;\r\nimport com.baomidou.mybatisplus.plugins.Page;\r\nimport com.dalaoyang.dao.UserMapper;\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserMapper userDao;\r\n\r\n    //http://localhost:8888/getUserList\r\n    @GetMapping(\"getUserList\")\r\n    public List<User> getUserList(){\r\n        return userDao.getUserList();\r\n    }\r\n\r\n    //http://localhost:8888/getUserListByName?userName=xiaoli\r\n    //条件查询\r\n    @GetMapping(\"getUserListByName\")\r\n    public List<User> getUserListByName(String userName)\r\n    {\r\n        Map map = new HashMap();\r\n        map.put(\"user_name\", userName);\r\n        return userDao.selectByMap(map);\r\n    }\r\n\r\n    //http://localhost:8888/saveUser?userName=xiaoli&userPassword=111\r\n    //保存用户\r\n    @GetMapping(\"saveUser\")\r\n    public String saveUser(String userName,String userPassword)\r\n    {\r\n        User user = new User(userName,userPassword);\r\n        Integer index = userDao.insert(user);\r\n        if(index>0){\r\n            return \"新增用户成功。\";\r\n        }else{\r\n            return \"新增用户失败。\";\r\n        }\r\n    }\r\n\r\n    //http://localhost:8888/updateUser?id=5&userName=xiaoli&userPassword=111\r\n    //修改用户\r\n    @GetMapping(\"updateUser\")\r\n    public String updateUser(Integer id,String userName,String userPassword)\r\n    {\r\n        User user = new User(id,userName,userPassword);\r\n        Integer index = userDao.updateById(user);\r\n        if(index>0){\r\n            return \"修改用户成功，影响行数\"+index+\"行。\";\r\n        }else{\r\n            return \"修改用户失败，影响行数\"+index+\"行。\";\r\n        }\r\n    }\r\n\r\n\r\n    //http://localhost:8888/getUserById?userId=1\r\n    //根据Id查询User\r\n    @GetMapping(\"getUserById\")\r\n    public User getUserById(Integer userId)\r\n    {\r\n        return userDao.selectById(userId);\r\n    }\r\n\r\n    //http://localhost:8888/getUserListByPage?pageNumber=1&pageSize=2\r\n    //条件分页查询\r\n    @GetMapping(\"getUserListByPage\")\r\n    public List<User> getUserListByPage(Integer pageNumber,Integer pageSize)\r\n    {\r\n        Page<User> page =new Page<>(pageNumber,pageSize);\r\n        EntityWrapper<User> entityWrapper = new EntityWrapper<>();\r\n        entityWrapper.eq(\"user_name\", \"xiaoli\");\r\n        return userDao.selectPage(page,entityWrapper);\r\n    }\r\n\r\n}\r\n\r\n```\r\n**这里对上面代码稍作解释，其中包含了如下几个方法：   \r\n1.getUserList :这是普通的Mybatis查询的方法，没有用到Mybatis-Plus，这里不做过多解释。   \r\n2.getUserListByName：条件查询，根据名称查询用户列表，这里使用到了selectByMap方法，参数需要传一个Map，里面对应写好需要查询的字段名与对应查询值。   \r\n3.saveUser ：保存用户，这里使用的是insert方法，需要传一个实体对象，返回Integer值作为影响行数。      \r\n4.updateUser ：修改用户，这里使用的是updateByIdt方法，需要传一个实体对象，返回Integer值作为影响行数。\r\n5.getUserById ：根据Id查询实体对象，需要传用户Id。    \r\n6.getUserListByPage ：条件分页查询，使用的是selectPage方法，方法需要一个分页对象Page和一个条件对象EntityWrapper。Page放入页码和每页数量，EntityWrapper使用eq方法放入对应字段名和对应查询值。**\r\n\r\n\r\n这里只是举例说明几个方法，其中方法还有很多，更多Mybatis-Plus使用请查看官方文档:[http://baomidou.oschina.io/mybatis-plus-doc/#/?id=%E7%AE%80%E4%BB%8B](http://baomidou.oschina.io/mybatis-plus-doc/#/?id=%E7%AE%80%E4%BB%8B)\r\n\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\r\n\r\n# 关注作者公众号\r\n\r\n![dalaoyang_gongzhonghao.jpg](https://user-gold-cdn.xitu.io/2018/7/20/164b6a1f12fc00b6?w=430&h=430&f=jpeg&s=22599)', 'dalaoyang', '2018-07-20', 1137, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (67, 'SpringBoot使用JdbcTemplate', '## 前言\n>本文是对SpringBoot使用JdbcTemplate操作数据库的一个介绍，，提供一个小的Demo供大家参考。\n\n操作数据库的方式有很多，本文介绍使用SpringBoot结合JdbcTemplate。\n\n## 新建项目\n\n新建一个项目。pom文件中加入Jdbc依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_jdbc</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_jdbc</name>\n    <description>springboot_jdbc</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8888\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=123456\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n新建一个实体类User，其中需要注意的是，User类实现了RowMapper类，重写了mapRow方法，完整代码如下：\n```\npackage com.dalaoyang.entity;\n\n\nimport org.springframework.jdbc.core.RowMapper;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/25\n */\npublic class User implements RowMapper<User> {\n    private int id;\n    private String user_name;\n    private String pass_word;\n\n    public User(int id, String user_name, String pass_word) {\n        this.id = id;\n        this.user_name = user_name;\n        this.pass_word = pass_word;\n    }\n\n    public User() {\n    }\n\n    public User(String user_name, String pass_word) {\n        this.user_name = user_name;\n        this.pass_word = pass_word;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getPass_word() {\n        return pass_word;\n    }\n\n    public void setPass_word(String pass_word) {\n        this.pass_word = pass_word;\n    }\n\n    @Override\n    public User mapRow(ResultSet resultSet, int i) throws SQLException {\n        User user = new User();\n        user.setId(resultSet.getInt(\"id\"));\n        user.setUser_name(resultSet.getString(\"user_name\"));\n        user.setPass_word(resultSet.getString(\"pass_word\"));\n        return user;\n    }\n}\n```\n**常用CURD操作大致使用以下三个方法:    \n1.execute方法，用于直接执行SQL语句   \n2.update方法，用户新增修改删除操作   \n3.query方法，用于查询方法**\n\n本文和往常一样，用Controller进行测试，注入JdbcTemplate。完整代码如下，下面会对测试方法进行介绍：\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/25\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    //http://localhost:8888/createTable\n    @GetMapping(\"createTable\")\n    public String createTable(){\n        String sql = \"CREATE TABLE `user` (\\n\" +\n                \"  `id` int(11) NOT NULL AUTO_INCREMENT,\\n\" +\n                \"  `user_name` varchar(255) DEFAULT NULL,\\n\" +\n                \"  `pass_word` varchar(255) DEFAULT NULL,\\n\" +\n                \"  PRIMARY KEY (`id`)\\n\" +\n                \") ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\\n\" +\n                \"\\n\";\n        jdbcTemplate.execute(sql);\n        return \"创建User表成功\";\n    }\n\n    //http://localhost:8888/saveUserSql\n    @GetMapping(\"saveUserSql\")\n    public String saveUserSql(){\n        String sql = \"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (\'dalaoyang\',\'123\')\";\n        int rows= jdbcTemplate.update(sql);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/saveUser?userName=lisi&passWord=111\n    @GetMapping(\"saveUser\")\n    public String saveUser(String userName,String passWord){\n        int rows= jdbcTemplate.update(\"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (?,?)\",userName,passWord);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/updateUserPassword?id=1&passWord=111\n    @GetMapping(\"updateUserPassword\")\n    public String updateUserPassword(int id,String passWord){\n        int rows= jdbcTemplate.update(\"UPDATE USER SET PASS_WORD = ? WHERE ID = ?\",passWord,id);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/deleteUserById?id=1\n    @GetMapping(\"deleteUserById\")\n    public String deleteUserById(int id){\n        int rows= jdbcTemplate.update(\"DELETE FROM  USER  WHERE ID = ?\",id);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n\n    //http://localhost:8888/batchSaveUserSql\n    @GetMapping(\"batchSaveUserSql\")\n    public String batchSaveUserSql(){\n        String sql =\n                \"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (?,?)\" ;\n        List<Object[]> paramList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            String[] arr = new String[2];\n            arr[0] = \"zhangsan\"+i;\n            arr[1] = \"password\"+i;\n            paramList.add(arr);\n        }\n        jdbcTemplate.batchUpdate(sql,paramList);\n        return \"执行成功\";\n    }\n\n    //http://localhost:8888/getUserByUserName?userName=zhangsan0\n    @GetMapping(\"getUserByUserName\")\n    public List getUserByUserName(String userName){\n        String sql = \"SELECT * FROM USER WHERE USER_NAME = ?\";\n        //写法很多种\n        //下面列举两种写法，都可以实现\n        //List<User> list= jdbcTemplate.query(sql,new Object[]{userName}, new BeanPropertyRowMapper(User.class));\n        List<User> list= jdbcTemplate.query(sql,new User(),new Object[]{userName});\n        return list;\n    }\n\n    //http://localhost:8888/getMapById?id=1\n    @GetMapping(\"getMapById\")\n    public Map getMapById(Integer id){\n        String sql = \"SELECT * FROM USER WHERE ID = ?\";\n        Map map= jdbcTemplate.queryForMap(sql,id);\n        return map;\n    }\n\n    //http://localhost:8888/getUserById?id=1\n    @GetMapping(\"getUserById\")\n    public User getUserById(Integer id){\n        String sql = \"SELECT * FROM USER WHERE ID = ?\";\n        User user= jdbcTemplate.queryForObject(sql,new User(),new Object[]{id});\n        return user;\n    }\n\n}\n```\n\n## 测试方法介绍\n\n\n### 1.createTable方法\n使用execute方法创建User表\n### 2.saveUserSql方法\n使用update方法，传入参数sql语句，直接执行插入操作\n### 3.saveUser方法\n使用update方法，传入sql语句和对应字段值，进行插入操作\n### 4.updateUserPassword方法\n使用update方法，传入sql语句和对应字段值，进行修改操作\n### 5.deleteUserById方法\n使用update方法，传入sql语句和对应字段值，进行删除操作\n### 6.batchSaveUserSql方法\n使用batchUpdate方法，传入sql和参数集合，进行批量更新\n### 7.getUserByUserName方法\n使用query方法，传入sql，实体对象，查询参数，这里就用到了实体类重写的mapRow方法\n### 8.getMapById方法\n使用queryForMap方法，传入sql和参数，返回Map\n### 9.getUserById方法\n使用queryForObject方法，传入sql，实体对象，查询参数，返回User实体类，这里也用到了实体类重写的mapRow方法\n\n具体使用方法还有很多，请参考文档:   \n[https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n\n\n## 注意\n\n出现下图错误不要担心，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/67/1)\n\n出现这个错误是因为sql在参数问号的时候多写了引号造成的，这也是我在写demo的时候犯下的错误。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n', 'dalaoyang', '2018-07-25', 671, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (69, 'SpringBoot2使用WebFlux函数式编程', '>本文只是简单使用SpringBoot2使用WebFlux的函数式编程简单使用，后续会继续写关于Webflux相关的文章。\n\n\n最近一直在研究WebFlux，后续会陆续出一些相关的文章。\n\n首先看一下Srping官网上的一张图，对比一下SpringMvc和Spring WebFlux，如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/1)\n\n在查看一下WebFlux的官方文档:[https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux)，WebFlux提供了函数式编程，本文简单介绍一下WebFlux函数式编程简单使用。\n\n## 新建项目\n\n创建一个项目，pom文件中引入webflux依赖，完整pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot2_webflux</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot2_webflux</name>\n    <description>springboot2_webflux</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n首先试试引入WebFlux依赖之后，SpringMvc方式是否还能使用，新建一个HelloController，完整代码如下，执行后发现，是可以正常执行访问的，这其实就是我们所说的注解式编程。\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"hello\")\n    public String Hello(){\n        return \"Hello this is SpringWebFlux\";\n    }\n\n\n}\n```\n\n结果如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/2)\n\n接下来使用函数式编程，首先查阅一下官方文档，如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/3)\n\n我们需要创建一个HandlerFunction返回值为Mono，新建一个HiHandler，里面写一个方法Hi，完整代码如下：\n```\npackage com.dalaoyang.handler;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.core.publisher.Mono;\n\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.handler\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@Component\npublic class HiHandler {\n\n\n    public Mono<ServerResponse> Hi(ServerRequest request) {\n        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)\n                .body(BodyInserters.fromObject(\"Hi , this is SpringWebFlux\"));\n    }\n}\n```\n\n其中ServerResponse是相应的封装对象，下面是它的源码，其中包含了响应状态，响应头等等，代码如下：\n```\n\n\n\npackage org.springframework.web.reactive.function.server;\n\nimport java.net.URI;\nimport java.time.ZonedDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport org.reactivestreams.Publisher;\nimport org.springframework.core.ParameterizedTypeReference;\nimport org.springframework.http.CacheControl;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseCookie;\nimport org.springframework.http.codec.HttpMessageWriter;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.reactive.function.BodyInserter;\nimport org.springframework.web.reactive.result.view.ViewResolver;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\npublic interface ServerResponse {\n    HttpStatus statusCode();\n\n    HttpHeaders headers();\n\n    MultiValueMap<String, ResponseCookie> cookies();\n\n    Mono<Void> writeTo(ServerWebExchange var1, ServerResponse.Context var2);\n\n    static ServerResponse.BodyBuilder from(ServerResponse other) {\n        return new DefaultServerResponseBuilder(other);\n    }\n\n    static ServerResponse.BodyBuilder status(HttpStatus status) {\n        return new DefaultServerResponseBuilder(status);\n    }\n\n    static ServerResponse.BodyBuilder status(int status) {\n        return new DefaultServerResponseBuilder(status);\n    }\n\n    static ServerResponse.BodyBuilder ok() {\n        return status(HttpStatus.OK);\n    }\n\n    static ServerResponse.BodyBuilder created(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.CREATED);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder accepted() {\n        return status(HttpStatus.ACCEPTED);\n    }\n\n    static ServerResponse.HeadersBuilder<?> noContent() {\n        return status(HttpStatus.NO_CONTENT);\n    }\n\n    static ServerResponse.BodyBuilder seeOther(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.SEE_OTHER);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder temporaryRedirect(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.TEMPORARY_REDIRECT);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder permanentRedirect(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.PERMANENT_REDIRECT);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder badRequest() {\n        return status(HttpStatus.BAD_REQUEST);\n    }\n\n    static ServerResponse.HeadersBuilder<?> notFound() {\n        return status(HttpStatus.NOT_FOUND);\n    }\n\n    static ServerResponse.BodyBuilder unprocessableEntity() {\n        return status(HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    public interface Context {\n        List<HttpMessageWriter<?>> messageWriters();\n\n        List<ViewResolver> viewResolvers();\n    }\n\n    public interface BodyBuilder extends ServerResponse.HeadersBuilder<ServerResponse.BodyBuilder> {\n        ServerResponse.BodyBuilder contentLength(long var1);\n\n        ServerResponse.BodyBuilder contentType(MediaType var1);\n\n        ServerResponse.BodyBuilder hint(String var1, Object var2);\n\n        <T, P extends Publisher<T>> Mono<ServerResponse> body(P var1, Class<T> var2);\n\n        <T, P extends Publisher<T>> Mono<ServerResponse> body(P var1, ParameterizedTypeReference<T> var2);\n\n        Mono<ServerResponse> syncBody(Object var1);\n\n        Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> var1);\n\n        Mono<ServerResponse> render(String var1, Object... var2);\n\n        Mono<ServerResponse> render(String var1, Map<String, ?> var2);\n    }\n\n    public interface HeadersBuilder<B extends ServerResponse.HeadersBuilder<B>> {\n        B header(String var1, String... var2);\n\n        B headers(Consumer<HttpHeaders> var1);\n\n        B cookie(ResponseCookie var1);\n\n        B cookies(Consumer<MultiValueMap<String, ResponseCookie>> var1);\n\n        B allow(HttpMethod... var1);\n\n        B allow(Set<HttpMethod> var1);\n\n        B eTag(String var1);\n\n        B lastModified(ZonedDateTime var1);\n\n        B location(URI var1);\n\n        B cacheControl(CacheControl var1);\n\n        B varyBy(String... var1);\n\n        Mono<ServerResponse> build();\n\n        Mono<ServerResponse> build(Publisher<Void> var1);\n\n        Mono<ServerResponse> build(BiFunction<ServerWebExchange, ServerResponse.Context, Mono<Void>> var1);\n    }\n}\n```\n\n在回过头了看上面官方文档的图片，还需要配置一个路由来类似@RequestMapping的功能，通过RouterFunctions.route(RequestPredicate, HandlerFunction)提供了一个路由器函数默认实现，新建一个HiRouter，代码如下：\n```\npackage com.dalaoyang.router;\n\nimport com.dalaoyang.handler.HiHandler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.reactive.function.server.RequestPredicates;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.RouterFunctions;\nimport org.springframework.web.reactive.function.server.ServerResponse;\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.router\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@Configuration\npublic class HiRouter {\n    @Bean\n    public RouterFunction<ServerResponse> routeHi(HiHandler hiHandler) {\n        return RouterFunctions\n                .route(RequestPredicates.GET(\"/hi\")\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\n                        hiHandler::Hi);\n    }\n}\n```\n\n启动项目，通过控制台可以看到，两种方式的映射都被打印出来了，如图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/4)\n\n在浏览器访问，[http://localhost:8080/hi](http://localhost:8080/hi),结果如图所示:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/5)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-07-31', 822, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (70, 'SpringBoot应用War包形式部署到外部Tomcat', '>这一篇文章介绍SpringBoot应用修改默认打jar形式部署为打war包形式，部署到外部Tomcat。\r\n\r\nSpringBoot应用默认打包成为可执行jar模式让我们感觉到部署的便捷，接下来给大家介绍一下SpringBoot项目打War包形式部署到外部Tomcat。\r\n\r\n# 修改原有项目\r\n\r\n## 1.修改项目\r\n\r\n打开项目，修改pom文件：   \r\n1.项目中加入spring-boot-starter-web（如果是已经加入该依赖的项目可以忽略）和spring-boot-starter-tomcat依赖。\r\n2.packaging由jar修改为war。\r\n3.在build内加入finalName，这个是设置打war包名称，可以不设置使用默认的。\r\n\r\n完整pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_tomcat</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>war</packaging>\r\n\r\n    <name>springboot_tomcat</name>\r\n    <description>springboot_tomcat</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.15.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>springboot_tomcat</finalName>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n\r\n修改启动类，使其继承SpringBootServletInitializer类，重写configure方法，代码如下：\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.builder.SpringApplicationBuilder;\r\nimport org.springframework.boot.web.support.SpringBootServletInitializer;\r\n\r\n@SpringBootApplication\r\npublic class SpringbootTomcatApplication  extends SpringBootServletInitializer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootTomcatApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n        return application.sources(SpringbootTomcatApplication.class);\r\n    }\r\n}\r\n```\r\n\r\n新建一个Controller，作为测试，代码如下:\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @project springboot_learn\r\n * @package com.dalaoyang\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/8/1\r\n */\r\n@RestController\r\npublic class Controller  {\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(){\r\n        return \"Hello , dalaoyang \";\r\n    }\r\n}\r\n```\r\n\r\n\r\n启动项目，本地访问[http://localhost:8080/](http://localhost:8080/),如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/1)\r\n\r\n## 打包部署\r\n\r\n接下来我们只需要将项目打包部署到tomcat测试，本文以Idea打包为例，双击package，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/2)\r\n\r\n观看控制台，等待打包完成，如图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/3)\r\n\r\n将war包复制到tomcat的webapp目录下，运行tomcat，如图所示，tomcat启动成功（注意tomcat端口不要和目前启动端口冲突）。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/4)\r\n\r\n使用浏览器访问[http://localhost:8080/springboot_tomcat/](http://localhost:8080/springboot_tomcat/)，结果如图:\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/5)\r\n\r\n\r\n# 新建项目，直接以War形式。\r\n\r\n## 新建项目\r\n\r\n修改Packaging为War，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/6)\r\n\r\n依赖只加入一个Web依赖，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/7)\r\n\r\n一路next到底即可，然后打开项目发现，选择war模式后已经自动为我们集成了spring-boot-starter-tomcat依赖，而且已经为新建了一个ServletInitializer自动继承了SpringBootServletInitializer并且重写了configure，感谢我们强大的Ide，测试下去和上面的情况也是一样可以成功的。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\r\n\r\n# 关注作者公众号\r\n\r\n![dalaoyang_gongzhonghao.jpg](https://user-gold-cdn.xitu.io/2018/8/1/164f4ef48687b30a?w=430&h=430&f=jpeg&s=22599)', 'dalaoyang', '2018-08-01', 670, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (71, 'SpringBoot使用Jsp', '>本文是简单总结一下SpringBoot使用Jsp的Demo。\r\n\r\n# 前言\r\n\r\n在早期做项目的时候，JSP是我们经常使用的java服务器页面，其实就是一个简化servlet的设计，在本文开始之前，回顾一下jsp的几大对象，如图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/1)\r\n\r\n而在现在SpringBoot框架流行的时代，SpringBoot推荐的模版引擎也转变为了thymeleaf，本文来介绍一下SpringBoot使用Jsp页面。\r\n\r\n# 新建项目\r\n\r\n创建一个项目springboot_jsp，pom文件中加入tomcat-embed-jasper依赖以及jstl标签库的依赖，完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_jsp</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>war</packaging>\r\n\r\n    <name>springboot_jsp</name>\r\n    <description>springboot_jsp</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-jasper</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>jstl</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n# 创建jsp放置文件夹\r\n\r\n在src/main目录下创建webapp文件夹，为了迎合传统的结构，在webapp下创建WEB-INF文件夹，然后在新建的WEB-INF文件夹内创建jsp文件夹。（具体结构可以自行设计，无需按照这个demo来），目录结构如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/2)\r\n\r\n\r\n# 配置文件\r\n\r\n配置文件内配置刚刚新建的目录，以及jsp文件后缀，配置如下：\r\n```\r\nserver.port=8888\r\n\r\n\r\nspring.mvc.view.prefix=/WEB-INF/jsp/\r\nspring.mvc.view.suffix=.jsp\r\n```\r\n\r\n# 新建Controller\r\n创建一个IndexController，里面写入一个跳转方法，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/8/13\r\n */\r\n@Controller\r\npublic class IndexController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(Model model){\r\n        model.addAttribute(\"name\", \"dalaoyang\");\r\n        return \"index\";\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 创建一个jsp\r\n在src/main/webapp/WEB-INF/jsp下面新建一个index.jsp，代码如下：\r\n```\r\n\r\n<!DOCTYPE html>\r\n\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Hello</title>\r\n</head>\r\n<body>\r\nHello,${name}\r\n</body>\r\n</html>\r\n```\r\n\r\n# 运行测试\r\n启动项目，在浏览器访问[http://localhost:8888/](http://localhost:8888/),显示如下结果：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/3)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-08-13', 799, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (72, '使用Nginx部署静态网站', '>这篇文章将介绍如何利用Nginx部署静态网站。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/1)\r\n之前写过2篇有关Nginx的文章，一篇是[《利用nginx，腾讯云免费证书制作https》](https://www.jianshu.com/p/79ab223e5ab2)，另外一篇是[《linux安装nginx》](https://www.jianshu.com/p/eb02b293de25)，如果有需要可以看一下，这一篇文章介绍如何使用Nginx部署静态网站，需要在服务器部署静态网站的同学可以看一下。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 准备工作\r\n首先我们需要在本地或者服务器上安装Nginx，这时就用到了我之前的文章。\r\nLinux---[《linux安装nginx》](https://www.jianshu.com/p/eb02b293de25)\r\nWindows---官网下载个压缩包解压一下即可[官网传送门](http://nginx.org/en/download.html)\r\n\r\n# 配置Nginx主配置\r\n\r\n在安装目录下的conf目录下可以找到一个nginx.conf文件，打开这个文件。其中需要设置的内容主要就几项，即如下带有注释的地方，nginx.conf完整内容如下：\r\n\r\n```\r\n\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n    sendfile        on;\r\n    keepalive_timeout  65;\r\n    charset utf-8;        # 设置编码格式\r\n    \r\n    server {\r\n    listen 8081;             # 端口号\r\n    server_name _;           # 配置域名信息\r\n    root web/;               # 静态页面根目录\r\n    index index.html;\r\n    }\r\n}\r\n\r\n```\r\n\r\n由于只是做一个简单的映射，所以我将静态页面放到了nginx目录下，即如图位置，默认页面也设置为web目录下index.html文件，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/2)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/3)\r\n\r\nhtml页面为简单测试页面，内容很简单。\r\n\r\nindex.html\r\n```\r\n<html>\r\n\r\n<head>\r\n<title>index</title>\r\n</head>\r\n\r\n<body>\r\n<p>body</p>\r\n<p>title</p>\r\n<a href=\"edit.html\">跳转</a>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\nedit.html\r\n```\r\n<html>\r\n\r\n<head>\r\n<title>edit</title>\r\n</head>\r\n\r\n<body>\r\n<p>body</p>\r\n<p>title</p>\r\n<a href=\"index.html\">跳转</a>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n# 启动Nginx\r\n\r\n打开命令行，进入nginx目录，开启nginx\r\n```\r\nd:\r\n```\r\n```\r\ncd D:\\tool\\nginx-1.15.2\r\n```\r\n```\r\nstart nginx\r\n```\r\n\r\n# 浏览器访问测试\r\n\r\n在浏览器访问[http://localhost:8081/](http://localhost:8081/)，可以看到如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/4)\r\n\r\n\r\n# 总结\r\n\r\n到这里本篇文章就算结束了，其实主要Nginx部署静态网站就是将Nginx主配置文件配置好即可，过程很简单。', 'dalaoyang', '2018-08-14', 549, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (73, 'SpringCloud Gateway入门', '>本文是介绍一下SpringCloud Gateway简单路由转发使用。\r\n\r\n\r\n# SpringCloud Gateway简介\r\nSpringCloud是基于Spring Framework 5，Project Reactor和Spring Boot 2.0构建，目标是用于替代zuul。\r\n## 官方文档\r\n\r\n官方文档地址：[https://cloud.spring.io/spring-cloud-gateway/](https://cloud.spring.io/spring-cloud-gateway/)\r\n\r\n在官方文档上是这样介绍Spring Cloud Gateway的：\r\n\r\n**该项目提供了一个用于在Spring MVC之上构建API网关的库。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到API，并为他们提供横切关注点。）**\r\n\r\n\r\n\r\n# 入门案例\r\n\r\n接下来，介绍一下简单使用SpringCloud Gateway路由功能（本文使用SpringBoot2.0.0.RELEASE和SpringCloud Finchley.RC1版本）。\r\n\r\n## 创建项目\r\n\r\n新建一个项目，项目种加入SpringCloud Gateway依赖，完整pom如下:\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_gateway</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springcloud_gateway</name>\r\n    <description>springcloud_gateway</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.0.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Finchley.RC1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-gateway</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n## SpringBoot主程序\r\n\r\n### 在类中配置路由\r\n\r\n主程序中加入了一种配置路由的方法，利用@Bean的方式自定义RouteLocator。\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.gateway.route.RouteLocator;\r\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\n\r\n\r\n@SpringBootApplication\r\npublic class SpringcloudGatewayApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudGatewayApplication.class, args);\r\n    }\r\n\r\n\r\n\r\n    @Bean\r\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\r\n        return builder.routes()\r\n                .route(r -> r.path(\"/jianshu\")\r\n                        .uri(\"http://www.jianshu.com/u/128b6effde53\")\r\n                ).build();\r\n    }\r\n\r\n}\r\n```\r\n\r\n### 在配置文件中配置：\r\n```\r\nserver:\r\n  port: 8888\r\n\r\nspring:\r\n  application:\r\n    name: gateway-service\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: dalaoyang\r\n        uri: http://www.dalaoyang.cn/\r\n        predicates:\r\n          - Path=/dalaoyang/**\r\n      - id: juejin\r\n        uri: https://juejin.im/user/5aa50b96f265da23866f836e\r\n        predicates:\r\n          - Path=/juejin/**\r\n\r\n```\r\n\r\n\r\n# 运行测试\r\n到这里其实就配置完成了\r\n\r\n\r\n访问[http://localhost:8888/dalaoyang](http://localhost:8888/dalaoyang) 自动跳转到了[我的博客首页](https://www.dalaoyang.cn/)   \r\n\r\n\r\n访问[http://localhost:8888/jianshu](http://localhost:8888/jianshu) 自动跳转到了[我的简书首页](https://www.jianshu.com/u/128b6effde53) \r\n\r\n\r\n访问[http://localhost:8888/juejin](http://localhost:8888/juejin)   自动跳转到了[我的掘金首页](https://juejin.im/user/5aa50b96f265da23866f836e) \r\n \r\n源码下载：[大老杨源码](https://gitee.com/dalaoyang/springcloud_learn)\r\n', 'dalaoyang', '2018-08-24', 789, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (74, 'SpringBoot使用Mybatis-Generator', '>本文介绍如何将Maven和Mybatis-Generator配合使用。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/1)\r\n\r\n# 简介\r\n\r\nMybatis-Generator是Mybatis提供的一个便捷型插件，自动可以为项目生产对应的实体类，Mapper，dao层。  \r\n\r\n官网文档：[http://www.mybatis.org/generator/index.html](http://www.mybatis.org/generator/index.html)\r\n\r\n\r\n# 入门案例\r\n\r\n本文使用SpringBoot结合Mybatis-Generator插件使用，数据库Mysql。\r\n\r\n## 新建项目\r\n新建一个SpringBoot项目。\r\n\r\n### 依赖文件\r\n\r\n在项目pom文件中，引入Mybatis-Generator插件，并且引入Mybatis和Mysql依赖。完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_generator</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_generator</name>\r\n    <description>springboot_generator</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.15.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis.spring.boot</groupId>\r\n            <artifactId>mybatis-spring-boot-starter</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.mybatis.generator</groupId>\r\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\r\n                <version>1.3.2</version>\r\n                <executions>\r\n                    <execution>\r\n                        <id>mybatis-generator</id>\r\n                        <phase>deploy</phase>\r\n                        <goals>\r\n                            <goal>generate</goal>\r\n                        </goals>\r\n                    </execution>\r\n                </executions>\r\n                <configuration>\r\n                    <!-- Mybatis-Generator 工具配置文件的位置 -->\r\n                    <configurationFile>src/main/resources/mybatis-generator/generatorConfig.xml</configurationFile>\r\n                    <verbose>true</verbose>\r\n                    <overwrite>true</overwrite>\r\n                </configuration>\r\n                <dependencies>\r\n                    <dependency>\r\n                        <groupId>mysql</groupId>\r\n                        <artifactId>mysql-connector-java</artifactId>\r\n                        <version>5.1.46</version>\r\n                    </dependency>\r\n                    <dependency>\r\n                        <groupId>org.mybatis.generator</groupId>\r\n                        <artifactId>mybatis-generator-core</artifactId>\r\n                        <version>1.3.2</version>\r\n                    </dependency>\r\n                </dependencies>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <classifier>exec</classifier>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n### 配置Mybatis-Generator配置\r\n在pom文件中配置的Mybatis-Generator 工具配置文件的位置新建一个generatorConfig.xml，（本文案例配置的位置是src/main/resources/mybatis-generator/generatorConfig.xml），配置文件代码如下，具体配置需要自行修改至自己的项目：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE generatorConfiguration\r\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n<!-- 配置生成器 -->\r\n<generatorConfiguration>\r\n    <!--执行generator插件生成文件的命令： call mvn mybatis-generator:generate -e -->\r\n    <!-- 引入配置文件 -->\r\n    <properties resource=\"application.properties\"/>\r\n    <!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->\r\n    <!--<classPathEntry location=\"D:\\generator_mybatis\\mysql-connector-java-5.1.24-bin.jar\" /> -->\r\n\r\n    <!-- 一个数据库一个context -->\r\n    <!--defaultModelType=\"flat\" 大数据字段，不分表 -->\r\n    <context id=\"MysqlTables\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\r\n        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；\r\n        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->\r\n        <property name=\"autoDelimitKeywords\" value=\"true\" />\r\n        <!-- 生成的Java文件的编码 -->\r\n        <property name=\"javaFileEncoding\" value=\"utf-8\" />\r\n        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->\r\n        <property name=\"beginningDelimiter\" value=\"`\" />\r\n        <property name=\"endingDelimiter\" value=\"`\" />\r\n\r\n        <!-- 格式化java代码 -->\r\n        <property name=\"javaFormatter\" value=\"org.mybatis.generator.api.dom.DefaultJavaFormatter\"/>\r\n        <!-- 格式化XML代码 -->\r\n        <property name=\"xmlFormatter\" value=\"org.mybatis.generator.api.dom.DefaultXmlFormatter\"/>\r\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\" />\r\n\r\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\" />\r\n\r\n        <!-- 注释 -->\r\n        <commentGenerator >\r\n            <property name=\"suppressAllComments\" value=\"false\"/><!-- 是否取消注释 -->\r\n            <property name=\"suppressDate\" value=\"true\" /> <!-- 是否生成注释代时间戳-->\r\n        </commentGenerator>\r\n\r\n        <!-- jdbc连接 -->\r\n        <jdbcConnection driverClass=\"${spring.datasource.driver-class-name}\" connectionURL=\"${spring.datasource.url}\" userId=\"${spring.datasource.username}\" password=\"${spring.datasource.password}\" />\r\n        <!-- 类型转换 -->\r\n        <javaTypeResolver>\r\n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->\r\n            <property name=\"forceBigDecimals\" value=\"false\"/>\r\n        </javaTypeResolver>\r\n\r\n        <!-- 生成实体类地址 -->\r\n        <javaModelGenerator targetPackage=\"com.dalaoyang.entity\" targetProject=\"${mybatis.project}\" >\r\n            <property name=\"enableSubPackages\" value=\"false\"/>\r\n            <property name=\"trimStrings\" value=\"true\"/>\r\n        </javaModelGenerator>\r\n        <!-- 生成mapxml文件 -->\r\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"${mybatis.resources}\" >\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </sqlMapGenerator>\r\n        <!-- 生成mapxml对应client，也就是接口dao -->\r\n        <javaClientGenerator targetPackage=\"com.dalaoyang.dao\" targetProject=\"${mybatis.project}\" type=\"XMLMAPPER\" >\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaClientGenerator>\r\n        <!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件 -->\r\n        <table tableName=\"user\" enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\" selectByExampleQueryId=\"true\">\r\n            <property name=\"useActualColumnNames\" value=\"false\" />\r\n            <!-- 数据库表主键 -->\r\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\" />\r\n        </table>\r\n        <table tableName=\"book\" enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\" selectByExampleQueryId=\"true\">\r\n            <property name=\"useActualColumnNames\" value=\"false\" />\r\n            <!-- 数据库表主键 -->\r\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\" />\r\n        </table>\r\n    </context>\r\n</generatorConfiguration>\r\n```\r\n\r\n### 配置application.properties\r\n\r\n配置项目的application.properties，其中数据库信息，Mapper地址之前都有过介绍，具体SpringBoot-Mybatis配置可以参考：\r\n[《SpringBoot+Mybatis+MySql学习》](https://www.jianshu.com/p/8b545a537fd0)\r\n\r\n本文配置如下：\r\n```\r\n## mapper xml 文件地址\r\nmybatis.mapper-locations=classpath*:mapper/*Mapper.xml\r\n\r\n##数据库url\r\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=123456\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n#Mybatis Generator configuration\r\n#dao类和实体类的位置\r\nmybatis.project =src/main/java\r\n#mapper文件的位置\r\nmybatis.resources=src/main/resources\r\n```\r\n\r\n到这里其实配置就完成了，可以体验Mybatis-Generator插件的优点了，在右侧Maven处点击如图所示位置，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/2)\r\n\r\n点击完成后，可以看到Mapper，dao，实体类都已经创建好了，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/3)\r\n\r\n创建完成会给我生成几个默认的建当方法，如UserMapper代码如下：\r\n```\r\npackage com.dalaoyang.dao;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.apache.ibatis.annotations.Mapper;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserMapper {\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int deleteByPrimaryKey(Long id);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int insert(User record);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    User selectByPrimaryKey(Long id);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    List<User> selectAll();\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int updateByPrimaryKey(User record);\r\n}\r\n```\r\n\r\nUserMapper.xml代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\" >\r\n  <resultMap id=\"BaseResultMap\" type=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\" />\r\n    <result column=\"user_name\" property=\"userName\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"user_password\" property=\"userPassword\" jdbcType=\"VARCHAR\" />\r\n  </resultMap>\r\n  <delete id=\"deleteByPrimaryKey\" parameterType=\"java.lang.Long\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    delete from user\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </delete>\r\n  <insert id=\"insert\" parameterType=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    <selectKey resultType=\"java.lang.Long\" keyProperty=\"id\" order=\"AFTER\" >\r\n      SELECT LAST_INSERT_ID()\r\n    </selectKey>\r\n    insert into user (user_name, user_password)\r\n    values (#{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR})\r\n  </insert>\r\n  <update id=\"updateByPrimaryKey\" parameterType=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    update user\r\n    set user_name = #{userName,jdbcType=VARCHAR},\r\n      user_password = #{userPassword,jdbcType=VARCHAR}\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </update>\r\n  <select id=\"selectByPrimaryKey\" resultMap=\"BaseResultMap\" parameterType=\"java.lang.Long\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    select id, user_name, user_password\r\n    from user\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </select>\r\n  <select id=\"selectAll\" resultMap=\"BaseResultMap\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    select id, user_name, user_password\r\n    from user\r\n  </select>\r\n</mapper>\r\n```\r\n## 测试使用\r\n\r\n### 新增测试方法\r\n在UserMapper上加入注解@Mapper表明是持久化映射层，启动类上加入注解@RestController进行测试，这里简单调用一个查询所有的方法selectAll，启动类代码如下:\r\n```\r\n@SpringBootApplication\r\n@RestController\r\npublic class SpringbootGeneratorApplication {\r\n\r\n    @Autowired\r\n    private UserMapper userMapper;\r\n\r\n    @GetMapping(\"/findAll\")\r\n    public List<User> findAll(){\r\n        return userMapper.selectAll();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootGeneratorApplication.class, args);\r\n    }\r\n}\r\n```\r\n\r\n### 运行测试\r\n\r\n运行项目，浏览器访问[localhost:8080/findAll](localhost:8080/findAll\r\n)如图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/4)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-08', 822, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (75, 'SpringBoot使用AOP', '>本文介绍SpringBoot中使用Spring AOP。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/1)\r\n\r\n\r\n# 简介\r\n\r\n## AOP简介\r\nAOP可能对于广大开发者耳熟能详，它是Aspect Oriented Programming的缩写，翻译成中文就是：面向切面编程。这个可能是面试中经常提到的问题，同时它也是Spring框架中一个重大的特性，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果，对于我们开发中最常见的可能就是日志记录，事务处理，异常处理等等。\r\n\r\n# SpringBoot中使用AOP\r\n\r\n接下来介绍SpringBoot项目中如何运用AOP。\r\n\r\n## 新建项目\r\n\r\n新建一个SpringBoot项目，在pom文件中加入AOP依赖，完整代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_aop</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_aop</name>\r\n    <description>springboot_aop</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-aop</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n## 创建切面\r\n\r\n### 一 直接使用切面\r\n\r\n新建一个日志切面类，假设我们需要一个类来打印进入方法或方法执行后需要打印的日志。\r\n\r\n#### 新建一个切面类\r\n\r\n新建类LogAspect，完整代码如下：\r\n```\r\npackage com.dalaoyang.aspect;\r\n\r\nimport org.aspectj.lang.JoinPoint;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.springframework.stereotype.Component;\r\nimport org.aspectj.lang.annotation.*;\r\n\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n    @Pointcut(\"execution(public * com.dalaoyang.controller.*.*(..))\")\r\n    public void LogAspect(){}\r\n\r\n    @Before(\"LogAspect()\")\r\n    public void doBefore(JoinPoint joinPoint){\r\n        System.out.println(\"doBefore\");\r\n    }\r\n\r\n    @After(\"LogAspect()\")\r\n    public void doAfter(JoinPoint joinPoint){\r\n        System.out.println(\"doAfter\");\r\n    }\r\n\r\n    @AfterReturning(\"LogAspect()\")\r\n    public void doAfterReturning(JoinPoint joinPoint){\r\n        System.out.println(\"doAfterReturning\");\r\n    }\r\n\r\n    @AfterThrowing(\"LogAspect()\")\r\n    public void deAfterThrowing(JoinPoint joinPoint){\r\n        System.out.println(\"deAfterThrowing\");\r\n    }\r\n\r\n    @Around(\"LogAspect()\")\r\n    public Object deAround(ProceedingJoinPoint joinPoint) throws Throwable{\r\n        System.out.println(\"deAround\");\r\n        return joinPoint.proceed();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n其中：\r\n* @Aspect 表明是一个切面类\r\n* @Component 将当前类注入到Spring容器内\r\n* @Pointcut 切入点，其中execution用于使用切面的连接点。使用方法：execution(方法修饰符(可选)  返回类型  方法名  参数  异常模式(可选)) ，可以使用通配符匹配字符，*可以匹配任意字符。\r\n* @Before 在方法前执行\r\n* @After 在方法后执行\r\n* @AfterReturning 在方法执行后返回一个结果后执行\r\n* @AfterThrowing 在方法执行过程中抛出异常的时候执行\r\n* @Around 环绕通知，就是可以在执行前后都使用，这个方法参数必须为ProceedingJoinPoint，proceed()方法就是被切面的方法，上面四个方法可以使用JoinPoint，JoinPoint包含了类名，被切面的方法名，参数等信息。\r\n\r\n\r\n### 二 利用自定义注解使用AOP\r\n\r\n#### 新建自定义注解\r\n\r\n新建自定义注解，新建注解与新建接口类似，将interface改为@interface即可。\r\n```\r\npackage com.dalaoyang.annotation;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface DoneTime {\r\n    String param() default \"\";\r\n}\r\n\r\n```\r\n\r\n#### 创建自定义注解对应切面\r\n\r\n创建自定义注解对应切面，与上一中情况的切面类似，这里就不在赘述了，代码如下:\r\n```\r\npackage com.dalaoyang.aspect;\r\n\r\nimport com.dalaoyang.annotation.DoneTime;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Date;\r\n\r\n@Aspect\r\n@Component\r\npublic class DoneTimeAspect {\r\n\r\n    @Around(\"@annotation(doneTime)\")\r\n    public Object around(ProceedingJoinPoint joinPoint, DoneTime doneTime) throws Throwable {\r\n        System.out.println(\"方法开始时间是:\"+new Date());\r\n        Object o = joinPoint.proceed();\r\n        System.out.println(\"方法结束时间是:\"+new Date()) ;\r\n        return o;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n## 创建Controller测试\r\n\r\n创建一个IndexController进行测试，其实就是两个普通的Web请求方法，其中index使用了自定义注解，index2没有使用自定义注解，完整代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.annotation.DoneTime;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n\r\n@RestController\r\npublic class IndexController {\r\n\r\n    @GetMapping(\"/index\")\r\n    @DoneTime(param = \"IndexController\")\r\n    public String index(){\r\n        System.out.println(\"方法执行\");\r\n        return \"hello dalaoyang\";\r\n    }\r\n\r\n    @GetMapping(\"/index2\")\r\n    public String index2(){\r\n        System.out.println(\"方法2执行\");\r\n        return \"hello dalaoyang\";\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 运行测试\r\n\r\n启动项目，在浏览器访问[http://localhost:8080/index](http://localhost:8080/index)，控制台如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/2)\r\n\r\n在浏览器访问[http://localhost:8080/index2](http://localhost:8080/index2)，控制台如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/3)\r\n\r\n\r\n## 总结\r\n\r\n本文只是简单介绍一下SpringBoot使用Spring AOP，当然它可能还有其他使用方法，具体的情况需要根据我们实际情况来使用。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-09', 992, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (76, 'SpringBoot使用WebFlux响应式编程操作数据库', '>这一篇文章介绍SpringBoot使用WebFlux响应式编程操作MongoDb数据库。\r\n\r\n# 前言\r\n\r\n在之前一篇简单介绍了WebFlux响应式编程的操作，我们在来看一下下图，可以看到，在目前的Spring WebFlux还没有支持类似Mysql这样的关系型数据库，所以本文以MongoDb数据库为例。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/1)\r\n\r\n\r\n# SpringBoot使用WebFlux响应式编程操作数据库\r\n\r\n接下来介绍SpringBoot使用WebFlux响应式编程操作MongoDb数据库。\r\n\r\n\r\n## 新建项目\r\n\r\n### pom文件\r\n\r\n新建项目，在项目中加入webflux依赖和mongodb-reactive依赖，完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_mongodb2</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_mongodb2</name>\r\n    <description>springboot_mongodb2</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.5.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-webflux</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.projectreactor</groupId>\r\n            <artifactId>reactor-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n### 配置文件\r\n\r\n配置文件中配置mongodb数据库信息，之前文章有介绍，这里就不介绍了，配置文件代码如下:\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##mongo配置\r\nspring.data.mongodb.host=127.0.0.1\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=test\r\n```\r\n\r\n### 启动类\r\n启动类是默认生成的，没有做任何修改，代码如下：\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class SpringbootMongodb2Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootMongodb2Application.class, args);\r\n    }\r\n}\r\n```\r\n\r\n### 创建实体类\r\n\r\n新建一个实体类UserInfo，代码内容没有什么特殊的，这里就不做介绍了，实体类完整代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.annotation.Id;\r\n\r\n\r\npublic class UserInfo {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo(Long id, String username, String password) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo() {\r\n    }\r\n}\r\n\r\n``` \r\n\r\n\r\n### 数据操作层\r\n新建一个UserRepository，因为是响应式编程所以这里继承ReactiveMongoRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\r\n\r\npublic interface UserRepository extends ReactiveMongoRepository<UserInfo,Long> {\r\n}\r\n```\r\n\r\n### handler层\r\n\r\n新建一个UserHandler，其中分别创建了四个方法，分别是：   \r\n\r\n* saveUser:新增方法，利用request.bodyToMono获取POST请求的body对象。\r\n* deleteUser：删除方法，利用request.pathVariable获取请求路径的对应参数ID。\r\n* getUser：获取对象方法，利用request.pathVariable获取请求路径的对应参数ID。\r\n* listUser:获取对象列表方法，这里没有参数。\r\n\r\n完整代码如下：\r\n```\r\npackage com.dalaoyang.handler;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.reactive.function.server.ServerRequest;\r\nimport org.springframework.web.reactive.function.server.ServerResponse;\r\nimport reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport static org.springframework.http.MediaType.APPLICATION_JSON;\r\n\r\n\r\n@Component\r\npublic class UserHandler {\r\n\r\n    private final UserRepository repository;\r\n\r\n    public UserHandler(UserRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    //http://localhost:8888/saveUser\r\n    public Mono<ServerResponse> saveUser(ServerRequest request) {\r\n        Mono<UserInfo> user = request.bodyToMono(UserInfo.class);\r\n        return ServerResponse.ok().build(repository.insert(user).then());\r\n    }\r\n\r\n    //http://localhost:8888/deleteUser/1\r\n    public Mono<ServerResponse> deleteUser(ServerRequest request) {\r\n        Long userId = Long.valueOf(request.pathVariable(\"id\"));\r\n        return ServerResponse.ok().build(repository.deleteById(userId).then());\r\n    }\r\n\r\n    //http://localhost:8888/user/1\r\n    public Mono<ServerResponse> getUser(ServerRequest request) {\r\n        Long userId = Long.valueOf(request.pathVariable(\"id\"));\r\n        Mono<UserInfo> userInfo = repository.findById(userId);\r\n        return ServerResponse.ok().contentType(APPLICATION_JSON).body(userInfo, UserInfo.class);\r\n    }\r\n\r\n    //http://localhost:8888/listUser\r\n    public Mono<ServerResponse> listUser(ServerRequest request) {\r\n        Flux<UserInfo> userList = repository.findAll();\r\n        return ServerResponse.ok().contentType(APPLICATION_JSON).body(userList, UserInfo.class);\r\n    }\r\n\r\n\r\n}\r\n```\r\n\r\n### 配置路由\r\n\r\n在路由中分别配置刚刚写的4个方法路由跳转，完整代码如下：\r\n```\r\npackage com.dalaoyang.router;\r\n\r\nimport com.dalaoyang.handler.UserHandler;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.reactive.function.server.RequestPredicates;\r\nimport org.springframework.web.reactive.function.server.RouterFunction;\r\nimport org.springframework.web.reactive.function.server.RouterFunctions;\r\nimport org.springframework.web.reactive.function.server.ServerResponse;\r\n\r\n\r\n@Configuration\r\npublic class UserRouter {\r\n\r\n    @Bean\r\n    public RouterFunction<ServerResponse> routeCity(UserHandler userHandler) {\r\n        return RouterFunctions\r\n                .route(RequestPredicates.GET(\"/listUser\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::listUser)\r\n                .andRoute(RequestPredicates.GET(\"/user/{id}\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::getUser)\r\n                .andRoute(RequestPredicates.GET(\"/deleteUser/{id}\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::deleteUser)\r\n                .andRoute(RequestPredicates.POST(\"/saveUser\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::saveUser);\r\n    }\r\n}\r\n\r\n```\r\n\r\n到这一步完成，项目已经构建完成。\r\n\r\n## 运行测试\r\n\r\n### 启动Mongodb\r\n\r\n本文就不对如何安装以及启动MongoDb数据库进行介绍了，具体可以查看[菜鸟教程](http://www.runoob.com/mongodb/mongodb-window-install.html)，个人觉得这里已经介绍的很详细了，并且包含了各个系统的操作。\r\n\r\n### 启动项目\r\n\r\n运行刚刚的项目，这里以postman测试为例子，在postman内Post请求保存方法（[http://localhost:8888/saveUser](http://localhost:8888/saveUser)），如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/2)\r\n\r\n\r\n然后在请求查询用户方法（[http://localhost:8888/user/1](http://localhost:8888/user/1)），如图所示，证明刚刚已经保存成功，下方body处为返回数据：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/3)\r\n\r\n我们在多次请求新增用户方法，将Id分别修改为2，3，4，5并执行保存方法，这里就不一一截图，然后方法查询用户列表方法（[http://localhost:8888/listUser](http://localhost:8888/listUser)），如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/4)\r\n\r\n\r\n最后调用删除用户方法（[http://localhost:8888/deleteUser/1](http://localhost:8888/deleteUser/1)），这里以删除ID为1的用户为例，调用后在查看所有类别如图，用户ID为1的已经被删除了：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/5)\r\n\r\n\r\n# 总结\r\n\r\nSpringBoot使用WebFlux响应式编程操作Mongodb数据库这里已经简单整合完了，虽然和之前操作数据库有些不同，但是其实大致过程也都相似。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-14', 1297, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (77, 'Linux安装RabbitMQ', '>本文介绍Linux安装RabbitMQ简单步骤。\r\n\r\n**本文环境是在腾讯云服务器CentOS7.2搭建的，RabbitMQ 3.6.8， Erlang R16B03-1**\r\n\r\n# 1.安装需要插件\r\n```\r\nyum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel\r\n```\r\n\r\n\r\n# 2.安装erlang\r\n\r\n因为RabbitMQ需要Erlang的环境，所以需要先安装Erlang，CentOS7.2版本\r\n使用yum安装即可\r\n```\r\nyum install erlang\r\n```\r\n\r\n安装完成后可以检测是否安装成功，使用如下命令：\r\n```\r\nerl\r\n```\r\n\r\n如果安装成功，如下图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/77/1)\r\n\r\n进入Erlang后可以使用如下命令退出Erlang：\r\n```\r\nq().\r\n```\r\n\r\n# 3.安装RabbitMQ\r\n首先下载一个RabbitMQ，可以在本地下载上传到服务器，也可以直接下载，命令如下：\r\n```\r\nwget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.8/rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n然后使用如下命令：\r\n```\r\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\r\n```\r\n\r\n```\r\nyum install rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n```\r\nrpm -i --nodeps rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n启动RabbitMQ\r\n```\r\n/sbin/service rabbitmq-server start\r\n```\r\n\r\n创建用户admin\r\n```\r\nrabbitmqctl add_user admin admin\r\n```\r\n\r\n给用户admin授权\r\n```\r\nrabbitmqctl  set_permissions -p \"/\" admin \'.*\' \'.*\' \'.*\'\r\n```\r\n\r\n给用户admin赋予administrator角色\r\n```\r\nrabbitmqctl set_user_tags admin administrator \r\n```\r\n\r\n开启RabbitMQ控制台\r\n```\r\nrabbitmq-plugins enable rabbitmq_management\r\n```\r\n\r\n# 总结\r\n到这里就安装启动完成了，可以远程访问http://服务器外网ip:15672方法RabbitMQ控制台，记得需要开放服务器15672端口。', 'dalaoyang', '2018-10-14', 422, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (78, 'Linux安装Elasticsearch', '>本文介绍Linux环境如何安装Elasticsearch.\r\n\r\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，elasticsearch-5.4.2。\r\n\r\n# 1 安装JDK\r\n网上教程很多，也可以参考本人教程之前写的[Linux安装JDK](https://www.jianshu.com/p/4418cb3bda31)\r\n\r\n# 2 安装Elasticsearch\r\n\r\n# 2.1 创建elasticsearch目录\r\n``` \r\ncd /usr/local/\r\n```\r\n```\r\nmkdir tool\r\n```\r\n```\r\ncd tool\r\n```\r\n```\r\nmkdir elasticsearch\r\n```\r\n```\r\ncd elasticsearch\r\n```\r\n## 2.1 下载Elasticsearch\r\n### 2.1.1 在刚刚创建好的文件夹内下载Elasticsearch(以下简称es)\r\n```\r\ncurl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.2.tar.gz\r\n```\r\n\r\n### 2.1.2 解压es包\r\n```\r\ntar -xvf elasticsearch-5.4.2.tar.gz\r\n```\r\n\r\n### 2.1.3 进入es/bin包\r\n```\r\ncd elasticsearch-5.4.2/bin\r\n```\r\n\r\n### 2.1.4 启动es\r\n```\r\n./elasticsearch\r\n```\r\n\r\n## 2.2 解决问题\r\n\r\n### 2.2.1 问题一\r\n\r\n直接启动，遇到如图问题，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/1)\r\n\r\n这个问题是由于内存分配不够造成的，修改适合本机的内存，修改文件config/jvm.options\r\n```\r\nvi ../config/jvm.options\r\n```\r\n修改如下位置\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/2)\r\n\r\n由于我的服务器内存较小，修改为512m，具体可以根据情况修改，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/3)\r\n\r\n修改后在次启动：\r\n```\r\n./elasticsearch\r\n```\r\n\r\n### 2.2.2 问题二\r\n\r\n出现如下错误：\r\n```\r\norg.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root\r\n```\r\n\r\n如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/4)\r\n\r\n这个问题很明显，不允许使用root用户启动，那么我们新建一个es用户，并赋予权限：\r\n\r\n添加es用户\r\n```\r\nuseradd es\r\n```\r\n\r\n添加es用户密码\r\n```\r\npasswd es\r\n```\r\n\r\n将文件夹elasticsearch-5.4.2赋予es权限\r\n```\r\nchown -R es:es /usr/local/tool/elasticsearch/elasticsearch-5.4.2\r\n```\r\n\r\n切换为es用户\r\n```\r\nsu es\r\n```\r\n\r\n再次启动es\r\n```\r\n./elasticsearch\r\n```\r\n\r\n这次启动成功了，我们在使用一个窗口登录root用户，输入命令：\r\n```\r\ncurl -X GET http://localhost:9200\r\n```\r\n\r\n如图所示，可以成功访问\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/5)\r\n\r\n\r\n### 2.2.3 问题三\r\n在浏览器访问[http://118.24.242.170:9200/](http://118.24.242.170:9200/)拒绝访问（118.24.242.170为服务器ip）\r\n\r\n使用root用户，打开elasticsearch.yml文件，如下：\r\n```\r\nvi /usr/local/tool/elasticsearch/elasticsearch-5.4.2/config/elasticsearch.yml\r\n```\r\n\r\n文件内增加如下代码\r\n```\r\nnetwork.host: 0.0.0.0\r\n```\r\n\r\n使用es用户启动，发现又出现了错误如下，得到错误信息如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/6)\r\n\r\n使用root用户打开如下文件：\r\n```\r\nvim /etc/sysctl.conf\r\n```\r\n\r\n添加如下配置：\r\n```\r\nvm.max_map_count = 655360\r\n```\r\n\r\n使配置生效\r\n```\r\n/sbin/sysctl -p\r\n```\r\n\r\n然后使用es用户启动Elasticsearch，这次可以成功启动了，如果需要后台启动的话，在启动命令后加&，如下所示:\r\n```\r\n./elasticsearch &\r\n```\r\n\r\n# 总结\r\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-17', 862, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (79, 'Linux安装Kibana', '>本文介绍Linux环境如何安装Kibana.\r\n\r\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，kibana-5.4.2。\r\n\r\n# 1 安装JDK\r\n网上教程很多，也可以参考本人教程之前写的[Linux安装JDK](https://www.jianshu.com/p/4418cb3bda31)\r\n\r\n# 2 安装Kibana\r\n\r\n## 2.1 下载Kibana\r\n这一步需要下载与Elasticsearch版本相同的kibana，本人是从本地上传到服务器上的，使用的是5.4.2。\r\n\r\n上传命令\r\n```\r\nscp /Users/dalaoyang/downloads/kibana-5.4.2-linux-x86_64.tar.gz root@ip:/usr/local/tool/kibana-5.4.2-linux-x86_64.tar.gz\r\n```\r\n\r\n## 2.2 解压Kibana\r\n在服务器上传目录解压kibana：\r\n```\r\ntar -zxvf kibana-5.4.2-linux-x86_64.tar.gz\r\n```\r\n\r\n## 2.3 修改配置\r\n修改config/kibana.yml文件配置：\r\n```\r\nvim kibana.yml\r\n```\r\n\r\nkibana.yml常见配置项\r\n```\r\n# pingElasticsearch超时时间\r\nelasticsearch.pingTimeout\r\n# 读取Elasticsearch数据超时时间\r\nelasticsearch.requestTimeout  \r\n#Elasticsearch主机地址\r\nelasticsearch.url: \"http://ip:9200\" \r\n# 允许远程访问\r\nserver.host: \"0.0.0.0\" \r\n# Elasticsearch用户名 这里其实就是我在服务器启动Elasticsearch的用户名\r\nelasticsearch.username: \"es\"  \r\n# Elasticsearch鉴权密码 这里其实就是我在服务器启动Elasticsearch的密码\r\nelasticsearch.password: \"es\"  \r\n```\r\n\r\n根据情况增加配置即可，本人测试使用的是如下：\r\n```\r\n#Elasticsearch主机地址\r\nelasticsearch.url: \"http://ip:9200\" \r\n# 允许远程访问\r\nserver.host: \"0.0.0.0\" \r\n# Elasticsearch用户名 这里其实就是我在服务器启动Elasticsearch的用户名\r\nelasticsearch.username: \"es\"  \r\n# Elasticsearch鉴权密码 这里其实就是我在服务器启动Elasticsearch的密码\r\nelasticsearch.password: \"es\"  \r\n```\r\n\r\n## 2.4 启动Kibana\r\n\r\n直接启动，进入bin目录后\r\n```\r\n./kibana\r\n```\r\n\r\n后台启动，进入bin目录后\r\n```\r\nnohup ./kibana &\r\n```\r\n\r\n## 2.5 访问管理页面\r\n\r\n访问http://ip:5601，可以看到如下页面：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/79/1)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/79/2)\r\n\r\n接下来就可以对Kibana进行使用了。\r\n\r\n# 总结\r\n\r\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-19', 502, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (80, 'Linux安装Logstash', '>本文介绍Linux环境如何安装Logstash\n\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，Logstash-5.4.2。\n\n## 1.下载Logstash\n官网下载地址：[https://www.elastic.co/downloads/logstash](http://https://www.elastic.co/downloads/logstash)\n\n本人是从本地上传到服务器上的，使用的是5.4.2。\n```\nscp /Users/dalaoyang/downloads/logstash-5.4.2.tar.gz root@ip:/usr/local/tool/logstash-5.4.2.tar.gz\n```\n\n## 2.解压Logstash\n进入上传目录解压Logstash\n```\ntar -zxvf logstash-5.4.2.tar.gz\n```\n\n## 3.测试Logstash\n进入logstash-5.4.2目录\n```\ncd logstash-5.4.2\n```\n这里简单举2个例子测试\n\n### 3.1 简单输出到控制台\n```\nbin/logstash -e \'input { stdin { } } output { stdout {} }\'\n```\n\n如图所示，即为启动成功\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/80/1)\n\n输入dalaoyang,如下所示\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/80/2)\n\n\n### 读取文件输出到Redis\n```\ninput {\n    file {\n        type => \"test_log\"\n        path => [\"/Users/dalaoyang/logs/my.log\"]\n        start_position => \"beginning\"\n        sincedb_path => \"/dev/null\"\n    }\n}\nfilter {\n  if [type] == \'test_log\' {\n     multiline {\n       pattern => \"^%{TIMESTAMP_ISO8601} \"\n       negate => true\n       what => previous\n     }\n  }\n}\noutput {\n    if [type] == \"test_log\" {\n        redis {\n            host => \"ip\"\n            port => \"6379\"\n            data_type => \"list\"\n            key => \"log\"\n            #redis密码\n            password => \"123456\"\n        }\n      #  stdout {codec => rubydebug}\n    }\n}\n```\n\n启动命令 bin/logstash -f 上面配置的文件位置\n比如\n```\nbin/logstash -f logstash.conf\n```\n\n\n安装多行解析插件 logstash-filter-multiline\n```\nlogstash-plugin install logstash-filter-multiline\n```\n\n# 总结\n\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-19', 684, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (81, 'Vue项目History模式404问题解决', '>本文主要解决Vue项目使用History模式发布到服务器Nginx上刷新页面404问题。（由于每个项目的情况都不尽相同，本方案已经完美解决本在所使用项目，具体情况可能还需要修改。）\r\n\r\n# 1.项目背景分析\r\n\r\n本人是Java后台开发，Vue其实使用也没有多久，只能说简单了解。发现问题的时候其实也一头雾水，第一思想就是百度看别人的思路。\r\n\r\n## 1.1 查看项目打包后文件\r\n\r\n首先看看项目打包后文件内容，看看有没有什么能突破的地方。文件目录如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/81/1)\r\n\r\n打眼一看可以发现，主要的可能就是这个index.html文件，内容如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>系统管理</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"logo.png\">\r\n<link rel=\"shortcut icon\" href=\"logo.png\"></head>\r\n\r\n<body>\r\n  <div id=\"app\"></div>\r\n<script type=\"text/javascript\" src=\"manifest.js?89b5083667173048a500\"></script>\r\n  <script type=\"text/javascript\" src=\"vendor.js?9eae337435ee1b63d5cd\"></script>\r\n  <script type=\"text/javascript\" src=\"index.js?38915745c7ed8b9143db\"></script>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n**1.在之前百度的时候看到了一个信息，就是引入js文件使用scr的时候，如果前面带/是绝对路径，在思考是不是这个问题。**\r\n\r\n**2.百度的时候大部分信息都是说修改Nginx配置文件。**\r\n\r\n# 2.问题解决\r\n\r\n既然大致思路都有了，那么就开始尝试去解决一下。\r\n\r\n## 2.1 更改Vue打包配置文件\r\n\r\n修改webpack.config.js文件，这个是Vue-cli打包文件配置，使其打包后让index.html文件引用路径为绝对路径。webpack.config.js内容如下（每个项目打包配置均不同，这个配置仅仅是我使用的项目）：\r\n```\r\nconst resolve = require(\'path\').resolve\r\nconst webpack = require(\'webpack\')\r\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\')\r\nconst url = require(\'url\')\r\nconst publicPath = \'/\'\r\n\r\nmodule.exports = (options = {}) => ({\r\n  entry: {\r\n    vendor: \'./src/vendor\',\r\n    index: \'./src/main.js\'\r\n  },\r\n  output: {\r\n    path: resolve(__dirname, \'dist\'),\r\n    filename: options.dev ? \'[name].js\' : \'[name].js?[chunkhash]\',\r\n    chunkFilename: \'[id].js?[chunkhash]\',\r\n    publicPath: options.dev ? \'/assets/\' : publicPath\r\n  },\r\n  module: {\r\n    rules: [{\r\n        test: /\\.vue$/,\r\n        use: [\'vue-loader\']\r\n      },\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\'babel-loader\'],\r\n        exclude: /node_modules/\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        use: [\'style-loader\', \'css-loader\', \'postcss-loader\']\r\n      },\r\n      {\r\n        test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\r\n        use: [{\r\n          loader: \'url-loader\',\r\n          options: {\r\n            limit: 10000\r\n          }\r\n        }]\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      names: [\'vendor\', \'manifest\']\r\n    }),\r\n    new HtmlWebpackPlugin({\r\n      template: \'src/index.html\',\r\n      favicon: \'src/logo.png\' \r\n    })\r\n  ],\r\n  resolve: {\r\n    alias: {\r\n      \'~\': resolve(__dirname, \'src\')\r\n    },\r\n    extensions: [\'.js\', \'.vue\', \'.json\', \'.css\']\r\n  },\r\n  devServer: {\r\n    host: \'127.0.0.1\',\r\n    port: 8010,\r\n    proxy: {\r\n      \'/api/\': {\r\n        target: \'http://127.0.0.1:8080\',\r\n        changeOrigin: true,\r\n        pathRewrite: {\r\n          \'^/api\': \'\'\r\n        }\r\n      }\r\n    },\r\n    historyApiFallback: {\r\n      index: url.parse(options.dev ? \'/assets/\' : publicPath).pathname\r\n    }\r\n  },\r\n  devtool: options.dev ? \'#eval-source-map\' : \'#source-map\'\r\n})\r\n\r\n```\r\n\r\n再次打包后，查看index.html，内容如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>系统管理</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"logo.png\">\r\n<link rel=\"shortcut icon\" href=\"/logo.png\"></head>\r\n\r\n<body>\r\n  <div id=\"app\"></div>\r\n<script type=\"text/javascript\" src=\"/manifest.js?f7d4b2121bc37e262877\"></script><script type=\"text/javascript\" src=\"/vendor.js?9eae337435ee1b63d5cd\"></script><script type=\"text/javascript\" src=\"/index.js?51954197166dd938b54e\"></script></body>\r\n\r\n</html>\r\n```\r\n\r\n从index.html可以看出已经变成了绝对路径。\r\n\r\n\r\n## 2.2 修改Nginx配置\r\n\r\n修改nginx.conf配置文件，代码如下：\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n\r\n    sendfile        on;\r\n\r\n    keepalive_timeout  65;\r\n\r\n    server {\r\n      listen       80;\r\n      server_name  localhost;\r\n      ## 指向vue打包后文件位置\r\n      root /opt/nginx/dist/;\r\n\r\n      ## 拦截根请求，例如http://localhost\r\n      location / {\r\n            try_files $uri $uri/ /index.html;\r\n      }\r\n\r\n      ## 拦截带有tms-monitor的请求，例如http://localhost/tms-monitor/admin\r\n      location ^~/tms-monitor{\r\n            if (!-e $request_filename) {\r\n                          rewrite ^/(.*) /index.html last;\r\n                          break;\r\n            }\r\n      }\r\n\r\n      #error_page   500 502 503 504  /50x.html;\r\n      location = /50x.html {\r\n          root   html;\r\n      }\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 3.总结\r\n\r\n上述配置完成后，打包Vue项目，重启Nginx再次刷新就不会在有404的现象了。（再次申明：以上只是针对本人所在的项目，不一定使用所有情况。）', 'dalaoyang', '2018-10-30', 386, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (82, 'ELK日志分析方案', '>针对公司项目微服务化，随着项目及服务器的不断增多，决定采用ELK（Elasticsearch+Logstash+Kibana）日志分析平台进行微服务日志分析。\n\n# 1.ELK整体方案\n\n## 1.1 ELK架构图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/82/1)\n\n\n## 1.2 ELK工作流程\n\n1.在微服务服务器上部署Logstash，作为Shipper的角色，对微服务日志文件数据进行数据采集，将采集到的数据输出到Redis消息队列。\n\n2.在另外一台服务器上部署Logstash，作为Indexer的角色，从Redis消息队列中读取数据（可以对数据进行处理），输出到Elasticsearch-Master主节点。\n\n3.Elasticsearch-Master主节点内部与副节点同步数据。（Elasticsearch集群建议3个服务以上奇数）\n\n4.Kibana部署一台服务器内，读取Elasticsearch集群数据，展示Web查询页面，提供数据展示。\n\n\n# 2.消息队列选型\n\n## 2.1 Redis\n在我这个最终方案中，选择了使用Redis作为消息队列进行缓冲，降低Elasticsearch压力，起到削峰作用，主要原因还是由于公司考虑成本问题，日志收集也是只针对我们单个项目组来使用，所以选择了公司现在就已经有的Redis集群进行复用。\n\n## 2.2 Kafka\n最初方案中，在消息队列上选择的是Kafka，毕竟Kafka天生就是做为消息队列的，具体二者的毕竟在这里我就不多说了，百度上一大堆。\n\n\n# 3.安装\n\n这里就不在这里写出来了，提供三个地址仅供参考：\n\n[Linux安装Logstash](https://www.jianshu.com/p/474a83476147)   \n[Linux安装Kibana](https://www.jianshu.com/p/d5fd38bfb0bb)   \n[Linux安装Elasticsearch](https://www.jianshu.com/p/1bf398735dd4)\n\n\n# 4.Logstash配置\n\n## 4.1 log2redis\n\n从日志文件读取到redis\n```\n#从日志文件读取数据\n#file{}\n#type 日志类型\n#path 日志位置\n#            可以直接读取文件（a.log）\n#            可以所有后缀为log的日志（*.log）\n#            读取文件夹下所有文件（路径）\n#start_position 文件读取开始位置 （beginning）\n#sincedb_path 从什么位置读取（设置为/dev/null自动从开始位置读取）\ninput {\n     file {\n        type => \"log\"\n        path => [\"/root/logs/info.log\"]\n        start_position => \"beginning\"\n        sincedb_path => \"/dev/null\"\n     }\n}\n#根据时间戳分隔日志\n#grok 区分日志中得字段\nfilter {\n     multiline {\n       pattern => \"^%{TIMESTAMP_ISO8601} \"\n       negate => true\n       what => previous\n     }\n     #定义数据的格式\n     grok {\n       match => { \"message\" => \"%{DATA:datetime} - %{DATA:logLevel} - %{DATA:serviceName} - %{DATA:ip} - %{DATA:pid} - %{DATA:thread} - %{DATA-msg}\"}\n     }\n}\n#输出数据到Redis\n#host Redis主机地址\n#port Redis端口\n#db Redis数据库编号\n#data_type Redis数据类型\n#key Redis的key\n#password Redis密码\noutput {\n    redis {\n        host => \"ip\"\n        port => \"6379\"\n        db => \"6\"\n        data_type => \"list\"\n        password => \"password\"\n        key => \"test_log\"\n    }\n}\n```\n\n## 4.2 redis2es\n\n从redis读取到es\n```\n#从redis内读取数据\n#host Redis主机ip\n#port Redis端口\n#data_type Redis数据类型\n#batch_count\n#password Redis密码\n#key Redis读取Key\ninput {\n    redis {\n        host => \"ip\"\n        port => \"6379\"\n        db => \"6\"\n        data_type => \"list\"\n        password => \"password\"\n        key => \"test_log\"\n    }\n}\n#数据的输出我们指向了es集群\n#hosts Elasticsearch主机地址\n#index Elasticsearch索引名称\noutput {\n  elasticsearch {\n        hosts => \"ip:9200\"\n        index => \"logs-%{+YYYY.MM.dd}\"\n  }\n}\n```\n\n# 5 其他\n\n其他剩下的就是Es集群和Kibana了，这两个没什么特别值得注意的地方，上网随便搜，一大堆文章。\n\n\n**以上仅仅代表本人项目使用方案，不一定完美适合所有场景，仅供参考。**', 'dalaoyang', '2018-11-01', 810, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (83, 'Jenkins部署码云SpringBoot项目', '>本文介绍jenkins如何从gitee上clone项目，然后使用maven打包并后台启动。\r\n\r\n\r\n\r\n# 1.Jenkins介绍\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/1)\r\n\r\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 **（以上介绍来源于百度百科）**\r\n\r\n其实通俗来说，Jenkins就是一个自动化部署项目的工具，帮我省去重复的运维工作。\r\n\r\n# 2.环境准备\r\n\r\n本文需要如下几个工具：\r\n\r\n* JDK\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/2)\r\n\r\n* Git\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/3)\r\n\r\n* Maven\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/4)\r\n\r\n以上三种就不在这里介绍安装了，这里我贴出我的环境变量配置仅供参考：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/5)\r\n\r\n* Jenkins\r\n\r\n我的Jenkins是使用如下方式安装:\r\n```\r\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\r\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\r\nsudo yum install jenkins\r\n```\r\n\r\n启动\r\n```\r\nservice jenkins start\r\n```\r\n\r\n然后访问http://${ip}/8080，可以看到jenkins那个小老头，根据自行配置安装插件，其中密码在这里\r\n\r\n```\r\nvi /var/lib/jenkins/secrets/initialAdminPassword\r\n```\r\n\r\n以上都在网上有很多，我在博客中也写过，就不在这里废话太多了。\r\n\r\n# 3.Jenkins工具插件配置\r\n\r\n## 3.1 插件配置\r\n\r\n个人建议，Jenkins第一次进入推荐安装的插件就默认安装就行，省的还需要后续自己安装，当然，如果自己安装的话需要Maven和Git插件。\r\n\r\n## 3.2 工具配置\r\n\r\n* JDK\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/6)\r\n* Git\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/7)\r\n\r\n* Maven\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/8)\r\n\r\n这里就可以用到上面环境准备时需要的截图，这里我也摸索了很久才配置完成。\r\n\r\n# 4.配置项目\r\n\r\n## 4.1 构建自由风格的项目\r\n\r\n新建项目，选择构建自由风格的项目，给项目起个名字，然后点击Ok。\r\n\r\n## 4.2 配置参数化构建过程\r\n\r\n这里我用到了几个参数，因为可能有时需要提前准备好参数在进行构建，如下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/9)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/10)\r\n\r\n* jar_path :本意是准备项目打包后的jar位置，其实这里是Jenkins工作空间\r\n* spring_profile：这个是读取配置文件前缀，比如dev，test，prod\r\n* jar_name：jar包名称\r\n* project_name：项目名称\r\n\r\n\r\n## 4.3 Git配置\r\n\r\n用Git进行将项目Clone下来，配置自己的用户密码，Repository URL配置git地址（这里提供的地址是私密项目，项目没什么特别的，就是简单SpringBoot项目，不用尝试了，用自己项目就可以）\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/11)\r\n\r\n## 4.4 配置Build\r\n\r\n这里选择执行Shell，内容如下：\r\n```\r\nmvn clean install -Dmaven.test.skip=true\r\necho $spring_profile $jar_path $jar_name\r\ncd /usr/local/shell/\r\n./stop.sh $jar_name\r\necho \"Execute shell Finish\"\r\n./startup.sh $spring_profile $jar_path $jar_name $project_name\r\n```\r\n\r\n如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/12)\r\n\r\n在上面执行的Shell里面还用到了两个Shell，分别是stop.sh，实质就是找到jar执行的pid，然后kill，具体内容如下：\r\n```\r\njar_name=${1}\r\necho \"Stopping\" ${jar_name}\r\npid=`ps -ef | grep ${jar_name} | grep -v grep | awk \'{print $2}\'`\r\nif [ -n \"$pid\" ]\r\nthen\r\n   echo \"kill -9 的pid:\" $pid\r\n   kill -9 $pid\r\nfi\r\n```\r\n\r\nstartup.sh内容如下，具体可以根据情况修改:\r\n```\r\nspring_profile=${1}\r\njar_path=${2}\r\njar_name=${3}\r\nproject_name=${4}\r\ncd ${jar_path}/${project_name}/target/\r\necho ${jar_path}/${project_name}/target/\r\necho nohup java -jar ${jar_name} &\r\nBUILD_ID=dontKillMe nohup java -jar ${jar_name} --spring.profiles.active=${spring_profile} &\r\n```\r\n\r\n# 5 测试运行\r\n\r\n## 5.1 运行\r\n\r\n点击运行后，如图所示，刚刚预配置的参数都可以看到并可以修改，这里我们用默认配置好的就可以。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/13)\r\n\r\n然后点击运行就可以，当时遇到了一个插曲，我的Maven是安装成功的，但是Jenkins内无法使用，报错mvn：command not found，这里我解决的方式是将mvn命令也指向/usr/bin/mvn，如下：\r\n```\r\nln -s /usr/local/apache-maven-3.5.4/bin/mvn /usr/bin/mvn\r\n```\r\n\r\n访问效果其实就是我的博客，如图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/14)\r\n\r\n# 6 总结\r\n\r\n总体过程坑其实还是很多的，毕竟没有使用过，但是没有什么特别棘手的问题，总是出现不同的问题，有需要可以与我一起交流学习。', 'dalaoyang', '2018-11-06', 683, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (84, 'Jenkins部署码云SpringBoot项目到远程服务器', '>本文是上一篇文章的后续，上一篇只是利用Jenkins部署项目到本地，并启动，本文是将项目部署到远程服务器并执行。\r\n\r\n\r\n# 1.环境准备\r\n\r\n## 1.1 安装插件\r\n\r\n上一篇文章已经介绍了需要安装的应用及插件，这一篇还需要2个插件，分别是如下插件：\r\n\r\n* 	Git Parameter Plug-In ：这个插件用于获取git上信息，如分支和标签\r\n* 	Publish Over SSH ：这个插件用于将本地文件发送到远程服务器\r\n\r\n\r\n## 1.2 环境配置\r\n\r\n这里需要在 系统管理->系统设置->Publish over SSH配置远程部署的服务器，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/1)\r\n\r\n其中参数配置如下：\r\n\r\n* Passphrase :远程服务器密码\r\n* Name  :这个就是给远程连接起个名\r\n* Hostname :远程服务器地址\r\n* Username :远程服务器用户名\r\n* Remote Directory :上传文件路径\r\n\r\n都配置完成后可以点击下面Test Configuration进行测试，如果提示Success则证明配置成功。\r\n\r\n# 2.项目配置\r\n\r\n这里大致分为四个部分\r\n\r\n## 2.1 参数\r\n\r\n首先是参数，基本上和上一篇差不多，新增了几个，有一个和之前的不一样，使用的Git Parameter，这里选择的分支（branch），如下图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/2)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/3)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/4)\r\n\r\n## 2.2 Git\r\n\r\ngit没什么好说的，和之前一样，见下图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/5)\r\n## 2.3 Build Environment\r\n\r\n这里配置了要传到对应服务器的东西，以及需要使用的脚本，见下图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/6)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/7)\r\n\r\nExec command脚本代码如下，这里也没什么好说的，进入对应目录，将脚本赋予权限，然后执行。\r\n```\r\ncd ${jar_path}/${project_name}/;\r\nchmod 777 start_${project_name}.sh;\r\n./start_${project_name}.sh ${jar_path} ${jar_name} ${spring_profile} ${check_url} ${project_name} ${jdk_path}\r\n```\r\n## 2.4 Build\r\n\r\n这里就是将项目打包，然后把服务器上shell脚本复制到打包后文件夹，代码如下：\r\n```\r\nmvn clean install -Dmaven.test.skip=true;\r\ncp /usr/local/shell/start_jar.sh start_${project_name}.sh;\r\n```\r\n\r\n如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/8)\r\n\r\n# 3.测试运行\r\n\r\n运行前，展示一下远程上传的脚本，脚本内容并非本人自己写的，借鉴了其他组的脚本：\r\n```\r\n#!/bin/bash\r\n\r\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\r\nexport BUILD_ID=dontKillMe\r\n\r\njar_path=${1}\r\njar_name=${2}\r\nspring_profile=${3}\r\ncheck_url=${4}\r\nproject_name=${5}\r\njdk_path=${6}\r\n\r\nif  [ ! -n \"${jar_path}\" ] ;then\r\n    echo \"参数 1. jar_path 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${jar_name}\" ] ;then\r\n    echo \"参数 2. jar_name 为空\"\r\n    exit 1\r\nfi\r\n\r\nif  [ ! -n \"${spring_profile}\" ] ;then\r\n    echo \"参数 3. spring_profile 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${check_url}\" ] ;then\r\n    echo \"参数 4. check_url 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${project_name}\" ] ;then\r\n    echo \"参数 5. project_name 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${jdk_path}\" ] ;then\r\n    echo \"参数 6. jdk_path 为空\"\r\n    exit 1\r\nfi\r\n\r\n#Jenkins中编译好的jar位置\r\ndeploy_path=${jar_path}/${project_name}/\r\n\r\n#服务检查\r\ncheck_attempts=20\r\ncheck_timeout=6\r\n\r\n#进入工作目录，log会打在该目录下\r\ncd ${deploy_path}\r\n\r\necho \'deploy_path\' ${deploy_path}\r\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\r\npid=$(cat ${deploy_path}/pid)\r\n\r\n#杀掉以前可能启动的项目进程\r\nkill -9 ${pid}\r\n\r\n#启动jar，指定SpringBoot的profiles为test，后台启动\r\nnohup ${jdk_path} -jar -Xms256m -Xmx256m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./logs -Dspring.profiles.active=${spring_profile} ${deploy_path}/${jar_name} >/dev/null &\r\n\r\n#将进程ID存入到pid文件中\r\necho $! > ${deploy_path}/pid\r\n\r\n#服务启动检测\r\nonline=false\r\necho \"检测服务启动状态\"\r\nfor (( i=1; i<=${check_attempts}; i++ ))\r\ndo\r\n  code=`curl -sL --connect-timeout 20 --max-time 30 -w \"%{http_code}\\\\n\" \"${check_url}\" -o /dev/null`\r\n  echo \"服务检测返回结果：$code\"\r\n  if [ \"${code}\" = \"200\" ]; then\r\n    echo \"已检测到服务：${check_url}\"\r\n    sleep 10\r\n    online=true\r\n    break\r\n  else\r\n    echo \"未检测到服务，等待 ${check_timeout} 秒后重试\"\r\n    sleep ${check_timeout}\r\n  fi\r\ndone\r\nif $online; then\r\n  echo \"服务检查结束，服务启动正常\"\r\n  exit 0\r\nelse\r\n  echo \"服务检查结束，服务启动失败\"\r\n  exit 1\r\nfi\r\n\r\n```\r\n\r\n在jenkins部署项目，如下图，对应参数，分支只有一个master。这里的测试地址我选择的是项目首页，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/9)\r\n\r\n点击Build按钮后，等待处理即可，可能由于两个服务器间传输文件比较慢的原因相对时间不是很快。执行结束后见下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/10)\r\n然后访问[http://47.98.109.195:8888/](http://47.98.109.195:8888/)可以看到下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/11)\r\n\r\n\r\n\r\n# 4.总结\r\n\r\n总体感觉jenkins使用就是一个熟悉了就感觉没那么难了，个人感觉这个工具就是需要慢慢熟悉，一开始是最难入手的。', 'dalaoyang', '2018-11-07', 652, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (85, 'about', '<h1>关于本人</h1>\r\n							<p>90后码农，性别男，爱好小仙女。</p>\r\n							<p>猫奴一枚。同时也是一个养猪↑大户。</p>\r\n							<p>曾经帮一个100斤的仙女成功增重接近30斤。</p>\r\n							<p>家里有一只大肥猫，特别粘人的大肥猫。</p>\r\n							<p>休息有时看看书，有时玩玩吃鸡。</p>\r\n							<p>梦想是写一本书。</p>\r\n							<br/><br/>\r\n\r\n							<h2>已读书籍：</h2>\r\n							<p>《Spring Cloud与Docker微服务架构实战》</p>\r\n							<p>《Spring Cloud微服务实战》</p>\r\n							<p>《深入理解Spring Cloud 与微服务构建》</p>\r\n							<p>《腾讯传》</p>\r\n							<p>《ELK Stack 权威指南》</p>\r\n							<p>《深入实践Spring Boot》</p>\r\n							<p>《SpringBoot揭秘 快速构建微服务体系》</p>\r\n							<p>《RocketMQ实战与源码解析》</p>\r\n							<p>《如何高效学习》</p>\r\n\r\n<p>《SpringCloud微服务全栈分析与案例解析》</p>\r\n<p>《重新定义SpringCloud实战》</p>\r\n     \r\n<p>《Jenkins权威指南》</p>\r\n<p>《Docker技术入门与实践》</p>\r\n<p>《分布式消息中间件实践》</p>\r\n							<br/><br/>\r\n\r\n                                                        <h2>正在阅读书籍：</h2>\r\n                                                        <p>《亿级流量网站架构核心技术》</p>\r\n                                                        <p>《深入理解JAVA虚拟机》</p>\r\n                                                       \r\n                                                        <p>《码出高效》</p>\r\n<p>《深入理解Kafka：核心设计与实践原理》</p>\r\n<p>《RabbitMQ实战指南》</p>\r\n                                                        <br/><br/>\r\n\r\n							<h2>近期钻研重心：</h2>\r\n							<p>Docker</p>\r\n<p>Redis</p><p>RabbitMQ</p><p>RocketMQ</p><p>Kafka</p>\r\n							<br/><br/>\r\n\r\n                                                        <hr>\r\n\r\n							<h2>网站使用技术介绍：</h2>\r\n							<p>SpringBoot 1.5.9</p>\r\n							<p>Mybatis 1.3.1</p>\r\n							<p>Nginx 1.13.7</p>\r\n							<p>Mysql</p>\r\n							<p>Thymeleaf</p>\r\n							<p>Spring Cache</p>\r\n							<p>Bootstrap</p>\r\n							<p>JQuery</p>\r\n\r\n\r\n							<br/><br/>\r\n							<h2>更新历史：</h2>\r\n                                                        <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2019-06-02</p>\r\n							    <p>新增google统计</p>\r\n							    <p>新增sitemap定时任务</p>\r\n							</div>\r\n                                                        <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2019-05-14</p>\r\n							    <p>去掉畅言一切功能，以后在也不用了，恶心。</p>\r\n							    <p>留言改为gitalk。</p>\r\n							</div>\r\n                                                       <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-11-16</p>\r\n							    <p>内部系统优化。</p>\r\n							</div>\r\n                                                       <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-11-08</p>\r\n							    <p>about页面新增阅读书籍部分。</p>\r\n							</div>\r\n							<div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-05-31</p>\r\n							    <p>删除即时聊天插件。</p>\r\n							</div>\r\n							<div>\r\n								<p><i class=\"fa fa-clock-o\"></i>2018-06-01</p>\r\n								<p>新增缓存。</p>\r\n							</div>\r\n							<div>\r\n								<p><i class=\"fa fa-clock-o\"></i>2018-06-13</p>\r\n								<p>修改文章详情页样式。</p>\r\n							</div>\r\n							<br/><br/>', 'dalaoyang', '2018-11-08', 5, 'Y', '1', 'N');
INSERT INTO `ARTICLE_INFO` VALUES (86, 'Linux生成私钥和公钥免密连接', '>本文介绍Linux系统生成私钥和公钥进行免密连接，内容比较简单，阅读需要3分钟。\r\n\r\n\r\n# 1.大致流程\r\n\r\n有时需要从服务器A免密连接到服务器B，这时需要在服务器A生成私钥和公钥，大致过程其实就2步。\r\n\r\n## 1.1 在服务器A生成公钥和私钥\r\n在服务器A上输入如下命令：\r\n```\r\nssh-keygen -t rsa\r\n```\r\n\r\n过程中按三次回车，执行结束如下图:\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/86/1)\r\n\r\n然后我们进入/root/.ssh/文件夹，查看文件夹的内容，如下所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/86/2)\r\n\r\n其中 id_rsa为私钥 id_rsa.pub为公钥，接下来打开id_rsa.pub，将内容复制。\r\n## 1.2 在服务器B配置服务器A生成的公钥\r\n\r\n打开服务器B，将刚刚在服务器A内复制的内容追加到/root/.ssh/authorized_keys内，到这里没有特殊情况就配置成功了。\r\n\r\n## 1.3 意外情况\r\n\r\n可能设置完成后还是无法免密登录，那么可以远程连接时加入-vvv在登录时打印日志信息，如下\r\n```\r\nssh root@47.98.109.195 -vvv\r\n```\r\n\r\n在配置的时候遇到过权限不足，在服务器B上将authorized_keys赋予权限\r\n\r\nchmod 700 /root/.ssh/authorized_keys\r\n\r\n# 2 总结\r\n\r\n大致过程很简单，也没遇到什么神奇的坑，主要用于结合jenkins免密登录发布jar。', 'dalaoyang', '2018-11-08', 238, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (87, 'Linux下使用GoAccess监控Nginx访问日志', '>本文介绍Nginx使用GoAccess查看Nginx访问日志。\r\n\r\n最近在看极客时间-《Nginx核心知识一百讲》的视频，了解到GoAccess监控工具，所以最近对这个工具研究了一下，故写此文章。\r\n\r\n# 1.GoAccess简介\r\n\r\nGoAccess是一个开源的实时网络日志分析器和交互式查看器，可以在Linux系统或通过浏览器的终端中运行。它为需要动态可视化服务器报告的系统管理员提供快速且有价值的HTTP统计信息。\r\n\r\n官网地址：[https://goaccess.io/](https://goaccess.io/)\r\n\r\n官网首页：\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/1)\r\n\r\n特征页（使用谷歌浏览器翻译），感觉这里的翻译大致都可以理解，我就不一条一条写出来了。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/2)\r\n\r\n# 2.安装GoAccess\r\n\r\n官方文档下载地址：[https://goaccess.io/download](https://goaccess.io/download)\r\n\r\n如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/3)\r\n\r\n首先安装GoAccess依赖，已经安装请忽略。\r\n\r\nncurses-devel：\r\n\r\n```\r\nyum install ncurses-devel\r\n```\r\n\r\ntokyocabinet-devel：\r\n```\r\nyum install tokyocabinet-devel\r\n```\r\n\r\nopenssl-devel：\r\n```\r\nyum install openssl-devel\r\n```\r\n\r\ngeoip-devel：\r\n```\r\nyum install GeoIP-devel.x86_64\r\n```\r\n\r\n然后就跟着官网步骤来就可以了，如下：\r\n下载GoAccess\r\n```\r\nwget https://tar.goaccess.io/goaccess-1.2.tar.gz\r\n```\r\n解压\r\n```\r\ntar -xzvf goaccess-1.2.tar.gz\r\n```\r\n进入目录\r\n```\r\ncd goaccess-1.2 /\r\n```\r\n生成 Makefile，为下一步做准备\r\n```\r\n./configure --enable-utf8 --enable-geoip = legacy\r\n```\r\n编译\r\n```\r\nmake\r\n```\r\n安装\r\n```\r\nmake install\r\n```\r\n\r\n# 3.使用\r\n\r\n这里参考陶辉在课程中使用的命令，如下\r\n```\r\ngoaccess /opt/nginx/logs/access.log -o /opt/nginx/goaccess/report.html --real-time-html --time-format=\'%H:%M:%S\' --date-format=\'%d/%b/%Y\' --log-format=COMBINED \r\n```\r\n\r\n其中/opt/nginx/logs/access.log为Nginx日志位置，/opt/nginx/goaccess/report.html为生成页面位置，COMBINED指定默认文件格式，real-time-html实时html。\r\n\r\n在Nginx中对应server内加入如下配置：\r\n``` \r\nlocation /report.html {\r\n       alias /opt/nginx/goaccess/report.html;\r\n}\r\n```\r\n\r\n重启Nginx，访问localhost:8080/report.html可以看到如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/4)\r\n\r\n\r\n# 4.总结\r\n\r\n工具含有的功能很强大，可以结合所在场景进行实时分析。', 'dalaoyang', '2018-11-09', 405, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (88, 'Linux安装RocketMQ', '>本文介绍Linux安装RocketMQ。\r\n\r\n\r\n# 1.RocketMQ简介\r\n\r\nRocketMQ是阿里巴巴中间件开发的分布式消息系统，曾经经历过很多阿里巴巴大型项目的实际检验。在去年已经正式捐献给Apache开源基金会，成为孵化项目。今年正式升级成为了apache的顶级项目。\r\n\r\nRocketMQ官网地址为：[http://rocketmq.apache.org/](http://rocketmq.apache.org/)，感兴趣的可以多多查看官网文档。\r\n\r\n# 2.准备工作\r\n\r\n## 2.1 安装环境\r\n\r\n本文所安装的RocketMQ为4.2.0版本，Linux系统版本为CentOS 7.2，安装目录为/usr/local/software/。\r\n\r\n## 2.2 准备工具\r\n\r\n### 1.Java\r\n\r\nRocketMQ是使用Java开发的，所以需要在Linux系统内安装Java环境。\r\n\r\n### 2.Maven\r\n\r\n项目下载下来之后需要使用Maven编译，所以需要提前安装。\r\n\r\n# 2.安装RocketMQ\r\n\r\n步骤大致分为如下几步：\r\n\r\n## 2.1 下载RocketMQ\r\n\r\n```\r\nwget https://github.com/apache/rocketmq/archive/rocketmq-all-4.2.0.tar.gz\r\n```\r\n\r\n## 2.2 解压文件\r\n\r\n```\r\ntar -zxvf rocketmq-all-4.2.0.tar.gz\r\n```\r\n\r\n## 2.3 编译项目\r\n\r\n```\r\nmvn -Prelease-all -DskipTests clean install -U\r\n```\r\n\r\n## 2.4 进入启动目录\r\n\r\n```\r\ncd /usr/local/software/rocketmq-rocketmq-all-4.2.0/distribution/target/apache-rocketmq/bin\r\n```\r\n\r\n其实这一步可以省略，可以在环境变量配置rocketmq全局变量，编辑/etc/profile加入如下代码：\r\n\r\n```\r\nexport rocketmq=/usr/local/software/rocketmq-rocketmq-all-4.2.0/distribution/target/apache-rocketmq\r\nexport PATH=$PATH:$rocketmq/bin\r\n```\r\n\r\n修改后不要忘记使用如下命令刷新配置：\r\n\r\n```\r\nsource /etc/profile\r\n```\r\n\r\n## 2.5 启动Nameserver，其中/usr/local/logs/rocketmqlogs/mqnamesrv.log为RocketMQ日志文件\r\n\r\n```\r\nnohup sh mqnamesrv >/usr/local/logs/rocketmqlogs/mqnamesrv.log 2>&1 &\r\n```\r\n\r\n## 2.6 启动Broker\r\n\r\n```\r\nnohup sh mqbroker -n localhost:9876 >/usr/local/logs/rocketmqlogs/broker.log 2>&1 &\r\n```\r\n\r\n# 3.安装问题\r\n\r\n在本人安装过程中只遇到了一个问题，就是内存分配不够，修改runserver.sh和runbroker.sh两个文件的如下位置：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/1)\r\n\r\n\r\n# 4.可视化管理页面安装\r\n\r\n可视化页面可以到GitHub上下载，下载完成后进入如图所示位置：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/2)\r\n\r\n使用命令编译，如下\r\n\r\n```\r\nmvn clean package -Dmaven.test.skip=true\r\n```\r\n\r\n然后会生成rocketmq-console-ng-1.0.0.jar，直接运行即可，启动后监控页面如图所示\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/3)\r\n\r\n\r\n# 5.总结\r\n\r\n以上安装都是经过本人亲测可用的，安装过程还是比较简单的，没有太多问题。', 'dalaoyang', '2018-12-23', 284, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (89, 'Linux安装Kafka', '>本文介绍Linux安装Kafka。\r\n\r\n\r\n# 1.Kafka简介\r\n\r\nKafka也是开源与Apache开源基金会的项目，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/89/1)\r\n\r\n在百度百科是这样介绍的：\r\n\r\n**Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。**\r\n\r\nKafka官网地址为：[http://kafka.apache.org/](http://kafka.apache.org/)，感兴趣的可以多多查看官网文档。\r\n\r\n# 2.准备工作\r\n\r\n## 2.1 安装环境\r\n\r\n本文所安装的Kafka为2.10版本，Linux系统版本为CentOS 7.2，使用Zookeeper是Kafka自带的，安装目录为/usr/local/software/。\r\n\r\n## 2.2 准备工具\r\n\r\n### 1.Java\r\n\r\nKafka是依赖Java环境运行，所以需要在Linux系统内安装Java环境。\r\n\r\n\r\n# 2.安装Kafka\r\n\r\n步骤大致分为如下几步：\r\n\r\n## 2.1 下载Kafka\r\n\r\n```\r\nwget http://labfile.oss.aliyuncs.com/courses/859/kafka_2.10-0.10.2.1.tgz\r\n```\r\n\r\n## 2.2 解压Kafka\r\n\r\n```\r\ntar -zxvf kafka_2.10-0.10.2.1.tgz \r\n```\r\n\r\n## 2.3 进入配置文件目录\r\n\r\n```\r\ncd /usr/local/software/kafka_2.10-0.10.2.1/config\r\n```\r\n\r\n## 2.4 修改配置文件server.properties，添加下面内容：\r\n\r\n```\r\nbroker.id=0\r\nport=9092 #端口号\r\nhost.name=172.30.0.9 #服务器IP地址，修改为自己的服务器IP\r\nlog.dirs=/usr/local/logs/kafka #日志存放路径，上面创建的目录\r\nzookeeper.connect=localhost:2181 #zookeeper地址和端口，单机配置部署，localhost:2181\r\n```\r\n\r\n## 2.5 编写启动脚本\r\n\r\n```\r\nvi kafkastart.sh\r\n```\r\n\r\n```\r\n#启动zookeeper\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/zookeeper-server-start.sh /usr/local/software/kafka_2.10-0.10.2.1/config/zookeeper.properties &\r\n#等3秒后执行\r\nsleep 3 \r\n#启动kafka\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/kafka-server-start.sh /usr/local/software/kafka_2.10-0.10.2.1/config/server.properties &\r\n```\r\n\r\n## 2.6 编写关闭脚本 \r\n\r\n```\r\nvi kafkastop.sh\r\n```\r\n\r\n```\r\n#关闭zookeeper\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/zookeeper-server-stop.sh /usr/local/software/kafka_2.10-0.10.2.1/config/zookeeper.properties &\r\n#等3秒后执行\r\nsleep 3 \r\n#关闭kafka\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/kafka-server-stop.sh /usr/local/software/kafka_2.10-0.10.2.1/config/server.properties &\r\n```\r\n\r\n## 2.7 启动脚本，关闭脚本赋予权限\r\n\r\n```\r\nchmod 777 kafkastart.sh\r\n```\r\n\r\n```\r\nchmod 777 kafkastop.sh\r\n```\r\n\r\n# 3.安装问题\r\n\r\n安装Kafka过程中没有遇到太大的问题，一路输入就通过了。\r\n\r\n\r\n# 4.可视化管理页面安装\r\n\r\nkafka官网地址：[https://github.com/linkedin/kafka-monitor](https://github.com/linkedin/kafka-monitor)，运行比较简单，只是一个可执行jar（KafkaOffsetMonitor-assembly-0.2.1.jar）。\r\n\r\n## 4.1 编写启动脚本\r\n\r\n```\r\njava -Xms128M -Xmx128M -Xss1024K -XX:PermSize=128m -XX:MaxPermSize=128m -cp KafkaOffsetMonitor-assembly-0.2.1.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk localhost:2181 --port 8787 --refresh 10.seconds --retain 7.days 1>/usr/local/software/kafka-monitor/stdout.log 2>/usr/local/software/kafka-monitor/stderr.log &\r\n```\r\n\r\n# 5.总结\r\n\r\n以上安装都是经过本人亲测可用的，安装过程还是比较简单。', 'dalaoyang', '2018-12-23', 231, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (90, 'Nginx实现负载均衡', '>本篇文章介绍Nginx实现负载均衡，本文使用Nginx和两个SpringBoot简单Web应用实现。\n\n# 1.准备工作。\n\n结合本文场景，需要安装Nginx和Java环境（运行SpringBoot项目）。\n\n**1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。**\n\n**1.2 由于只是测试，SpringBoot只是映射了根路径，端口分别是10001和10002，分别返回demo1和demo2字符串作为区分。**\n\n# 2.Nginx负载均衡的集中方式介绍\n\n## 2.1 轮询\n\n轮询方式是Nginx负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，如下配置后轮训10001服务和10002服务。\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001;\n       server    localhost:10002;\n}\n```\n\n## 2.2 权重\n\n指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后10002服务的访问比率会是10001服务的二倍。\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.3 iphash\n\n每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务，如下配置（ip_hash可以和weight配合使用）。\n\n```\nupstream  dalaoyang-server {\n       ip_hash; \n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.4 最少连接\n\n将请求分配到连接数最少的服务上。\n\n```\nupstream  dalaoyang-server {\n       least_conn;\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.5 fair\n\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n       fair;  \n}\n```\n\n# 3.Nginx配置\n\n\n以轮训为例，如下是nginx.conf完整代码。\n\n```\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n   upstream  dalaoyang-server {\n       server    localhost:10001;\n       server    localhost:10002;\n   }\n\n   server {\n       listen       10000;\n       server_name  localhost;\n\n       location / {\n        proxy_pass http://dalaoyang-server;\n        proxy_redirect default;\n      }\n\n    }\n\n}\n```\n\n# 4.测试\n\n重启nginx，第一次访问[http://localhost:10000](http://localhost:10000)如图所示，\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-d1db4fc6f35b5738?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在次访问如图所示\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-2589e3e1aa9412bc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果要修改负载均衡算法修改对应upstream模块即可。', 'dalaoyang', '2018-12-29', 275, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (91, 'Nginx实现动静分离', '>本文利用Nginx实现简单动静分离，本文使用Nginx和一个SpringBoot简单Web应用实现。\r\n\r\n\r\n# 1.准备工作。\r\n\r\n结合本文场景，需要安装Nginx和Java环境（运行SpringBoot项目）。\r\n\r\n1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。\r\n\r\n1.2 本文SpringBoot使用了Thymeleaf模板，项目端口号为8888。\r\n\r\n1.3 在本地/Users/dalaoyang/Downloads/static文件内存放了jquery.js\r\n\r\n# 2.什么是动静分离？\r\n\r\n在弄清动静分离之前，我们要先明白什么是动，什么是静。\r\n\r\n在Web开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指HTML，JavaScript，CSS，img等文件。\r\n\r\n一般来说，都需要将动态资源和静态资源分开，将静态资源部署在Nginx上，当一个请求来的时候，如果是静态资源的请求，就直接到nginx配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。\r\n\r\n# 3.项目配置\r\n\r\n修改SpringBoot应用启动类，做简单跳转，使访问根路径可以跳转到index.html，如下代码所示。\r\n\r\n```\r\n@SpringBootApplication\r\n@Controller\r\npublic class DemoApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(DemoApplication.class, args);\r\n	}\r\n\r\n	@GetMapping(\"/\")\r\n	public String index(){\r\n		return \"index\";\r\n	}\r\n}\r\n```\r\n\r\nindex.html代码如下所示，注意引入jquery.js，在引用成功会使用jquery给div赋值，代码如下所示。\r\n\r\n```\r\n<!DOCTYPE html>\r\n<!--解决th报错 -->\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>thymeleaf</title>\r\n</head>\r\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\r\n<body>\r\n<h1>这是一个静态页面</h1>\r\n<div id=\"test_div\"></div>\r\n</body>\r\n\r\n<script type=\"text/javascript\">\r\n    $(\'#test_div\').html(\'引用jquery.js成功\');\r\n</script>\r\n\r\n</html>\r\n\r\n\r\n```\r\n\r\n项目结构如下所示，可以看到没有jquery.js，我们要做的就是使用Nginx来访问jquery.js。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/91/1)\r\n\r\n\r\n# 4.Nginx配置\r\n\r\n修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。\r\n\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n\r\n   server {\r\n       listen       10000;\r\n       server_name  localhost;\r\n      \r\n      #拦截后台请求\r\n      location / {\r\n        proxy_pass http://localhost:8888;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n      }\r\n\r\n      #拦截静态资源\r\n      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ {\r\n        root /Users/dalaoyang/Downloads/static;\r\n       }\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 5.测试\r\n\r\n启动SpringBoot应用，启动Nginx。\r\n\r\n在浏览器访问[http://localhost:10000/](http://localhost:10000/)，可以看到如下图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/91/2)\r\n\r\n\r\n通过图中红框内容都可以看出来引用静态资源成功了。\r\n\r\n\r\n----------\r\n\r\n', 'dalaoyang', '2018-12-29', 355, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (92, 'Nginx实现URL重写', '>本文利用Nginx实现URL重写，本文使用Nginx与静态页面配合重写URL。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/92/1)\r\n\r\n# 1.准备工作。\r\n\r\n结合本文场景，需要安装Nginx。\r\n\r\n1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。\r\n\r\n\r\n\r\n\r\n\r\n# 2.什么是URL重写？\r\n\r\nURL重写是指将一个URL请求重新写成网站可以处理的另一个URL的过程。这样说可能不是很好理解，举个例子来说明一下，在开发中可能经常遇到这样的需求，比如通过浏览器请求的http://localhost:8080/getUser?id=1，但是需要通过SEO优化等等原因，需要把请求的地址重写为http://localhost:8080/getUser/1这样的URL，从而符合需求或者更好的被网站阅读。\r\n\r\n当遇到这种请求的时候，就需要使用到UrlRewrite重写或者使用一些网关路由，如SpringCloud的Gateway，Zuul，又或者是Nginx来实现这个功能。\r\n\r\n本文介绍Nginx实现URL重写。\r\n\r\n# 3.使用介绍\r\n\r\n在Nginx中使用URL重写需要使用到一个指令-----rewrite，其语法如下：\r\n\r\n```\r\nrewrite regex replacement [flag]; \r\n```\r\n\r\n* regex ：可以使用正则或者字符串来表示相匹配的地址。\r\n* replacement：可以表示重定向的地址。\r\n* flag ：flag标志的作用是用于控制当匹配到对应的rewrite规则后是否继续检查后续的rewrite规则。\r\n\r\nflag值为如下四种，分别是：\r\n\r\n* last：停止处理当前的rewrite指令集，而后通过重写后的规则重新发起请求，浏览器地址栏URL地址不变。\r\n* break：和break指令一样，都是停止处理当前上下文中的其他重写模块指令。\r\n* redirect：如果替换字符串不以“ http://”，“ https://”或“ $scheme” 开头，返回带有302代码的临时重定向，浏览器地址会显示跳转后的URL地址。\r\n* permanent：返回301代码的永久重定向，浏览器地址栏会显示跳转后的URL地址。\r\n\r\n例如：\r\n\r\n```\r\nserver {\r\n    ...\r\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\r\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\r\n    return  403;\r\n    ...\r\n}\r\n```\r\n\r\n另外还可以根据if来判断，指令如下：\r\n\r\n```\r\nif (condition) { ... }\r\n```\r\n\r\n其中condition是条件，如果为true，则执行大括号中的内容：\r\n* 使用“ =”和“ !=”运算符比较变量和字符串;\r\n* 使用“ ~”（对于区分大小写的匹配）和“ ~*”（对于不区分大小写的匹配）运算符，将变量与正则表达式进行匹配。正则表达式可以包含可供以后在$1.. $9变量中重用的捕获。负操作符“ !~”和“ !~*”也可用。如果正则表达式包含“ }”或“ ;”字符，则整个表达式应包含在单引号或双引号中。\r\n* 使用“ -f”和“ !-f”运算符检查文件是否存在;\r\n* 使用“ -d”和“ !-d”运算符检查目录是否存在;\r\n* 使用“ -e”和“ !-e”运算符检查文件，目录或符号链接是否存在;\r\n* 使用“ -x”和“ !-x”运算符检查可执行文件。\r\n\r\n例如：\r\n```\r\nif ($http_user_agent ~ MSIE) {\r\n    rewrite ^(.*)$ /msie/$1 break;\r\n}\r\n\r\nif ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {\r\n    set $id $1;\r\n}\r\n\r\nif ($request_method = POST) {\r\n    return 405;\r\n}\r\n\r\nif ($slow) {\r\n    limit_rate 10k;\r\n}\r\n\r\nif ($invalid_referer) {\r\n    return 403;\r\n}\r\n```\r\n\r\n\r\n# 4.Nginx配置\r\n\r\n本文例子只是将请求跳转到本人的博客首页http://www.dalaoyang.cn/，配置如下：\r\n\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n\r\n   server {\r\n       listen       10000;\r\n       server_name  localhost;\r\n\r\n       #如果host不是dalaoyang.cn，则301到www.dalaoyang.cn中\r\n       if ( $host != \"dalaoyang.cn\" ){\r\n         rewrite ^/(.*)$ https://www.dalaoyang.cn/$1 last;\r\n       }\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 5.测试\r\n\r\n测试就比较简单了，在浏览器访问http://localhost:10000/about，会自动跳转到https://www.dalaoyang.cn/about，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/92/2)\r\n\r\n# 6.总结\r\n\r\n大部分内容都是参考自Nginx官网来学习的，官网的例子都很详细。\r\n\r\n\r\n参考自Nginx官网ngx_http_rewrite_module模块官方API---[传送门](http://nginx.org/en/docs/http/ngx_http_rewrite_module.html)。', 'dalaoyang', '2019-01-14', 279, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (93, 'SpringBoot使用Nacos配置中心', '>本文介绍SpringBoot如何使用阿里巴巴Nacos做配置中心。\r\n\r\n# 1.Nacos简介\r\n\r\nNacos是阿里巴巴集团开源的一个易于使用的平台，专为动态服务发现，配置和服务管理而设计。它可以帮助您轻松构建云本机应用程序和微服务平台。\r\n\r\nNacos基本上支持现在所有类型的服务，例如，Dubbo / gRPC服务，Spring Cloud RESTFul服务或Kubernetes服务。\r\n\r\n尤其是使用Eureka注册中心的，并且担心Eureka闭源的开发者们，可以将注册中心修改为Nacos，本文主要介绍Nacos配置中心的使用。\r\n\r\nNacos官网如下图所示，官网地址[https://nacos.io/zh-cn/](https://nacos.io/zh-cn/)\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/1)\r\n\r\n\r\n# 2.Nacos安装\r\n\r\nNacos安装可以采用如下两种方式：\r\n\r\n* 1.官网下载稳定版本解压使用。\r\n* 2.下载源代码编译使用，目前最新的版本是0.8.0版本。\r\n\r\n本文简单介绍一下第二种方式，到Nacos的稳定版本下载地址[https://github.com/alibaba/nacos/releases](https://github.com/alibaba/nacos/releases)，下载最新版，本文下的是tag.gz文件，下载后解压即安装完成，然后进入解压目录后的bin目录执行如下命令启动Nacos。\r\n\r\n```\r\nsh startup.sh -m standalone\r\n```\r\n\r\n启动可以看到控制台如图所示，端口号是8848（好像是因为珠穆朗玛峰的高度），版本0.8.0等等信息。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/2)\r\n\r\n\r\n# 3.SpringBoot使用Nacos\r\n\r\n接下来，创建项目，项目中加入使用Nacos配置中心的依赖nacos-config-spring-boot-starter，完整pom文件如代码所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.1.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_nacos_config</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_nacos_config</name>\r\n	<description>springboot2_nacos_config</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<!-- https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter -->\r\n		<dependency>\r\n			<groupId>com.alibaba.boot</groupId>\r\n			<artifactId>nacos-config-spring-boot-starter</artifactId>\r\n			<version>0.2.1</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n配置文件中需要配置Nacos服务的地址，如下所示。\r\n\r\n```\r\nspring.application.name=springboot2-nacos-config\r\nnacos.config.server-addr=127.0.0.1:8848\r\n```\r\n\r\n在启动类，加入@NacosPropertySource注解其中包含两个属性，如下：\r\n\r\n* dataId：这个属性是需要在Nacos中配置的Data Id。\r\n* autoRefreshed：为true的话开启自动更新。\r\n\r\n在使用Nacos做配置中心后，需要使用@NacosValue注解获取配置，使用方式与@Value一样，完整启动类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport com.alibaba.nacos.api.config.annotation.NacosValue;\r\nimport com.alibaba.nacos.spring.context.annotation.config.NacosPropertySource;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\n@NacosPropertySource(dataId = \"springboot2-nacos-config\", autoRefreshed = true)\r\n@RestController\r\npublic class Springboot2NacosConfigApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2NacosConfigApplication.class, args);\r\n	}\r\n\r\n	@NacosValue(value = \"${nacos.test.propertie:123}\", autoRefreshed = true)\r\n	private String testProperties;\r\n\r\n	@GetMapping(\"/test\")\r\n	public String test(){\r\n		return testProperties;\r\n	}\r\n}\r\n\r\n```\r\n\r\n由于本文只是简单示例使用Nacos做配置中心，所以将启动类加了一个MVC方法，作为输出配置信息进行测试，这个测试的配置给了一个默认值123，启动项目，访问[http://localhost:8080/test](http://localhost:8080/test)，可以看到如下所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/3)\r\n\r\n\r\n# 4.使用Nacos修改配置\r\n\r\n访问Nacos服务，[http://localhost:8848/nacos/#/login](http://localhost:8848/nacos/#/login)，默认情况用户名密码都是nacos，登录页如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/4)\r\n\r\n登录后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/5)\r\n\r\n接下来点击右侧加号，添加我们刚刚创建的data id 的服务，并将配置由123修改为111，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/6)\r\n\r\n然后点击右下角发布按钮，再次访问[http://localhost:8080/test](http://localhost:8080/test)如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/7)\r\n\r\n到这里SpringBoot使用Nacos配置中心就完成了，感兴趣可以查看源码仔细研究。', 'dalaoyang', '2019-01-26', 922, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (94, 'SpringBoot使用Nacos服务发现', '>本文介绍SpringBoot应用使用Nacos服务发现。\r\n\r\n\r\n上一篇文章介绍了SpringBoot使用Nacos做配置中心，本文介绍SpringBoot使用Nacos做服务发现。\r\n\r\n# 1.Eureka闭源\r\n\r\n相信到现在，Eureka 2.0 闭源已经不是什么新鲜事了。在2017-2018年，几乎在国内掀起了一阵SpringCloud的热潮，几乎很大一部分人群随着对SpringBoot的关注，都开始关注起来了SpringCloud。而由于Eureka注册中心的易整合等优点，更是大多数使用SpringCloud的首选注册中心。但是随着Eureka官网的宣告，如下。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/1)\r\n\r\n大致意思就是开源工作已经停止之类的话，这里就不做介绍了，感兴趣可以上Eureka的Github地址上查看[https://github.com/Netflix/eureka/wiki](https://github.com/Netflix/eureka/wiki)。\r\n\r\nNacos也是一个优秀的注册中心，并且由阿里巴巴开源，并且最近的热度很高，已经更新到0.8.0版本了，基本上更新的很频繁，也是一个Eureka闭源后的好的选择。\r\n\r\n\r\n# 2.SpringBoot使用Nacos服务发现\r\n\r\n首先，需要启动Nacos，这里不做过多介绍。\r\n\r\n创建项目，加入Nacos的服务发现的依赖nacos-discovery-spring-boot-starter，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.1.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_nacos_discovery</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_nacos_discovery</name>\r\n	<description>springboot2_nacos_discovery</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<!-- https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter -->\r\n		<dependency>\r\n			<groupId>com.alibaba.boot</groupId>\r\n			<artifactId>nacos-discovery-spring-boot-starter</artifactId>\r\n			<version>0.2.1</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n```\r\n\r\n配置文件配置Nacos服务的地址，如代码清单所示。\r\n\r\n```\r\nserver.port=8080\r\nspring.application.name=springboot2-nacos-discovery\r\nnacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\nSpringBoot使用Nacos服务发现需要想Nacos服务注册，可以选择使用Nacos Api来直接注册，如代码清单所示。\r\n\r\n```\r\n//curl -X PUT \'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=springboot2-nacos-discovery&ip=127.0.0.1&port=8080\'\r\n```\r\n\r\n本文使用注解@PostConstruct，在服务启动后向Nacos服务注册，并且创建方法根据实例名称获取实例，完整启动类如代码清单所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport com.alibaba.nacos.api.annotation.NacosInjected;\r\nimport com.alibaba.nacos.api.exception.NacosException;\r\nimport com.alibaba.nacos.api.naming.NamingService;\r\nimport com.alibaba.nacos.api.naming.pojo.Instance;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport java.net.InetAddress;\r\nimport java.util.List;\r\n\r\nimport static org.springframework.web.bind.annotation.RequestMethod.GET;\r\n\r\n//curl -X PUT \'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=springboot2-nacos-discovery&ip=127.0.0.1&port=8080\'\r\n@SpringBootApplication\r\n@RestController\r\npublic class Springboot2NacosDiscoveryApplication {\r\n\r\n	@NacosInjected\r\n	private NamingService namingService;\r\n\r\n	@Value(\"${server.port}\")\r\n	private int serverPort;\r\n\r\n	@Value(\"${spring.application.name}\")\r\n	private String applicationName;\r\n\r\n	@PostConstruct\r\n	public void registerInstance() throws NacosException{\r\n		namingService.registerInstance(applicationName,\"127.0.0.1\",serverPort);\r\n	}\r\n\r\n	@RequestMapping(value = \"/getInstance\", method = GET)\r\n	@ResponseBody\r\n	public List<Instance> getInstance(@RequestParam String serviceName) throws NacosException {\r\n		return namingService.getAllInstances(serviceName);\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2NacosDiscoveryApplication.class, args);\r\n	}\r\n}\r\n```\r\n\r\n本文用到了两个Nacos的方法，如下：\r\n\r\n* registerInstance：注册实例，有多个方法，本文使用的方法需要传入三个参数，分别是：服务名，ip和端口号。\r\n* getAllInstances：获取实例，传入服务名。\r\n\r\n到这里就配置完成了，启动项目，查看Nacos服务如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/2)\r\n\r\n在浏览器访问[http://localhost:8080/get?serviceName=springboot2-nacos-discovery](http://localhost:8080/get?serviceName=springboot2-nacos-discovery)，如图所示，也可以查询到刚刚注册的实例。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/3)\r\n\r\n还有很多Nacos Api供我们使用，可以查看Nacos Api页面：[https://nacos.io/zh-cn/docs/open-API.html](https://nacos.io/zh-cn/docs/open-API.html)', 'dalaoyang', '2019-01-27', 719, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (95, 'SpringBoot使用Sharding-JDBC分库分表', '>本文介绍SpringBoot使用当当Sharding-JDBC进行分库分表。\r\n\r\n# 1.有关Sharding-JDBC\r\n\r\n有关Sharding-JDBC介绍这里就不在多说，之前Sharding-JDBC是当当网自研的关系型数据库的水平扩展框架，现在已经捐献给Apache，具体可以查看Github，地址是：[https://shardingsphere.apache.org/document/current/cn/overview/](https://shardingsphere.apache.org/document/current/cn/overview/)\r\n\r\nshardingsphere文档地址是：[https://shardingsphere.apache.org/document/current/cn/overview/](https://shardingsphere.apache.org/document/current/cn/overview/)。\r\n\r\n目前貌似还不能从Maven仓库下载依赖，需要手动下载源码打包使用，所以本文使用的还是当当网的依赖。\r\n\r\n# 2.本文场景\r\n\r\n## 2.1 数据库\r\n\r\n接下来介绍一下本文的场景，本文是分别创建了2个数据库database0和database1。其中每个数据库都创建了2个数据表，goods_0和goods_1，如图所示。这里蓝色的代表database0中的表，红色的代表database1中的表。绿色goods表是虚拟表（图画的比较丑，审美不好，凑合看吧）。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/1)\r\n\r\n## 2.2 分库\r\n\r\n本文分库样例比较简单，根据数据库表中字段goods_id的大小进行判断，如果goods_id大于20则使用database0，否则使用database1。\r\n\r\n## 2.3 分表\r\n\r\n分样例比较简单，根据数据库表中字段goods_type的数值的奇偶进行判断，奇数使用goods_1表，偶数使用goods_0表。\r\n\r\n## 2.4 代码流程\r\n\r\n流程大致是这样，在应用程序中我们操作虚拟表goods，但是当真正操作数据库的时候，会根据我们的分库分表规则进行匹配然后操作。\r\n\r\n# 3.代码实现\r\n\r\n本文使用SpringBoot2.0.3，SpringData-JPA，Druid连接池，和当当的sharding-jdbc。\r\n\r\n## 3.1 建表SQL\r\n\r\n创建表和数据库的SQL如下所示。\r\n\r\n```\r\nCREATE DATABASE database0;\r\nUSE database0;\r\nDROP TABLE IF EXISTS `goods_0`;\r\nCREATE TABLE `goods_0` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\nDROP TABLE IF EXISTS `goods_1`;\r\nCREATE TABLE `goods_1` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\nCREATE DATABASE database1;\r\nUSE database1;\r\nDROP TABLE IF EXISTS `goods_0`;\r\nCREATE TABLE `goods_0` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\n\r\nDROP TABLE IF EXISTS `goods_1`;\r\nCREATE TABLE `goods_1` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\n```\r\n\r\n## 3.2 依赖文件\r\n\r\n新建项目，加入当当的sharding-jdbc-core依赖和druid连接池，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_shardingjdbc_fkfb</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_shardingjdbc_fkfb</name>\r\n    <description>springboot2_shardingjdbc_fkfb</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!-- lombok -->\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <!-- druid -->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.1.9</version>\r\n        </dependency>\r\n        <!-- sharding-jdbc -->\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>sharding-jdbc-core</artifactId>\r\n            <version>1.5.4</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.3 配置信息\r\n\r\n在配置信息中配置了两个数据库的信息和JPA的简单配置。\r\n\r\n```\r\n##Jpa配置\r\nspring.jpa.database=mysql\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=none\r\n\r\n##数据库配置\r\n##数据库database0地址\r\ndatabase0.url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false\r\n##数据库database0用户名\r\ndatabase0.username=root\r\n##数据库database0密码\r\ndatabase0.password=root\r\n##数据库database0驱动\r\ndatabase0.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database0名称\r\ndatabase0.databaseName=database0\r\n\r\n##数据库database1地址\r\ndatabase1.url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase1.username=root\r\n##数据库database1密码\r\ndatabase1.password=root\r\n##数据库database1驱动\r\ndatabase1.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase1.databaseName=database1\r\n\r\n```\r\n\r\n## 3.4 启动类\r\n\r\n启动类加入了@EnableAutoConfiguration取出数据库自动配置，使用@EnableTransactionManagement开启事务，使用@EnableConfigurationProperties注解加入配置实体，启动类完整代码请入所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\r\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\r\n\r\n@SpringBootApplication\r\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\n@EnableTransactionManagement(proxyTargetClass = true)\r\n@EnableConfigurationProperties\r\npublic class Springboot2ShardingjdbcFkfbApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Springboot2ShardingjdbcFkfbApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.5 实体类和数据库操作层\r\n\r\n这里没什么好说的，就是简单的实体和Repository，只不过在Repository内加入between方法和in方法用于测试，代码如下所示。\r\n\r\nGoods实体类。\r\n\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Entity\r\n@Table(name=\"goods\")\r\n@Data\r\npublic class Goods {\r\n    @Id\r\n    private Long goodsId;\r\n\r\n    private String goodsName;\r\n\r\n    private Long goodsType;\r\n}\r\n\r\n```\r\n\r\nGoodsRepository类。\r\n\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.Goods;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\npublic interface GoodsRepository extends JpaRepository<Goods, Long> {\r\n\r\n    List<Goods> findAllByGoodsIdBetween(Long goodsId1,Long goodsId2);\r\n\r\n    List<Goods> findAllByGoodsIdIn(List<Long> goodsIds);\r\n}\r\n```\r\n\r\n## 3.6 数据库配置\r\n\r\n本文使用了两个实体来接收数据库信息，并且创建数据源，也可以采用别的方式。首先看一下Database0Config和Database1Config两个类的代码。\r\n\r\nDatabase0Config类。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database0\")\r\n@Component\r\npublic class Database0Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\nDatabase1Config类。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database1\")\r\n@Component\r\npublic class Database1Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n接下来新建DataSourceConfig用于创建数据源和使用分库分表策略，其中分库分表策略会调用分库算法类和分表算法类，DataSourceConfig类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\n\r\nimport com.dalaoyang.config.DatabaseShardingAlgorithm;\r\nimport com.dalaoyang.config.TableShardingAlgorithm;\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingDataSourceFactory;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.TableRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.DefaultKeyGenerator;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.SQLException;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Configuration\r\npublic class DataSourceConfig {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Autowired\r\n    private DatabaseShardingAlgorithm databaseShardingAlgorithm;\r\n\r\n    @Autowired\r\n    private TableShardingAlgorithm tableShardingAlgorithm;\r\n\r\n    @Bean\r\n    public DataSource getDataSource() throws SQLException {\r\n        return buildDataSource();\r\n    }\r\n\r\n    private DataSource buildDataSource() throws SQLException {\r\n        //分库设置\r\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2);\r\n        //添加两个数据库database0和database1\r\n        dataSourceMap.put(database0Config.getDatabaseName(), database0Config.createDataSource());\r\n        dataSourceMap.put(database1Config.getDatabaseName(), database1Config.createDataSource());\r\n        //设置默认数据库\r\n        DataSourceRule dataSourceRule = new DataSourceRule(dataSourceMap, database0Config.getDatabaseName());\r\n\r\n        //分表设置，大致思想就是将查询虚拟表Goods根据一定规则映射到真实表中去\r\n        TableRule orderTableRule = TableRule.builder(\"goods\")\r\n                .actualTables(Arrays.asList(\"goods_0\", \"goods_1\"))\r\n                .dataSourceRule(dataSourceRule)\r\n                .build();\r\n\r\n        //分库分表策略\r\n        ShardingRule shardingRule = ShardingRule.builder()\r\n                .dataSourceRule(dataSourceRule)\r\n                .tableRules(Arrays.asList(orderTableRule))\r\n                .databaseShardingStrategy(new DatabaseShardingStrategy(\"goods_id\", databaseShardingAlgorithm))\r\n                .tableShardingStrategy(new TableShardingStrategy(\"goods_type\", tableShardingAlgorithm)).build();\r\n        DataSource dataSource = ShardingDataSourceFactory.createDataSource(shardingRule);\r\n        return dataSource;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public KeyGenerator keyGenerator() {\r\n        return new DefaultKeyGenerator();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.7 分库分表算法\r\n\r\n由于这里只是简单的分库分表样例，所以分库类这里实现SingleKeyDatabaseShardingAlgorithm类，采用了单分片键数据源分片算法，需要重写三个方法，分别是：\r\n\r\n* doEqualSharding：SQL中==的规则。\r\n* doInSharding：SQL中in的规则。\r\n* doBetweenSharding：SQL中between的规则。\r\n\r\n本文分库规则是基于值大于20则使用database0，其余使用database1，所以简单if，else就搞定了，分库算法类DatabaseShardingAlgorithm代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dalaoyang.database.Database0Config;\r\nimport com.dalaoyang.database.Database1Config;\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingValue;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.database.SingleKeyDatabaseShardingAlgorithm;\r\nimport com.google.common.collect.Range;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashSet;\r\n\r\n/**\r\n * 这里使用的都是单键分片策略\r\n * 示例分库策略是：\r\n * GoodsId<=20使用database0库\r\n * 其余使用database1库\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Component\r\npublic class DatabaseShardingAlgorithm implements SingleKeyDatabaseShardingAlgorithm<Long> {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Override\r\n    public String doEqualSharding(Collection<String> availableTargetNames, ShardingValue<Long> shardingValue) {\r\n        Long value = shardingValue.getValue();\r\n        if (value <= 20L) {\r\n            return database0Config.getDatabaseName();\r\n        } else {\r\n            return database1Config.getDatabaseName();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doInSharding(Collection<String> availableTargetNames, ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\r\n        for (Long value : shardingValue.getValues()) {\r\n            if (value <= 20L) {\r\n                result.add(database0Config.getDatabaseName());\r\n            } else {\r\n                result.add(database1Config.getDatabaseName());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doBetweenSharding(Collection<String> availableTargetNames,\r\n                                                ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\r\n        Range<Long> range = shardingValue.getValueRange();\r\n        for (Long value = range.lowerEndpoint(); value <= range.upperEndpoint(); value++) {\r\n            if (value <= 20L) {\r\n                result.add(database0Config.getDatabaseName());\r\n            } else {\r\n                result.add(database1Config.getDatabaseName());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n分表和分库类似，无非就是实现的类不一样，实现了SingleKeyTableShardingAlgorithm类，策略使用值奇偶分表，分表算法类TableShardingAlgorithm如代码清单所示。\r\n\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingValue;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.table.SingleKeyTableShardingAlgorithm;\r\nimport com.google.common.collect.Range;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashSet;\r\n\r\n/**\r\n * 这里使用的都是单键分片策略\r\n * 示例分表策略是：\r\n * GoodsType为奇数使用goods_1表\r\n * GoodsType为偶数使用goods_0表\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Component\r\npublic class TableShardingAlgorithm implements SingleKeyTableShardingAlgorithm<Long> {\r\n\r\n    @Override\r\n    public String doEqualSharding(final Collection<String> tableNames, final ShardingValue<Long> shardingValue) {\r\n        for (String each : tableNames) {\r\n            if (each.endsWith(shardingValue.getValue() % 2 + \"\")) {\r\n                return each;\r\n            }\r\n        }\r\n        throw new IllegalArgumentException();\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doInSharding(final Collection<String> tableNames, final ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(tableNames.size());\r\n        for (Long value : shardingValue.getValues()) {\r\n            for (String tableName : tableNames) {\r\n                if (tableName.endsWith(value % 2 + \"\")) {\r\n                    result.add(tableName);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doBetweenSharding(final Collection<String> tableNames,\r\n                                                final ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(tableNames.size());\r\n        Range<Long> range = shardingValue.getValueRange();\r\n        for (Long i = range.lowerEndpoint(); i <= range.upperEndpoint(); i++) {\r\n            for (String each : tableNames) {\r\n                if (each.endsWith(i % 2 + \"\")) {\r\n                    result.add(each);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n## 3.8 Controller\r\n\r\n接下来创建一个Controller进行测试，保存方法使用了插入40条数据，根据我们的规则，会每个库插入20条，同时我这里还创建了三个查询方法，分别是查询全部，between查询，in查询，还有删除全部方法。Controller类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.Goods;\r\nimport com.dalaoyang.repository.GoodsRepository;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@RestController\r\npublic class GoodsController {\r\n\r\n    @Autowired\r\n    private KeyGenerator keyGenerator;\r\n\r\n    @Autowired\r\n    private GoodsRepository goodsRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        for(int i= 1 ; i <= 40 ; i ++){\r\n            Goods goods = new Goods();\r\n            goods.setGoodsId((long) i);\r\n            goods.setGoodsName( \"shangpin\" + i);\r\n            goods.setGoodsType((long) (i+1));\r\n            goodsRepository.save(goods);\r\n        }\r\n        return \"success\";\r\n    }\r\n\r\n    @GetMapping(\"select\")\r\n    public String select(){\r\n        return goodsRepository.findAll().toString();\r\n    }\r\n\r\n    @GetMapping(\"delete\")\r\n    public void delete(){\r\n         goodsRepository.deleteAll();\r\n    }\r\n\r\n    @GetMapping(\"query1\")\r\n    public Object query1(){\r\n        return goodsRepository.findAllByGoodsIdBetween(10L, 30L);\r\n    }\r\n\r\n    @GetMapping(\"query2\")\r\n    public Object query2(){\r\n        List<Long> goodsIds = new ArrayList<>();\r\n        goodsIds.add(10L);\r\n        goodsIds.add(15L);\r\n        goodsIds.add(20L);\r\n        goodsIds.add(25L);\r\n        return goodsRepository.findAllByGoodsIdIn(goodsIds);\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 4.测试\r\n\r\n启动应用，在浏览器或HTTP请求工具访问[http://localhost:8080/save](http://localhost:8080/save)，如图所示，返回success。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/2)\r\n\r\n接下来在测试一下查询方法，访问[http://localhost:8080/select](http://localhost:8080/select)，如图所示，可以看到插入数据没问题。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/3)\r\n\r\n然后查看一下数据库，首先看database0，如图，每个表都有十条数据，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/4)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/5)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/6)\r\n\r\n接下来看database1，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/7)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/8)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/9)\r\n\r\n从上面几张图可以看出分库分表已经按照我们的策略来进行插入，至于其他几个测试这里就不做介绍了，无论是查询和删除都是可以成功的。\r\n\r\n\r\n# 5 源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_fkfb](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_fkfb)', 'dalaoyang', '2019-02-01', 1603, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (96, 'SpringCloud使用Nacos服务发现实现远程调用', '>本文使用SpringCloud结合Nacos服务发现，Feign远程调用做一个简单的Demo。\r\n\r\n\r\n# 1 Nacos\r\n\r\n关于Nacos之前写了两篇文章关于SpringBoot对它的使用，感兴趣可以查看一下。\r\n\r\n[《SpringBoot使用Nacos配置中心》](https://www.dalaoyang.cn/article/93)\r\n\r\n[《SpringBoot使用Nacos服务发现》](https://www.dalaoyang.cn/article/94)\r\n\r\n在SpringBoot使用的时候，需要自行去向Nacos服务注册自己的服务，Nacos也提供了SpringCloud服务发现的依赖，本文结合spring-cloud-starter-alibaba-nacos-discovery进行使用介绍。\r\n\r\n本文使用版本为:\r\n\r\n* SpringCloud Finchley.SR2\r\n* SpringBoot 2.0.3.RELEASE\r\n* spring-cloud-starter-alibaba-nacos-discovery 0.2.1.RELEASE\r\n* spring-cloud-starter-openfeign 2.0.0.RELEASE\r\n\r\n# 2.本文场景\r\n\r\n两个服务，如下：\r\n\r\n* springcloud-nacos-discovery-provider：端口号10000，服务提供者。\r\n* springcloud-nacos-discovery-consumer：端口号10001，服务消费者。\r\n\r\n原理很简单，浏览器访问消费者，消费者调用服务提供者。\r\n\r\n# 3.服务提供者\r\n\r\n\r\n## 3.1 依赖配置\r\n\r\n创建一个项目，项目中加入SpringCloud-Nacos依赖，完整pom如下所示。\r\n\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_nacos_discovery_provider</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_nacos_discory_provider</name>\r\n    <description>springcloud_nacos_discovery_provider</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Finchley.SR2</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.2 启动类\r\n\r\n在启动类加入@SpringBootApplication注解，完整启动类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class SpringcloudNacosDiscoveryProviderApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudNacosDiscoveryProviderApplication.class, args);\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.3 配置文件\r\n\r\n配置文件中配置Nacos服务地址，当前服务名，这里需要注意一点，使用Ribbon负载均衡的时候服务名中不能使用下划线，不然会找不到服务。\r\n\r\n配置文件如下所示。\r\n\r\n```\r\nserver.port=10000\r\nspring.application.name=springcloud-nacos-discovery-provider\r\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\n## 3.4 提供服务\r\n\r\n创建一个Controller，提供一个方法进行测试，如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/2/4\r\n */\r\n@RestController\r\npublic class TestController {\r\n\r\n    @GetMapping(\"/test/{string}\")\r\n    public String test(@PathVariable String string) {\r\n        return \"Hello Nacos :\" + string;\r\n    }\r\n}\r\n```\r\n\r\n\r\n# 4 服务消费者\r\n\r\n## 4.1 依赖配置\r\n\r\n与服务提供者类似，在服务消费者加入SpringCloud-Nacos依赖和OpenFeign依赖，完整pom入夏所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.0.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_nacos_discovery_consumer</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springcloud_nacos_discovery_consumer</name>\r\n	<description>springcloud_nacos_discovery_consumer</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n		<spring-cloud.version>Finchley.SR2</spring-cloud.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-openfeign</artifactId>\r\n			<version>2.0.0.RELEASE</version>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\r\n			<version>0.2.1.RELEASE</version>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>${spring-cloud.version}</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 4.2 启动类\r\n\r\n在启动类加入注解@EnableDiscoveryClient并且开启负载均衡，如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class SpringcloudNacosDiscoveryConsumerApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudNacosDiscoveryConsumerApplication.class, args);\r\n	}\r\n\r\n	@LoadBalanced\r\n	@Bean\r\n	public RestTemplate restTemplate() {\r\n		return new RestTemplate();\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n## 4.3 配置文件\r\n\r\n配置文件与提供者一致，只是服务名不同，如下所示。\r\n\r\n```\r\nserver.port=10001\r\nspring.application.name=springcloud-nacos-discovery-consumer\r\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\n## 4.4 创建服务调用\r\n\r\n创建一个Controller进行调用服务，如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/2/4\r\n */\r\n@RestController\r\npublic class TestConrtroller {\r\n\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    @GetMapping(\"test/{string}\")\r\n    public String test(@PathVariable String string) {\r\n        return restTemplate.getForObject(\"http://springcloud-nacos-discovery-provider/test/\" + string, String.class);\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 5 测试\r\n\r\n分别启动两个服务，查看Nacos管理页面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/1)\r\n\r\n点击详情可以查看服务的详细信息，如端口号，权重等，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/2)\r\n\r\n接下俩在浏览器访问[http://localhost:10001/test/dalaoyang](http://localhost:10001/test/dalaoyang)，远程调用成功。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/3)\r\n\r\n\r\n# 6.源码\r\n\r\n服务提供者：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_provider](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_provider)\r\n\r\n\r\n服务消费者：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_consumer](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_consumer)', 'dalaoyang', '2019-02-04', 682, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (97, 'SpringBoot使用Sharding-JDBC读写分离', '>本文介绍SpringBoot使用当当Sharding-JDBC进行读写分离。\r\n\r\n# 1.有关Sharding-JDBC\r\n\r\n本文还是基于当当网Sharding-Jdbc的依赖，与上一篇使用Sharding-Jdbc进行分库分表依赖一致，并且本文大致内容与上一篇文章相似，建议先查看我的另一篇在查看这篇会简单许多，传送门[《SpringBoot使用Sharding-JDBC分库分表》](https://www.dalaoyang.cn/article/95)。\r\n\r\n这里需要特殊介绍的是，使用Sharding-JDBC进行读写分离的时候，只允许设置一个主库，从库的话可以设置多个，访问策略的话从源码上看只有两种轮询（ROUND_ROBIN）和随机（RANDOM）。\r\n\r\n源码代码如下:\r\n\r\n```\r\npackage com.dangdang.ddframe.rdb.sharding.api.strategy.slave;\r\n\r\npublic enum MasterSlaveLoadBalanceStrategyType {\r\n    ROUND_ROBIN(new RoundRobinMasterSlaveLoadBalanceStrategy()),\r\n    RANDOM(new RandomMasterSlaveLoadBalanceStrategy());\r\n\r\n    private final MasterSlaveLoadBalanceStrategy strategy;\r\n\r\n    public static MasterSlaveLoadBalanceStrategyType getDefaultStrategyType() {\r\n        return ROUND_ROBIN;\r\n    }\r\n\r\n    private MasterSlaveLoadBalanceStrategyType(MasterSlaveLoadBalanceStrategy strategy) {\r\n        this.strategy = strategy;\r\n    }\r\n\r\n    public MasterSlaveLoadBalanceStrategy getStrategy() {\r\n        return this.strategy;\r\n    }\r\n}\r\n```\r\n\r\n\r\n# 2.本文场景\r\n\r\n\r\n由于本地环境并没有使用Mysql主从复制，只是创建了三个库，其中database0作为主库，database1和database2作为从库。主库进行增删改操作，从库进行查询操作，如下图为本文数据库的三个表。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/1)\r\n\r\n如上图分别是三个数据库中的user表，其中master-user为database0数据库中的user表，salve-user1为database1中的user表，salve-user2为database2中的user表。\r\n\r\n\r\n# 3.代码实现\r\n\r\n本文使用SpringBoot2.0.3，SpringData-JPA，Druid连接池，和当当的sharding-jdbc。\r\n\r\n## 3.1 建表SQL\r\n\r\n创建表和数据库的SQL如下所示，这里默认在从库内分别插入了一条数据，name值分别存放dalaoyang1和dalaoyang2便于区分。\r\n\r\n```\r\nCREATE DATABASE database0;\r\nUSE database0;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\nCREATE DATABASE database1;\r\nUSE database1;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\nINSERT INTO `database1`.`user`(`id`, `city`, `name`) VALUES (101, \'beijing\', \'dalaoyang1\');\r\n\r\nCREATE DATABASE database2;\r\nUSE database2;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\nINSERT INTO `database2`.`user`(`id`, `city`, `name`) VALUES (102, \'beijing\', \'dalaoyang2\');\r\n```\r\n\r\n## 3.2 依赖文件\r\n\r\n新建项目，依赖文件还是当当的sharding-jdbc-core依赖和druid连接池，完整pom文件代码如下所示。\r\n\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_shardingjdbc_dxfl</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_shardingjdbc_dxfl</name>\r\n    <description>springboot2_shardingjdbc_dxfl</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!-- lombok -->\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <!-- druid -->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.1.9</version>\r\n        </dependency>\r\n        <!-- sharding-jdbc -->\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>sharding-jdbc-core</artifactId>\r\n            <version>1.5.4</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n## 3.3 配置信息\r\n\r\n在配置信息中配置了三个数据库的信息和JPA的简单配置。\r\n\r\n\r\n```\r\n##Jpa配置\r\nspring.jpa.database=mysql\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=none\r\n\r\n##数据库配置\r\n##数据库database0地址\r\ndatabase0.url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false\r\n##数据库database0用户名\r\ndatabase0.username=root\r\n##数据库database0密码\r\ndatabase0.password=root\r\n##数据库database0驱动\r\ndatabase0.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database0名称\r\ndatabase0.databaseName=database0\r\n\r\n##数据库database1地址\r\ndatabase1.url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase1.username=root\r\n##数据库database1密码\r\ndatabase1.password=root\r\n##数据库database1驱动\r\ndatabase1.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase1.databaseName=database1\r\n\r\n##数据库database2地址\r\ndatabase2.url=jdbc:mysql://localhost:3306/database2?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase2.username=root\r\n##数据库database1密码\r\ndatabase2.password=root\r\n##数据库database1驱动\r\ndatabase2.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase2.databaseName=database2\r\n```\r\n\r\n\r\n## 3.4 启动类\r\n\r\n上一篇文章说到在启动类加入了@EnableAutoConfiguration去除数据库自动配置，当时也没太注意，其实可以直接在@SpringBootApplication注解上去除数据库自动配置，剩下的和上一篇一样，使用@EnableTransactionManagement开启事务，使用@EnableConfigurationProperties注解加入配置实体，启动类完整代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\r\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\r\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\r\n\r\n@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})\r\n@EnableTransactionManagement(proxyTargetClass = true)\r\n@EnableConfigurationProperties\r\npublic class Springboot2ShardingjdbcDxflApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Springboot2ShardingjdbcDxflApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n## 3.5 实体类和数据库操作层\r\n\r\nUser实体类。\r\n\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Entity\r\n@Table(name=\"user\")\r\n@Data\r\npublic class User {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String city;\r\n\r\n    private String name;\r\n}\r\n\r\n```\r\n\r\nUserRepository类。\r\n\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface UserRepository extends JpaRepository<User,Long> {\r\n}\r\n\r\n```\r\n\r\n\r\n## 3.6 数据库参数类\r\n\r\n数据库配置类，Database0Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database0\")\r\n@Component\r\npublic class Database0Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n数据库配置类，Database1Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database1\")\r\n@Component\r\npublic class Database1Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n数据库配置类，Database2Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database2\")\r\n@Component\r\npublic class Database2Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n## 3.7 读写分离配置\r\n\r\n创建一个DataSourceConfig类来设置读写分离，这里其实也与分库分表类似，也可以在分库分表的基础上进行读写分离，需要创建一个Map集合来接收从库。在创建数据源时需要传入五个参数，分别是：\r\n\r\n* name：数据源名称\r\n* masterDataSourceName：主库数据源名称\r\n* masterDataSource：主数据源\r\n* slaveDataSourceMap：从数据源集合\r\n* strategyType：访问策略\r\n\r\n当然，也可以使用其他方法创建数据源，本文代码如下：\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\n\r\nimport com.dangdang.ddframe.rdb.sharding.api.MasterSlaveDataSourceFactory;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.slave.MasterSlaveLoadBalanceStrategyType;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.DefaultKeyGenerator;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.SQLException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Configuration\r\npublic class DataSourceConfig {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Autowired\r\n    private Database2Config database2Config;\r\n\r\n    @Bean\r\n    public DataSource getDataSource() throws SQLException {\r\n        return buildDataSource();\r\n    }\r\n\r\n    private DataSource buildDataSource() throws SQLException {\r\n        //设置从库数据源集合\r\n        Map<String, DataSource> slaveDataSourceMap = new HashMap<>();\r\n        slaveDataSourceMap.put(database1Config.getDatabaseName(), database1Config.createDataSource());\r\n        slaveDataSourceMap.put(database2Config.getDatabaseName(), database2Config.createDataSource());\r\n\r\n        //获取数据源对象\r\n        DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(\"masterSlave\",database0Config.getDatabaseName()\r\n                ,database0Config.createDataSource(), slaveDataSourceMap, MasterSlaveLoadBalanceStrategyType.getDefaultStrategyType());\r\n        return dataSource;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public KeyGenerator keyGenerator() {\r\n        return new DefaultKeyGenerator();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.8 Controller\r\n\r\nController做为测试类，创建两个方法，save方法和getAll方法，其中：\r\n\r\n* save方法用于测试主库的插入和修改\r\n* getAll方法用于测试读数据\r\n\r\nUserController类如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public void save(){\r\n        User user = new User();\r\n        user.setId(100L);\r\n        user.setName(\"dalaoyang\");\r\n        user.setCity(\"beijing\");\r\n        userRepository.save(user);\r\n    }\r\n\r\n    @GetMapping(\"getAll\")\r\n    public Object getAll(){\r\n        return userRepository.findAll();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n# 4.测试\r\n\r\n## 4.1 测试主库\r\n\r\n使用postman访问[http://localhost:8080/save](http://localhost:8080/save)，控制台如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/2)\r\n\r\n再次访问，如图。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/3)\r\n\r\n主键冲突了，其实这是由于插入的时候使用的database0，但是查询使用的是database1和database2，但是我在从库内并没有ID是100的数据，所以JPA判定我为插入，但是数据库内缺有这样的数据。\r\n\r\n我们接下来测试一下查询。访问[http://localhost:8080/getAll](http://localhost:8080/getAll)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/4)\r\n\r\n再次访问，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/5)\r\n\r\n证明从库的读取是正常的，接下来修改从库的ID为100。然后访问[http://localhost:8080/save](http://localhost:8080/save)，查看控制台如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/6)\r\n\r\n因为存在了ID为100的数据，所以SQL为修改语句。\r\n# 5.源码\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_dxfl](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_dxfl)', 'dalaoyang', '2019-02-12', 555, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (98, 'SpringBoot使用ELK日志收集', '>本文介绍SpringBoot应用配合ELK进行日志收集。\r\n\r\n# 1.有关ELK\r\n\r\n## 1.1 简介\r\n在之前写过一篇文章介绍ELK日志收集方案，感兴趣的可以去看一看，点击这里-----> [《ELK日志分析方案》](https://www.dalaoyang.cn/article/82)。\r\n\r\n这里在对ELK做一下简述，ELK是有Elastic公司的三个组件配合进行日志收集，分别是：\r\n\r\n* ElasticSearch:用于存储日志信息。\r\n* Logstash:用于收集、处理和转发日志信息。\r\n* Kibana:提供可搜索的Web可视化界面。\r\n\r\n当然，现在很多都配合着Beats进行使用，这里不做过多描述，感兴趣的可以查看官网，[https://www.elastic.co/cn/products/beats](https://www.elastic.co/cn/products/beats)，这里有很多对Beats的描述。\r\n\r\n## 1.2 安装\r\n\r\n有关ELK安装笔者之前都写过关于Linux环境下的安装，如下：\r\n\r\n* [《Linux安装Elasticsearch》](https://www.dalaoyang.cn/article/78)\r\n* [《Linux安装Logstash》](https://www.dalaoyang.cn/article/80)\r\n* [《Linux安装Kibana》](https://www.dalaoyang.cn/article/79)\r\n\r\n\r\n其他环境安装方式类似，基本上都是下载压缩包解压这一套流程。\r\n\r\n# 2.SpringBoot日志输出到Logstash\r\n\r\n这里以logback日志为例，新建项目，在项目中加入logstash-logback-encoder依赖，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.2.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_logstash</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot_logstash</name>\r\n    <description>springboot_logstash</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.logstash.logback</groupId>\r\n            <artifactId>logstash-logback-encoder</artifactId>\r\n            <version>5.3</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n接下来新建一个logback-spring.xml文件，配置logback日志信息，注意这里配置的destination属性，输出的要和logstash配置的对应上，不然收集不上，内容如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\r\n\r\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\r\n        <destination>127.0.0.1:4560</destination>\r\n        <!-- 日志输出编码 -->\r\n        <encoder charset=\"UTF-8\"\r\n                class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\r\n            <providers>\r\n                <timestamp>\r\n                    <timeZone>UTC</timeZone>\r\n                </timestamp>\r\n                <pattern>\r\n                    <pattern>\r\n                        {\r\n                        \"logLevel\": \"%level\",\r\n                        \"serviceName\": \"${springAppName:-}\",\r\n                        \"pid\": \"${PID:-}\",\r\n                        \"thread\": \"%thread\",\r\n                        \"class\": \"%logger{40}\",\r\n                        \"rest\": \"%message\"\r\n                        }\r\n                    </pattern>\r\n                </pattern>\r\n            </providers>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"LOGSTASH\" />\r\n        <appender-ref ref=\"CONSOLE\" />\r\n    </root>\r\n\r\n</configuration>\r\n\r\n```\r\n\r\n修改启动类，加入一个mvc方法，主要用于输出日志，如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\n@RestController\r\npublic class SpringbootLogstashApplication {\r\n\r\n    Logger logger = LoggerFactory.getLogger(SpringbootLogstashApplication.class);\r\n\r\n    @GetMapping(\"test\")\r\n    public void test(){\r\n        logger.info(\"测试初始一些日志吧！\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootLogstashApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n# 3.Logstash配置\r\n\r\nlogstash配置如下，再次提醒一下，输入要与刚刚配置的对应上，输出为本地es：\r\n\r\n```\r\ninput {\r\n  tcp {\r\n    mode => \"server\"\r\n    host => \"0.0.0.0\"\r\n    port => 4560\r\n    codec => json_lines\r\n  }\r\n}\r\noutput {\r\n  elasticsearch {\r\n    hosts => \"localhost:9200\"\r\n    index => \"springboot-logstash-%{+YYYY.MM.dd}\"\r\n  }\r\n}\r\n```\r\n\r\n# 4.测试\r\n\r\n打开kibana管理页面，添加刚刚创建的索引，如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/1)\r\n\r\n然后进入发现页，选择刚刚的索引，如下所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/2)\r\n\r\n接下来在浏览器多次访问刚刚在项目中输出日志的方法，查询控制台，如下所示。\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/3)\r\n\r\n然后在进入kibana查看，不光是日志内容，还有自定义的属性也显示出来了。\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/4)\r\n\r\n# 5.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot_logstash](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot_logstash)', 'dalaoyang', '2019-03-01', 440, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (99, 'SpringBoot使用Elastic-Job', '>本文介绍SpringBoot整合Elastic-Job分布式调度任务（简单任务）。\r\n\r\n# 1.有关Elastic-Job\r\n\r\nElastic-Job是当当网开源的分布式任务调度解决方案，是业内使用较多的分布式调度解决方案。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/1)\r\n\r\n\r\n这里主要介绍Elastic-Job-Lite，Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供最轻量级的分布式任务的协调服务，外部依赖仅Zookeeper。\r\n\r\n架构图如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/2)\r\n\r\nElastic-Job官网地址：[http://elasticjob.io/index_zh.html](http://elasticjob.io/index_zh.html)   \r\nElastic-Job-Lite官方文档地址：[http://elasticjob.io/docs/elastic-job-lite/00-overview/intro/](http://elasticjob.io/docs/elastic-job-lite/00-overview/intro/)\r\n\r\n\r\n# 2.使用Elastic-Job\r\n\r\n## 2.1 加入依赖\r\n\r\n新建项目，在项目中加入Elastic-Job依赖，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_elasticjob</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_elasticjob</name>\r\n    <description>springboot2_elasticjob</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>elastic-job-lite-core</artifactId>\r\n            <version>2.1.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>elastic-job-lite-spring</artifactId>\r\n            <version>2.1.5</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 2.2 配置文件\r\n\r\n配置文件中需要配置一下zookeeper地址和namespace名称，注意：这个不是必须要配置的，在文件中直接写死也是可以的，配置文件如下所示。\r\n\r\n```\r\nspring.application.name=springboot2_elasticjob\r\n\r\nregCenter.serverList=localhost:2181\r\nregCenter.namespace=springboot2_elasticjob\r\n```\r\n\r\n## 2.3 配置zookeeper\r\n\r\n接下来需要配置一下zookeeper，创建一个JobRegistryCenterConfig，内容如下：\r\n\r\n```\r\n@Configuration\r\n@ConditionalOnExpression(\"\'${regCenter.serverList}\'.length() > 0\")\r\npublic class JobRegistryCenterConfig {\r\n\r\n    @Bean(initMethod = \"init\")\r\n    public ZookeeperRegistryCenter regCenter(@Value(\"${regCenter.serverList}\") final String serverList,\r\n                                             @Value(\"${regCenter.namespace}\") final String namespace) {\r\n        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList, namespace));\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 2.4 定义Elastic-Job任务\r\n\r\n配置一个简单的任务，这里以在日志中打印一些参数为例，如下所示。\r\n\r\n```\r\npublic class MySimpleJob implements SimpleJob {\r\n    Logger logger = LoggerFactory.getLogger(MySimpleJob.class);\r\n\r\n    @Override\r\n    public void execute(ShardingContext shardingContext) {\r\n        logger.info(String.format(\"Thread ID: %s, 作业分片总数: %s, \" +\r\n                        \"当前分片项: %s.当前参数: %s,\" +\r\n                        \"作业名称: %s.作业自定义参数: %s\"\r\n                ,\r\n                Thread.currentThread().getId(),\r\n                shardingContext.getShardingTotalCount(),\r\n                shardingContext.getShardingItem(),\r\n                shardingContext.getShardingParameter(),\r\n                shardingContext.getJobName(),\r\n                shardingContext.getJobParameter()\r\n        ));\r\n\r\n    }\r\n}\r\n```\r\n\r\n## 2.5 配置任务\r\n\r\n配置任务的时候，这里定义了四个参数，分别是：\r\n\r\n* cron：cron表达式，用于控制作业触发时间。\r\n* shardingTotalCount：作业分片总数\r\n* shardingItemParameters：分片序列号和参数用等号分隔，多个键值对用逗号分隔\r\n分片序列号从0开始，不可大于或等于作业分片总数\r\n如：\r\n0=a,1=b,2=c\r\n* jobParameters：作业自定义参数\r\n作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业\r\n例：每次获取的数据量、作业实例从数据库读取的主键等。\r\n\r\n至于其他参数请参考文档，[http://elasticjob.io/docs/elastic-job-lite/02-guide/config-manual/](http://elasticjob.io/docs/elastic-job-lite/02-guide/config-manual/)\r\n\r\n本文配置如下：\r\n\r\n```\r\n@Configuration\r\npublic class MyJobConfig {\r\n\r\n    private final String cron = \"0/5 * * * * ?\";\r\n    private final int shardingTotalCount = 3;\r\n    private final String shardingItemParameters = \"0=A,1=B,2=C\";\r\n    private final String jobParameters = \"parameter\";\r\n\r\n    @Autowired\r\n    private ZookeeperRegistryCenter regCenter;\r\n\r\n    @Bean\r\n    public SimpleJob stockJob() {\r\n        return new MySimpleJob();\r\n    }\r\n\r\n    @Bean(initMethod = \"init\")\r\n    public JobScheduler simpleJobScheduler(final SimpleJob simpleJob) {\r\n        return new SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(),\r\n                cron, shardingTotalCount, shardingItemParameters, jobParameters));\r\n    }\r\n\r\n    private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends SimpleJob> jobClass,\r\n                                                         final String cron,\r\n                                                         final int shardingTotalCount,\r\n                                                         final String shardingItemParameters,\r\n                                                         final String jobParameters) {\r\n        // 定义作业核心配置\r\n        JobCoreConfiguration simpleCoreConfig = JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).\r\n                shardingItemParameters(shardingItemParameters).jobParameter(jobParameters).build();\r\n        // 定义SIMPLE类型配置\r\n        SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(simpleCoreConfig, jobClass.getCanonicalName());\r\n        // 定义Lite作业根配置\r\n        LiteJobConfiguration simpleJobRootConfig = LiteJobConfiguration.newBuilder(simpleJobConfig).overwrite(true).build();\r\n        return simpleJobRootConfig;\r\n\r\n    }\r\n}\r\n```\r\n\r\n# 3.测试\r\n\r\n启动项目，就可以看到控制台的输出了，如下所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/3)\r\n\r\n\r\n# 4.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_elasticjob](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_elasticjob)', 'dalaoyang', '2019-03-05', 256, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (100, 'SpringBoot使用prometheus监控', '>本文介绍SpringBoot如何使用Prometheus配合Grafana监控。\r\n\r\n# 1.关于Prometheus\r\n\r\nPrometheus是一个根据应用的metrics来进行监控的开源工具。相信很多工程都在使用它来进行监控，有关详细介绍可以查看官网：[https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)。\r\n\r\n# 2.有关Grafana\r\n\r\nGrafana是一个开源监控利器，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/1)\r\n\r\n从图中就可以看出来，使用Grafana监控很高大上，提供了很多可视化的图标。\r\n\r\n官网地址：[https://grafana.com/](https://grafana.com/)\r\n\r\n# 3.SpringBoot使用Prometheus\r\n\r\n## 3.1 依赖内容\r\n\r\n在SpringBoot中使用Prometheus其实很简单，不需要配置太多的东西，在pom文件中加入依赖，完整内容如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_prometheus</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_prometheus</name>\r\n	<description>springboot2_prometheus</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-actuator</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>io.micrometer</groupId>\r\n			<artifactId>micrometer-registry-prometheus</artifactId>\r\n			<version>1.1.3</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.2 配置文件\r\n\r\n配置文件中加入配置，这里就只进行一些简单配置，management.metrics.tags.application属性是本文配合Grafana的Dashboard设置的，如下所示：\r\n\r\n```\r\nspring.application.name=springboot_prometheus\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.metrics.tags.application=${spring.application.name}\r\n```\r\n\r\n## 3.3 设置application\r\n\r\n修改启动类，如下所示.\r\n\r\n```\r\n@SpringBootApplication\r\npublic class Springboot2PrometheusApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2PrometheusApplication.class, args);\r\n	}\r\n	@Bean\r\n	MeterRegistryCustomizer<MeterRegistry> configurer(\r\n			@Value(\"${spring.application.name}\") String applicationName) {\r\n		return (registry) -> registry.config().commonTags(\"application\", applicationName);\r\n	}\r\n}\r\n```\r\n\r\nSpringBoot项目到这里就配置完成了，启动项目，访问[http://localhost:8080/actuator/prometheus](http://localhost:8080/actuator/prometheus)，如图所示，可以看到一些度量指标。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/2)\r\n\r\n# 4.Prometheus配置\r\n\r\n## 4.1 配置应用\r\n\r\n在prometheus配置监控我们的SpringBoot应用，完整配置如下所示。\r\n\r\n```\r\n# my global config\r\nglobal:\r\n  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\n# Alertmanager configuration\r\nalerting:\r\n  alertmanagers:\r\n  - static_configs:\r\n    - targets:\r\n      # - alertmanager:9093\r\n\r\n# Load rules once and periodically evaluate them according to the global \'evaluation_interval\'.\r\nrule_files:\r\n  # - \"first_rules.yml\"\r\n  # - \"second_rules.yml\"\r\n\r\n# A scrape configuration containing exactly one endpoint to scrape:\r\n# Here it\'s Prometheus itself.\r\nscrape_configs:\r\n  - job_name: \'prometheus\'\r\n    static_configs:\r\n    - targets: [\'127.0.0.1:9090\']\r\n###以下内容为SpringBoot应用配置\r\n  - job_name: \'springboot_prometheus\'\r\n    scrape_interval: 5s\r\n    metrics_path: \'/actuator/prometheus\'\r\n    static_configs:\r\n      - targets: [\'127.0.0.1:8080\']\r\n```\r\n\r\n## 4.2 启动Prometheus\r\n\r\n启动Prometheus，浏览器访问，查看Prometheus页面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/3)\r\n\r\n\r\n点击如图所示位置，可以查看Prometheus监控的应用。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/4)\r\n\r\n列表中UP的页面为存活的实例，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/5)\r\n\r\n也可以查看很多指数，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/6)\r\n\r\n\r\n# 5.Grafana配置\r\n\r\n启动Grafana，配置Prometheus数据源，这里以ID是4701的Doshboard为例（地址：[https://grafana.com/dashboards/4701](https://grafana.com/dashboards/4701)）如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/7)\r\n\r\n在Grafana内点击如图所示import按钮\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/8)\r\n\r\n在如图所示位置填写4701，然后点击load。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/9)\r\n\r\n接下来导入Doshboard。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/10)\r\n\r\n导入后就可以看到我们的SpringBoot项目对应的指标图表了，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/11)\r\n\r\n\r\n# 6.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_prometheus](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_prometheus)', 'dalaoyang', '2019-03-07', 827, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (101, 'SpringBoot使用SOFA-Lookout监控', '>本文介绍SpringBoot使用蚂蚁金服SOFA-Lookout配合Prometheus进行监控。\r\n\r\n# 1.SOFA-Lookout介绍\r\n\r\n上一篇已经介绍使用Prometheus进行暴露SpringBoot的一些指标进行监控，[传送门](https://www.dalaoyang.cn/article/100)，这一篇介绍如何使用SOFA-Lookout配合Prometheus。\r\n\r\nSOFA-Lookout是蚂蚁金服开源的一款解决系统的度量和监控问题的轻量级中间件服务。它提供的服务包括：Metrics 的埋点、收集、加工、存储与查询等。\r\n\r\n正如介绍的，SOFA-Lookout提供了一些常用的监控指标，比如JVM线程，JVM类加载，JVM内存，JVM垃圾回收，机器文件系统信息和机器信息。在1.5.0版本之后默认也提供了一些Linux操作系统的信息。具体可以查看：[https://www.sofastack.tech/sofa-lookout/docs/client-ext-metrics](https://www.sofastack.tech/sofa-lookout/docs/client-ext-metrics)\r\n\r\n\r\n# 2.SpringBoot使用SOFA-Lookout\r\n\r\n## 2.1 配置依赖\r\n\r\n新建项目，在项目中加入SOFA依赖，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_sofa_lookout</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_sofa_lookout</name>\r\n	<description>springboot2_sofa_lookout</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.alipay.sofa.lookout</groupId>\r\n			<artifactId>lookout-sofa-boot-starter</artifactId>\r\n			<version>1.5.2</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.alipay.sofa.lookout</groupId>\r\n			<artifactId>lookout-reg-prometheus</artifactId>\r\n			<version>1.5.2</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 2.2 配置SOFA-Lookout端口\r\n\r\n这里需要配置一个SOFA-Lookout的端口，生产环境使用的话一定要查看这个端口是不是被占用了。配置如下，这里配置的端口是8081。\r\n\r\n```\r\nspring.application.name=springboot2_sofa_lookout\r\ncom.alipay.sofa.lookout.prometheus-exporter-server-port=8081\r\n```\r\n\r\n其实到这里，SpringBoot项目已经配置完成了，当然还可以自定义一些指标，这里不做介绍。\r\n\r\n# 3.Prometheus配置\r\n\r\nPrometheus需要配置一下刚刚SOFA-Lookout的端口，如下：\r\n\r\n```\r\n  - job_name: \'springboot2_sofa_lookout\'\r\n    scrape_interval: 5s\r\n    static_configs:\r\n      - targets: [\'localhost:8081\']\r\n```\r\n\r\n# 4.Grafana\r\n\r\n这里也可以将Prometheus展示给Grafana，我也查询了很多，但是貌似目前Grafana还没有默认推荐的Dashboard，大家可以根据情况自行构建，当然，如果有好的也希望可以推荐一下。\r\n\r\n# 5.测试\r\n\r\n启动SpringBoot应用，控制台如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/1)\r\n\r\n看到红框部分就是启动成功了。接下来查看Prometheus界面，如下。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/2)\r\n\r\n这里Grafana在看一下Grafana界面，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/3)\r\n\r\n# 6.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_sofa_lookout](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_sofa_lookout)', 'dalaoyang', '2019-03-10', 436, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (102, 'SpringCloud使用Prometheus监控(基于Eureka)', '>本文介绍SpringCloud使用Prometheus，基于Eureka服务发现。\r\n\r\n# 1.Prometheus介绍\r\n\r\n在之前写过两篇有关Prometheus使用的文章，如下：\r\n\r\n[《SpringBoot使用prometheus监控》](https://www.dalaoyang.cn/article/100)   \r\n\r\n[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)\r\n\r\n但是如果使用微服务的话，一个服务一个服务的配置似乎太麻烦，Prometheus提供了很多服务发现的机制去统一配置服务，具体可以查看官网介绍：[https://prometheus.io/docs/prometheus/latest/configuration/configuration/]()\r\n\r\n包含如下这些配置：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/1)\r\n\r\n从图中可以看出，这里提供了Consul的服务发现机制，没有Eureka的服务发现机制。但是如果Eureka想要使用的话可以通过配置一个适配器的方式，使用consul_sd_config配置的方式使用Prometheus服务发现。\r\n\r\n\r\n# 2.Eureka Server\r\n\r\n创建一个Eureka Server，这里使用的Eureka最新版本Greenwich.SR1，也就是现在Idea默认创建的，在配置中加入eureka-consul-adapter依赖，pom文件完整内容如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_prometheus_server</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_prometheus_server</name>\r\n    <description>springcloud_prometheus_server</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>at.twinformatics</groupId>\r\n            <artifactId>eureka-consul-adapter</artifactId>\r\n            <version>1.1.0</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <repositories>\r\n        <repository>\r\n            <id>spring-milestones</id>\r\n            <name>Spring Milestones</name>\r\n            <url>https://repo.spring.io/milestone</url>\r\n        </repository>\r\n    </repositories>\r\n\r\n</project>\r\n```\r\n\r\n这里需要注意一下SpringCloud版本与eureka-consul-adapter的对照，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/2)\r\n\r\n剩下的就是一些简单地配置，如配置文件：\r\n\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n启动类加入注解启动注册中心，如下：\r\n\r\n```\r\n@SpringBootApplication\r\n@EnableEurekaServer //启动服务注册中心\r\npublic class SpringcloudPrometheusServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudPrometheusServerApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n# 3.Eureka Client\r\n\r\n其实这个也没什么好说的，和普通使用Prometheus一样，当然，也可以使用SOFA-Lookout的模式，这里根据情况自行选择即可，这里以使用micrometer-registry-prometheus依赖为例，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_prometheus_client</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_prometheus_client</name>\r\n    <description>springcloud_prometheus_client</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-actuator</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.micrometer</groupId>\r\n            <artifactId>micrometer-registry-prometheus</artifactId>\r\n            <version>1.1.3</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <repositories>\r\n        <repository>\r\n            <id>spring-milestones</id>\r\n            <name>Spring Milestones</name>\r\n            <url>https://repo.spring.io/milestone</url>\r\n        </repository>\r\n    </repositories>\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下，端口号8888，如下：\r\n\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\nspring.application.name=springboot_prometheus_client\r\n\r\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\r\n\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.metrics.tags.application=${spring.application.name}\r\n\r\n```\r\n\r\n\r\n启动类如下：\r\n\r\n```\r\n@SpringBootApplication\r\npublic class SpringcloudPrometheusClientApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudPrometheusClientApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    MeterRegistryCustomizer<MeterRegistry> configurer(\r\n            @Value(\"${spring.application.name}\") String applicationName) {\r\n        return (registry) -> registry.config().commonTags(\"application\", applicationName);\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 4.Prometheus配置\r\n\r\n在Prometheus中配置eureka地址（server），以及需要收集的服务（services）。\r\n\r\n```\r\n  - job_name: \'consul-prometheus\'\r\n    scheme: http\r\n    metrics_path: \'/actuator/prometheus\'\r\n    consul_sd_configs:\r\n    #consul 地址\r\n      - server: \'127.0.0.1:8761\'\r\n        scheme: http\r\n        services: [SPRINGBOOT_PROMETHEUS_CLIENT]\r\n```\r\n\r\n# 5.测试\r\n\r\n分别启动Eureka-Server和Eureka-Client，首先查看Eureka界面，如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/3)\r\n\r\n\r\n接下来查看一下Prometheus，如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/4)\r\n\r\n\r\n从上图可以看到，服务以及被收集了，接下来查看grafana控制台，如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/5)\r\n\r\n\r\n# 6.源码\r\n\r\n源码地址：\r\n\r\nEureka Server : [https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_server](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_server)\r\n\r\nEureka Client : [https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_client](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_client)', 'dalaoyang', '2019-03-11', 623, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (103, 'SpringCloud Gateway 测试问题解决', '>本文针对于测试环境SpringCloud Gateway问题解决。\r\n\r\n# 1.背景介绍\r\n\r\n本文遇到的问题都是在测试环境真正遇到的问题，不一定试用于所有人，仅做一次记录，便于遇到同样问题的干掉这些问题。\r\n\r\n使用版本：SpringCloud 2.0.0.RELEASE\r\n\r\n## 1.1 Gateway配置\r\n\r\n之前系统是由阿里云SLB直接分发到几台生产服务器，但是经过研究，决定在中间加一层网关，也就是阿里云SLB分发流量到Gateway到下游服务。但是又由于种种原因，决定使用Host方式进行拦截处理，以下为部分配置代码：\r\n\r\n```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      discovery:\r\n        locator:\r\n          enabled: true\r\n      routes:\r\n        - id: test_client\r\n          uri: lb://TEST-CLIENT\r\n          predicates:\r\n            - Host=www.dalaoyang.cn\r\n          order: 1\r\n          filters:\r\n            - DalaoyangAuth\r\n            \r\n```\r\n\r\n\r\n注意，其中部分内容并非真实环境内容，但是场景绝对真实，如：\r\n\r\n* test_client：routes的ID。\r\n* uri：这里使用的Eureka内的application name\r\n* Host：需要拦截的域名\r\n* filters：域名前缀\r\n\r\n## 1.2 Gateway过滤器\r\n\r\n过滤器内容如下，稍后介绍：\r\n\r\n```\r\n\r\n@Component\r\npublic class DalaoyangAuthFilterFactory  extends AbstractGatewayFilterFactory<Object> {\r\n    private static final Logger logger = LoggerFactory.getLogger(DalaoyangAuthFilterFactory.class);\r\n\r\n    @Override\r\n    public GatewayFilter apply(Object config) {\r\n        return (exchange, chain) -> {\r\n            ServerHttpRequest host = exchange.getRequest().mutate().headers(httpHeaders -> {\r\n                httpHeaders.remove(\"gate_way_auth\");\r\n                httpHeaders.add(\"gate_way_auth\", \"yes\");\r\n            }).build();\r\n            //将现在的request 变成 change对象\r\n            ServerWebExchange build = exchange.mutate().request(host).build();\r\n            return chain.filter(build);\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n## 1.3 下游服务拦截器\r\n\r\n下游服务拦截器大致内容如下，这段代码是原有的代码，这个功能大概就是加载公共的属性basePath，用于加载静态资源，比如前端的jquery.js，根据域名判断，然后选择是加载为http://127.0.0.1:8080/jquery.js还是https://www.dalaoyang.cn/jquery.js这种：\r\n\r\n```\r\npublic class GlobalInterceptorAdapter extends HandlerInterceptorAdapter {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(GlobalInterceptorAdapter.class);\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws\r\n            Exception {\r\n        String scheme = request.getScheme();\r\n        String serverName = request.getServerName();\r\n        int port = request.getServerPort();\r\n        String path = request.getContextPath();\r\n        String basePath = \"\";\r\n        if(serverName.indexOf(\"www.dalaoyang.cn\")!=-1){\r\n        	basePath = \"//\" + serverName + path;\r\n        }else {\r\n        	basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n        }\r\n        if (logger.isDebugEnabled()) {\r\n            logger.debug(basePath);\r\n        }\r\n        request.setAttribute(\"basePath\", basePath);\r\n        return true;\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 1.4 下游服务用户过滤器\r\n\r\n这段代码也是原有的代码，用户Session过滤器，这个完整内容很多，只截取遇到问题的片段，大致内容就是判断用户是否在其他地方登录，如果登录了就弹出的固定的提示页面，内容如下：\r\n\r\n```\r\nString url = null;\r\nApplicationConfig applicationConfig0 = getApplicationConfig();\r\nif(applicationConfig0 != null) {\r\n	String scheme = applicationConfig0.getUrlScheme();\r\n    if(scheme != null) {\r\n	    String requestUrl = request.getRequestURL().toString();\r\n		    if(requestUrl != null && requestUrl.length() > 8) {\r\n				requestUrl = requestUrl.substring(requestUrl.indexOf(\":\"), \r\n										requestUrl.indexOf(\"/\", 8));\r\n				url = scheme + requestUrl;\r\n			}\r\n	}\r\n}\r\nif(url != null) {\r\n	response.sendRedirect(url + request.getContextPath() + \"/session-time-out\");\r\n} else {\r\n	response.sendRedirect(request.getContextPath() + \"/session-time-out\");\r\n}\r\n```\r\n\r\n## 1.5 跳转流程\r\n\r\n跳转如下：\r\n\r\n1.域名指向了Gateway地址。   \r\n2.在浏览器使用域名访问Gateway，被Gateway转发到下游服务，返回对应响应。\r\n\r\n\r\n# 2.问题一 下游服务无法获取域名\r\n\r\n在使用上述配置后，使用request.getServerName()方法已经无法获取到域名了，经过测试，获取到的是服务器的ip地址，导致虽然页面可以正常跳转，但是无法获取到正确的域名，导致静态资源加载有问题。\r\n\r\n在网上请教了很多人，本想看看是不是什么地方没有设置对，但是后台还是采取大多数人的建议，在header中加入一个域名信息，修改后Gateway过滤器如下：\r\n\r\n```\r\n@Component\r\npublic class DalaoyangAuthFilterFactory  extends AbstractGatewayFilterFactory<Object> {\r\n    private static final Logger logger = LoggerFactory.getLogger(DalaoyangAuthFilterFactory.class);\r\n\r\n    @Override\r\n    public GatewayFilter apply(Object config) {\r\n        return (exchange, chain) -> {\r\n            ServerHttpRequest host = exchange.getRequest().mutate().headers(httpHeaders -> {\r\n                httpHeaders.remove(\"gate_way_auth\");\r\n                httpHeaders.add(\"gate_way_auth\", \"yes\");\r\n                \r\n                httpHeaders.add(\"realServerName\",\r\n                exchange.getRequest().getURI().getHost());\r\n                logger.info(\"headers:\" + httpHeaders.toString());\r\n            }).build();\r\n            //将现在的request 变成 change对象\r\n            ServerWebExchange build = exchange.mutate().request(host).build();\r\n            return chain.filter(build);\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n很容易看到，就是如下这句话：\r\n\r\n```\r\nhttpHeaders.add(\"realServerName\",\r\n              exchange.getRequest().getURI().getHost());\r\n```\r\n\r\n下游服务过滤修改为：\r\n\r\n```\r\npublic class GlobalInterceptorAdapter extends HandlerInterceptorAdapter {\r\n    private static Logger logger = LoggerFactory.getLogger(GlobalInterceptorAdapter.class);\r\n    private final String TEST_SERVERNAME = \"www.dalaoyang.cn\";\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws\r\n            Exception {\r\n        String scheme = request.getScheme();\r\n        String serverName = request.getServerName();\r\n        String realServerName = request.getHeader(\"realServerName\");\r\n        int port = request.getServerPort();\r\n        String path = request.getContextPath();\r\n        String basePath = \"\";\r\n        if((!StringUtils.isBlank(realServerName))){\r\n            if(realServerName.contains(TEST_SERVERNAME)){\r\n                basePath = \"//\" + realServerName + path;\r\n            }\r\n        }else {\r\n            basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n        }\r\n        if (logger.isDebugEnabled()) {\r\n            logger.debug(basePath);\r\n        }\r\n        request.setAttribute(\"basePath\", basePath);\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n其实大致内容就是，使用如下方式获取域名：\r\n\r\n```\r\nString realServerName = request.getHeader(\"realServerName\");\r\n```\r\n\r\n到此，问题解决了，大部分内容跳转正常。\r\n\r\n# 3.问题二 NPE异常\r\n\r\n部分请求，经过路由访问报如下错误。\r\n\r\n\r\n```\r\n2018-06-20 01:26:04.254 ERROR 1 --- [reactor-http-client-epoll-11] .a.w.r.e.DefaultErrorWebExceptionHandler : Failed to handle request [DELETE http://localhost:8080/entity/5b29ad2cb3cb1f00010a1546]\r\n\r\njava.lang.NullPointerException: null\r\n        at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011) ~[na:1.8.0_111]\r\n        at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006) ~[na:1.8.0_111]\r\n        at org.springframework.cloud.gateway.filter.NettyRoutingFilter.lambda$filter$3(NettyRoutingFilter.java:117) ~[spring-cloud-gateway-core-2.0.0.RELEASE.jar!/:2.0.0.RELEASE]\r\n        at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:177) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber.onNext(FluxRetryPredicate.java:81) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:146) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.ipc.netty.channel.PooledClientContextHandler.fireContextActive(PooledClientContextHandler.java:85) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:578) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:136) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:438) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) ~[netty-codec-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) ~[netty-codec-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:253) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:808) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:408) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:308) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) ~[netty-common-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_111]\r\n```\r\n\r\n遇到问题后，没有很慌，打开了百度查了查（微笑）。百度没让我很失望，基本上没啥答复，然后谷歌了一下，看到了github上的一个issues，大致内容感觉是SpringCloud Gateway 2.0.0.RELEASE版本有些问题，升级一下版本就好了，如图。\r\n\r\nGithub issues地址：\r\n\r\n[https://github.com/spring-cloud/spring-cloud-gateway/issues/429](https://github.com/spring-cloud/spring-cloud-gateway/issues/429)\r\n[https://github.com/spring-cloud/spring-cloud-gateway/issues/374](https://github.com/spring-cloud/spring-cloud-gateway/issues/374)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/103/1)\r\n\r\n说实话，感觉是版本问题，但是又看到了一篇国人的文章，地址是：[http://xiaoqiangge.com/aritcle/1545889008833.html](http://xiaoqiangge.com/aritcle/1545889008833.html)，问题大致类似，加了一下博主的微信，请教了一下，大致了解到了，升级了一下版本，问题解决。\r\n\r\n**感谢小强哥！！！**   \r\n\r\n\r\n# 4.问题三 下游用户过滤器跳转失效\r\n\r\n问题是这样的，刚刚介绍了，用户在其他地方登录会自动跳转至一个界面提示给用户，发现问题是无法跳转。\r\n\r\n查看gateway日志，大概提示了这样一句话，如下：\r\n\r\n```\r\nUnhandled failure: Connection has been closed, response already set (status=302)\r\n```\r\n\r\n从内容大致可以看出，重定向有问题，想到了在用户过滤器中最后的重定向，决定在这里下手，修改后内容如下：\r\n\r\n```\r\nString scheme = request.getScheme();\r\nString serverName = request.getServerName();\r\nString realServerName = request.getHeader(\"realServerName\");\r\nint port = request.getServerPort();\r\nString path = request.getContextPath();\r\nString basePath = \"\";\r\nif((!StringUtils.isEmpty(realServerName))){\r\n        if(realServerName.contains(TEST_SERVERNAME)){\r\n		basePath = \"https://\" + realServerName + path;\r\n	}else {\r\n		basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n	}\r\nresponse.sendRedirect(basePath + \"/session-time-out\");\r\n```\r\n\r\n问题也解决了，目前还在踩坑测试中，如果大家有类似经验可以一起探讨。', 'dalaoyang', '2019-03-13', 450, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (104, 'SpringCloud使用Sofa-lookout监控(基于Eureka)', '>本文介绍SpringCloud使用Sofa-lookout，基于Eureka服务发现。\r\n\r\n## 1.前景\r\n\r\n本文属于是前几篇文章的后续，其实一开始感觉这个没有什么必要写的，但是最近一个朋友问我关于这个的问题，所以想着还是写一篇基于Eureka监控使用Pormetheus监控Sofa-Lookout监控的文章。\r\n\r\n前几篇文章请看：\r\n\r\n[《SpringBoot使用prometheus监控》](https://www.dalaoyang.cn/article/100)   \r\n\r\n[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)\r\n\r\n[《SpringCloud使用Prometheus监控(基于Eureka)》](https://www.dalaoyang.cn/article/102)\r\n\r\n至于使用consul服务发现监控这里就不介绍了，网上的文章很多，千篇一律。这一篇与上面的这个文章还是有一些不同的，Sofa-Lookout是通过暴露一个端口来进行监控，比较特殊，所以这里给大家借鉴一下。\r\n\r\n## 2.Eureka Server\r\n\r\n本文还是需要在Eureka上面加入eureka-consul-adapter依赖，eureka-consul-adapter项目github地址：\r\n\r\n[https://github.com/twinformatics/eureka-consul-adapter](https://github.com/twinformatics/eureka-consul-adapter)\r\n\r\n这里在介绍一下Eureka Server内容，就是在普通Eureka Server基础上加入上述依赖，完整pom如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_sofalookout_server</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_sofalookout_server</name>\r\n    <description>springcloud_sofalookout_server</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>at.twinformatics</groupId>\r\n            <artifactId>eureka-consul-adapter</artifactId>\r\n            <version>1.1.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件如下：\r\n\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n启动类如下：\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaServer //启动服务注册中心\r\npublic class SpringcloudSofalookoutServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudSofalookoutServerApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.Eureka Client\r\n\r\n这里有一些是与之前[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)文章不同的地方，首先在pom文件中加入sofa依赖：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_sofalookout_client</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_sofalookout_client</name>\r\n    <description>springcloud_sofalookout_client</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.alipay.sofa.lookout</groupId>\r\n            <artifactId>lookout-sofa-boot-starter</artifactId>\r\n            <version>1.5.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.alipay.sofa.lookout</groupId>\r\n            <artifactId>lookout-reg-prometheus</artifactId>\r\n            <version>1.5.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件配置如下：\r\n\r\n```\r\n##端口号\r\nserver.port=8888\r\n##服务名称\r\nspring.application.name=springboot_sofalookout_client\r\n##EurekaServer\r\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\r\n\r\ncom.alipay.sofa.lookout.prometheus-exporter-server-port=8081\r\neureka.instance.metadata-map.address=${spring.cloud.client.ip-address}:${com.alipay.sofa.lookout.prometheus-exporter-server-port}\r\n\r\n\r\n\r\n\r\n```\r\n\r\n其中需要解释如下两个参数：\r\n\r\n* com.alipay.sofa.lookout.prometheus-exporter-server-port：sofa-lookout端口\r\n* eureka.instance.metadata-map.address：封装的Eureka元信息，内容是真正sofa-lookout数据的地址，方便稍后prometheus使用，这个属性不是必须要叫这个名字！！！\r\n\r\n## 4.Prometheus\r\n\r\nprometheus配置如下：\r\n\r\n```\r\n# my global config\r\nglobal:\r\n  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\n# Alertmanager configuration\r\nalerting:\r\n  alertmanagers:\r\n  - static_configs:\r\n    - targets:\r\n      # - alertmanager:9093\r\n\r\n# Load rules once and periodically evaluate them according to the global \'evaluation_interval\'.\r\nrule_files:\r\n  # - \"first_rules.yml\"\r\n  # - \"second_rules.yml\"\r\n\r\n# A scrape configuration containing exactly one endpoint to scrape:\r\n# Here it\'s Prometheus itself.\r\nscrape_configs:\r\n  - job_name: \'prometheus\'\r\n    static_configs:\r\n    - targets: [\'127.0.0.1:9090\']\r\n\r\n  - job_name: \'consul-prometheus\'\r\n    consul_sd_configs:\r\n      - server: \'172.16.103.33:8761\'\r\n        services: [SPRINGBOOT_SOFALOOKOUT_CLIENT]\r\n    relabel_configs:\r\n      - source_labels: [\'__meta_consul_metadata_address\']\r\n        target_label:  __address__\r\n\r\n```\r\n\r\n这里有几点需要注意的：\r\n\r\n* 172.16.103.33是我的内网IP，这个不需太多关注。\r\n* relabel_configs标签用于修改一些默认配置，比如本文使用__meta_consul_metadata_address属性替代__address__属性，这里的__meta_consul_metadata_address属性值就是我们在application.properties中的eureka.instance.metadata-map.address属性值，这个是eureka-consul-adapter依赖为我们转换的。\r\n* 上面两个属性怎么获取的？ 接下来告诉你！\r\n\r\n## 5.测试\r\n\r\n分别启动EurekaServer，EurekaClient，prometheus，首先查看Eureka，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/1)\r\n\r\n实例已经注册了，接下来查看prometheus/targets，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/2)\r\n\r\n从这里可以看到，prometheus已经可以成功收集了，接下来我们查看一下都有哪些属性，鼠标放到对应的labels上，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/3)\r\n\r\n浮框的内容就是对应实例的属性值，可以对应使用。\r\n\r\n接下来查看对应Grafana，也可以查看到对应信息了，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/4)\r\n\r\n## 6.源码\r\n\r\nEureka Server源码地址：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_server](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_server)\r\n\r\nEureka Client源码地址：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_client](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_client)', 'dalaoyang', '2019-04-18', 206, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (105, ' 使用JumpServer管理你的服务器', '>本文介绍CentOS 7从安装jumpserver到简单使用jumpserver管理服务器。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/1)\r\n\r\n## 1.Jumpserver介绍\r\n\r\nJumpserver是一款开源的开源的堡垒机，如下图是官网介绍。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/2)\r\n\r\n官网地址：[http://www.jumpserver.org/](http://www.jumpserver.org/)   \r\n官网文档地址：[http://docs.jumpserver.org/zh/docs/index.html](http://docs.jumpserver.org/zh/docs/index.html)   \r\nGithub地址：[https://github.com/jumpserver/jumpserver](https://github.com/jumpserver/jumpserver)\r\n\r\n## 2.安装\r\n\r\n官方文档推荐了很多安装方式，这里由于老杨使用的是使用Docker安装，使用的自己的Redis和Mysql，首先生成随机加密秘钥(SECRET_KEY)，命令如下：\r\n\r\n```\r\nif [ \"$SECRET_KEY\" = \"\" ]; then SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`; echo \"SECRET_KEY=$SECRET_KEY\" >> ~/.bashrc; echo $SECRET_KEY; else echo $SECRET_KEY; fi\r\n```\r\n\r\n然后生成BOOTSTRAP_TOKEN，命令如下：\r\n```\r\nif [ \"$BOOTSTRAP_TOKEN\" = \"\" ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`; echo \"BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN\" >> ~/.bashrc; echo $BOOTSTRAP_TOKEN; else echo $BOOTSTRAP_TOKEN; fi\r\n```\r\n\r\n这里都是按照官方文档命令来的，然后执行Docker命令(注：需自行安装docker)，如下所示。\r\n\r\n\r\n```\r\ndocker run --name jms_all -d \\\r\n    -v /opt/mysql:/var/lib/mysql \\\r\n    -v /opt/jumpserver:/opt/jumpserver/data/media \\\r\n    -p 80:80 \\\r\n    -p 2222:2222 \\\r\n    -e SECRET_KEY=***\\\r\n    -e BOOTSTRAP_TOKEN=*** \\\r\n    -e DB_HOST=*** \\\r\n    -e DB_PORT=*** \\\r\n    -e DB_USER=*** \\\r\n    -e DB_PASSWORD=*** \\\r\n    -e DB_NAME=*** \\\r\n    -e REDIS_HOST=*** \\\r\n    -e REDIS_PORT=*** \\\r\n    -e REDIS_PASSWORD=*** \\\r\n    jumpserver/jms_all:latest\r\n```\r\n\r\n注意如下参数需自行设置：\r\n\r\n* SECRET_KEY：上述步骤中生成的SECRET_KEY\r\n* BOOTSTRAP_TOKEN：上述步骤中生成的BOOTSTRAP_TOKEN\r\n* DB_HOST：数据库地址\r\n* DB_PORT：数据库端口\r\n* DB_USER：数据库用户名\r\n* DB_PASSWORD：数据库密码\r\n* DB_NAME：数据库名称\r\n* REDIS_HOST：Redis地址\r\n* REDIS_PORT：Redis端口\r\n* REDIS_PASSWORD：Redis密码\r\n\r\n当然，官网也声明了：不建议在生产中使用, 因为所有软件都打包到一个Docker中了, 不是Docker最佳实践\r\n\r\n采用其他方法可以参考文档，地址：[http://docs.jumpserver.org/zh/docs/step_by_step.html](http://docs.jumpserver.org/zh/docs/step_by_step.html)\r\n\r\n**这里还有一点，80端口和2222端口不要被占用了！！！**\r\n\r\n## 3.配置\r\n\r\n如果安装没有问题的话，访问对应安装服务器ip地址如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/3)\r\n\r\n\r\n**ps:默认用户名密码都是admin，可以自行修改**\r\n\r\n登录后，如图所示，个人还是很喜欢这个设计风格的。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/4)\r\n\r\n首先在进入**资产管理-管理用户**，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/5)\r\n\r\n介绍一下，这个管理用的意义个人理解就是访问你服务器的账号，点击创建管理用户按钮，进入如图页面\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/6)\r\n\r\n填写如下内容：\r\n\r\n* 名称:这个自行设置。\r\n* 用户名：访问服务器的用户名，比如你远程服务器的用户名root\r\n* 密码：访问服务器的密码\r\n* 私钥：访问服务器的私钥文件\r\n* 备注：备注信息。\r\n\r\n都填写完成后保存即可。\r\n\r\n\r\n接下来需要创建系统用户，何为系统用户呢，官方文档给出了如下解释，\r\n\r\n>系统用户是 Jumpserver跳转登录资产时使用的用户，可以理解为登录资产用户，如 web, sa, dba(ssh web@some-host), 而不是使用某个用户的用户名跳转登录服务器(ssh xiaoming@some-host); 简单来说是 用户使用自己的用户名登录Jumpserver, Jumpserver使用系统用户登录资产。 系统用户创建时，如果选择了自动推送 Jumpserver会使用ansible自动推送系统用户到资产中，如果资产(交换机、windows)不支持ansible, 请手动填写账号密码。目前还不支持Windows的自动推送\r\n\r\n填写内容这里就不介绍了，没什么特别的，根据需要自行设置即可。\r\n\r\n接下来我们回到**资产管理-资产列表**，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/7)\r\n\r\n点击创建资产，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/8)\r\n\r\n其中填写如下必填项:\r\n\r\n* 主机名：自定义即可\r\n* IP：服务器IP\r\n* 协议：根据情况选择\r\n* 端口：根据情况设置\r\n* 系统平台：根据情况选择\r\n* 管理用户：选择刚刚新建的管理用户\r\n\r\n配置完成后保存即可。\r\n\r\n\r\n在下图位置可以查看硬件信息，测试连接等等。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/9)\r\n\r\n接下来进入**权限管理-资产授权   **，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/10)\r\n\r\n点击创建授权规则按钮，进入如图页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/11)\r\n\r\n这里需要填写如下几项信息：\r\n\r\n* 名称：自己设置\r\n* 用户：设置权限用户\r\n* 用户组：设置权限用户组，这两个很好理解，就是给谁授权，或者给哪个组的用户授权\r\n* 资产：哪些服务器\r\n* 节点：类似资产组的概念\r\n* 系统用户：使用刚刚设置的系统用户\r\n\r\n填写完成后点击提交即可。\r\n\r\n## 4.连接使用\r\n\r\n这里我使用的是SecureCRT，新建一个Session Wizard，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/12)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/13)\r\n\r\n然后选择刚刚创建的Session Wizard，输入密码，进入如图页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/14)\r\n\r\n然后输入ID进入对应服务器，比如这里输入3，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/15)\r\n\r\n\r\n接下来的操作就是正常操作服务器了。\r\n\r\n## 5.总结\r\n\r\n个人感觉jumpserver适合将多个平台的服务器整合到一起，然后分配权限使用，如果就一两个的话就没必要搞了，当然，也可以根据个人喜好玩玩。', 'dalaoyang', '2019-04-19', 222, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (106, 'SpringBoot使用Graylog日志收集', '>本文介绍SpringBoot如何使用Graylog日志收集。\r\n\r\n## 1.Graylog介绍\r\n\r\nGraylog是一个生产级别的日志收集系统，集成Mongo和Elasticsearch进行日志收集。其中Mongo用于存储Graylog的元数据信息和配置信息，ElasticSearch用于存储数据。\r\n\r\n架构图如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/1)\r\n\r\n生产环境配置图如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/2)\r\n\r\n\r\n## 2.安装Graylog\r\n\r\n在官方文档上推荐了很多种安装的方式，这里以docker-compose的方式为例，进行安装Graylog，mongo，elasticsearch。\r\n\r\ndocker-compose.yml内容如下（这里是在官网的基础上改了一下）：\r\n\r\n```\r\nversion: \'2\'\r\nservices:\r\n  # MongoDB: https://hub.docker.com/_/mongo/\r\n  mongodb:\r\n    image: mongo:3\r\n  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.6/docker.html\r\n  elasticsearch:\r\n    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1\r\n    environment:\r\n      - http.host=0.0.0.0\r\n      - transport.host=localhost\r\n      - network.host=0.0.0.0\r\n      - \"ES_JAVA_OPTS=-Xms256m -Xmx256m\"\r\n    ulimits:\r\n      memlock:\r\n        soft: -1\r\n        hard: -1\r\n    mem_limit: 512m\r\n  # Graylog: https://hub.docker.com/r/graylog/graylog/\r\n  graylog:\r\n    image: graylog/graylog:3.0\r\n    environment:\r\n      # CHANGE ME (must be at least 16 characters)!\r\n      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper\r\n      # Password: admin\r\n      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\r\n      - GRAYLOG_HTTP_EXTERNAL_URI=http://106.13.35.42:9000/\r\n    links:\r\n      - mongodb:mongo\r\n      - elasticsearch\r\n    depends_on:\r\n      - mongodb\r\n      - elasticsearch\r\n    ports:\r\n      # Graylog web interface and REST API\r\n      - 9000:9000\r\n      # Syslog TCP\r\n      - 1514:1514\r\n      # Syslog UDP\r\n      - 1514:1514/udp\r\n      # GELF TCP\r\n      - 12201:12201\r\n      # GELF UDP\r\n      - 12201:12201/udp\r\n```\r\n\r\n其中106.13.35.42是我的外网ip，本地服务使用127.0.0.1即可。\r\n\r\n其他方式可以查看官方文档，[https://docs.graylog.org/en/3.0/pages/installation.html](https://docs.graylog.org/en/3.0/pages/installation.html)\r\n\r\n\r\n## 3.配置Graylog\r\n\r\n在浏览器访问http://ip:9000，如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/3)\r\n\r\n这里默认用户名密码都是admin，进入后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/4)\r\n\r\n选择System按钮中的input，录入一个输入源，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/5)\r\n\r\n这里以GELF UDP为例，在图中位置选择GELF UDP，选择完成后点击Launch new input，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/6)\r\n\r\n在Node处选择自己安装的，剩下的就根据需要填写即可，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/7)\r\n\r\n保存完成后如图，到这里就已经配置完成了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/8)\r\n\r\n\r\n## 4.SpringBoot日志输出到Graylog\r\n\r\n这里分别举例Logback日志和Log4j2日志。\r\n\r\n### 4.1 Logback日志\r\n\r\n\r\n这里使用的logback-gelf向Graylog输出日志，在github上有对logback-gelf的详细使用介绍，这里只是简单举例。Github地址：[https://github.com/osiegmar/logback-gelf](https://github.com/osiegmar/logback-gelf)。\r\n\r\n\r\n新建项目，加入logback-gelf依赖，pom文件如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_graylog</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_graylog</name>\r\n    <description>springboot2_graylog</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>de.siegmar</groupId>\r\n            <artifactId>logback-gelf</artifactId>\r\n            <version>2.0.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n加入logback日志配置，新建logback-spring.xml，内容如下:\r\n\r\n```\r\n<configuration>\r\n\r\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\r\n    <conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\r\n    <conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\r\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\r\n\r\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder>\r\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\r\n            <charset>UTF-8</charset>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <appender name=\"GELF\" class=\"de.siegmar.logbackgelf.GelfUdpAppender\">\r\n        <graylogHost>106.13.35.42</graylogHost>\r\n        <graylogPort>12201</graylogPort>\r\n    </appender>\r\n\r\n    <!-- 控制台输出日志级别 -->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"GELF\" />\r\n        <appender-ref ref=\"STDOUT\" />\r\n    </root>\r\n\r\n\r\n</configuration>\r\n\r\n```\r\n\r\n启动项目，当前项目端口是8081，查看Graylog控制台如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/9)\r\n\r\n\r\n### 4.2 Log4j2日志\r\n\r\nlog4j2日志使用的是log4j2-gelf依赖，github上面也有对应的介绍，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_graylog_log4j</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_graylog_log4j</name>\r\n    <description>springboot2_graylog_log4j</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n            <exclusions>\r\n                <exclusion>\r\n                    <artifactId>spring-boot-starter-logging</artifactId>\r\n                    <groupId>org.springframework.boot</groupId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-log4j2</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.graylog2.log4j2</groupId>\r\n            <artifactId>log4j2-gelf</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n创建log4j2-spring.xml进行配置输出日志信息，如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"OFF\" packages=\"org.graylog2.log4j2\">\r\n    <Properties>\r\n        <Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss:SSS} - %-5level  - %pid - %t - %c{1.}:%L - %m%n</Property>\r\n    </Properties>\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\r\n            <ThresholdFilter level=\"trace\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\r\n            <PatternLayout pattern=\"${LOG_PATTERN}\"/>\r\n        </Console>\r\n        <GELF name=\"gelfAppender\" server=\"106.13.35.42\" port=\"12201\" hostName=\"appserver01.example.com\">\r\n            <PatternLayout pattern=\"%logger{36} - %msg%n\"/>\r\n            <Filters>\r\n                <Filter type=\"MarkerFilter\" marker=\"FLOW\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <Filter type=\"MarkerFilter\" marker=\"EXCEPTION\" onMatch=\"DENY\" onMismatch=\"ACCEPT\"/>\r\n            </Filters>\r\n            <!-- Additional fields -->\r\n            <KeyValuePair key=\"foo\" value=\"bar\"/>\r\n            <KeyValuePair key=\"jvm\" value=\"${java:vm}\"/>\r\n        </GELF>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"info\">\r\n            <AppenderRef ref=\"gelfAppender\"/>\r\n            <AppenderRef ref=\"Console\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```\r\n\r\n这个项目使用的端口号是8888，可以在日志中清晰的看到。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/10)\r\n\r\n\r\n## 5. ELK vs Graylog\r\n\r\n这里仅以日志收集为例，简单说一下二者之间的选择，我个人的建议就是取决于现有技术栈，比如现在就有现成的Mongodb，那么选择Graylog可以节省不少成本，ELK类似，不要盲目的追求技术而选择。\r\n\r\n## 6. 源码\r\n\r\nspringboot2_graylog源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog)\r\n\r\nspringboot2_graylog_log4j源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog_log4j](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog_log4j)', 'dalaoyang', '2019-04-22', 381, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (107, '使用阿里云OSS上传文件', '>本文介绍如何利用Java API操作阿里云OSS对象存储。\r\n\r\n## 1.控制台操作\r\n\r\n首先介绍一下阿里云OSS对象存储的一些基本概念。\r\n\r\n### 1.1 进入对象存储界面\r\n\r\n登录阿里云账号，进入对象存储界面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/1)\r\n\r\n进入后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/2)\r\n\r\n### 1.2 OSS基本概念\r\n\r\n这里不过多介绍如何在阿里云上传下载文件，这些操作基本上点一点都能找到。\r\n\r\n#### 1.2.1 Bucket\r\n\r\nBucket实质就是阿里云OSS对象存储的一个存储空间，按照计算机理解的话可以理解为一个磁盘（不知道这样比喻是否恰当）。\r\n\r\n创建桶的过程很简单，如图所示，填写对应内容即可。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/3)\r\n\r\n这里需要注意，不同分区的Endpoint是不同的，Endpoint在后续API使用过程中会用到。至于存储类型和读写权限相关设置，都结合自身情况来使用，这里以标准存储和私有权限为例进行介绍。\r\n\r\n#### 1.2.2 AccessKey\r\n\r\nAccessKey是访问阿里云API的秘钥，这里也需要提前创建一份，创建后我们需要记住自己的AccessKey ID和Access Key Secret，如果忘记可以在如图位置查询。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/4)\r\n\r\n\r\n\r\n## 2 API使用\r\n\r\n### 2.1 API地址\r\n\r\n一般使用对象存储无非就是上传和下载文件，完整API地址如下：\r\n\r\n[https://help.aliyun.com/document_detail/32015.html?spm=5176.8466032.bucket-object.1.33ac1450TuX65y](https://help.aliyun.com/document_detail/32015.html?spm=5176.8466032.bucket-object.1.33ac1450TuX65y)\r\n\r\n\r\n### 2.2 API使用准备\r\n\r\nJava使用很简单，直接在Maven中引用依赖，如下：\r\n\r\n```\r\n<dependency>\r\n    <groupId>com.aliyun.oss</groupId>\r\n    <artifactId>aliyun-sdk-oss</artifactId>\r\n    <version>2.8.3</version>\r\n</dependency>\r\n```\r\n\r\n### 2.3 构建OSSClient实例\r\n\r\n这里就需要用到我们上面提到的endpoint和AccessKey，构建实例内容如下所示。\r\n\r\n```\r\n// Endpoint以杭州为例，其它Region请按实际情况填写。\r\nString endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n// 使用刚刚创建的accessKeyId和accessKeySecret\r\nString accessKeyId = \"<yourAccessKeyId>\";\r\nString accessKeySecret = \"<yourAccessKeySecret>\";\r\n\r\n// 创建OSSClient实例。\r\nOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n//todo 对OSS进行操作\r\n\r\n// 关闭OSSClient。\r\nossClient.shutdown();\r\n```\r\n\r\n### 2.4 上传文件\r\n\r\n上传文件常用的方式大致为两种，一种是返回可以查看文件的地址，另外一种是通过地址可以直接下载文件。\r\n\r\n#### 2.4.1 上传文件，返回可以预览图片的地址\r\n\r\n上传文件有一些需要注意的地方：\r\n\r\n* 1.文件名不要重复，不然会覆盖。\r\n* 2.建议将不同日期的文件分别创建一个文件夹方便区分。\r\n\r\n这里先以上传本地桌面的一个图片为例，上传后在Bucket内自动创建日期格式yyyyMMdd的文件夹存放文件，文件名按照当前时间戳加随机数的形式拼接，由于返回的URL是带有签名信息的，所以这里暂时设置过期时间为一小时，如果需要可以将时间加长。\r\n\r\n完整内容如下所示：\r\n\r\n```\r\npackage com.dalaoyang.upload;\r\n\r\nimport com.aliyun.oss.OSSClient;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.security.SecureRandom;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class AliyunUpload {\r\n\r\n    public static void main(String[] args) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n        String accessKeyId = \"LTAIRr3alAhROGTA\";\r\n        String accessKeySecret = \"******\";\r\n        String fileName = \"/Users/dalaoyang/Desktop/aliyun.jpeg\";\r\n        String bucketName = \"dalaoyang-test\";\r\n        // 获取文件的后缀名\r\n        String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\r\n        // 生成上传文件名\r\n        String finalFileName = System.currentTimeMillis() + \"\" + new SecureRandom().nextInt(0x0400) + suffixName;\r\n        String objectName = sdf.format(new Date()) + \"/\" + finalFileName;\r\n        File file = new File(fileName);\r\n        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n        ossClient.putObject(bucketName, objectName, file);\r\n        // 设置URL过期时间为1小时。\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600 * 1000);\r\n        // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。\r\n        URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);\r\n        ossClient.shutdown();\r\n        System.out.println(url.toString());\r\n    }\r\n}\r\n\r\n```\r\n\r\n返回地址格式如下：\r\n\r\n```\r\nhttp://dalaoyang-test.oss-cn-beijing.aliyuncs.com/20190518/1558155342968407.jpeg?Expires=1558158948&OSSAccessKeyId=LTAIRr3alAhROGTA&Signature=%2BIjVpD%2BTWrRmSt4kU7axo6Cnqbw%3D\r\n```\r\n\r\n浏览器访问如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/5)\r\n\r\n在阿里云OSS中查看如图所示，可以看到文件夹也对应的创建了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/6)\r\n\r\n\r\n#### 2.4.2 上传文件，返回可以直接下载图片的地址\r\n\r\n这个和上面其实类似，如果需要返回可以直接下载的地址的话，只要设置一下文件的contentDisposition为attachment;即可，完整内容如下：\r\n\r\n```\r\npackage com.dalaoyang.upload;\r\n\r\nimport com.aliyun.oss.OSSClient;\r\nimport com.aliyun.oss.model.ObjectMetadata;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.security.SecureRandom;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class AliyunUpload {\r\n\r\n    public static void main(String[] args) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n        String accessKeyId = \"LTAIRr3alAhROGTA\";\r\n        String accessKeySecret = \"******\";\r\n        String fileName = \"/Users/dalaoyang/Desktop/WechatIMG4.png\";\r\n        String bucketName = \"dalaoyang-test\";\r\n        // 获取文件的后缀名\r\n        String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\r\n        // 生成上传文件名\r\n        String finalFileName = System.currentTimeMillis() + \"\" + new SecureRandom().nextInt(0x0400) + suffixName;\r\n        String objectName = sdf.format(new Date()) + \"/\" + finalFileName;\r\n        File file = new File(fileName);\r\n\r\n        ObjectMetadata meta = new ObjectMetadata();\r\n        meta.setContentDisposition(\"attachment;\");\r\n        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n        ossClient.putObject(bucketName, objectName, file, meta);\r\n        // 设置URL过期时间为1小时。\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600 * 1000);\r\n        // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。\r\n        URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);\r\n        ossClient.shutdown();\r\n        System.out.println(url.toString());\r\n    }\r\n}\r\n\r\n```\r\n\r\n这次返回的地址在浏览器访问直接下载下来了文件。\r\n\r\n\r\n## 3 小结\r\n\r\n对于阿里云OSS操作还是有很多玩法的，比如上传下载带进度条，分段上传等等，需要的话可以根据场景去玩。', 'dalaoyang', '2019-05-18', 163, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (108, '使用logstash同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用logstash同步mysql数据库信息到ElasticSearch.\r\n\r\n## 1.准备工作\r\n\r\n### 1.1 安装JDK\r\n\r\n网上文章比较多，可以参考：[https://www.dalaoyang.cn/article/16](https://www.dalaoyang.cn/article/16)。\r\n\r\n### 1.2 安装Logstash\r\n\r\n我使用了5.x版本和6.x版本，可以参考：[https://www.dalaoyang.cn/article/80](https://www.dalaoyang.cn/article/80)。\r\n\r\n**7.x版本未尝试！！！**\r\n\r\n### 1.3 安装ruby\r\n\r\n安装过程可以参考：[https://blog.csdn.net/qq_26440803/article/details/82717244](https://blog.csdn.net/qq_26440803/article/details/82717244)，已经非常详细了。\r\n\r\n### 1.4 安装gem\r\n\r\n安装\r\n\r\n```\r\nyum install gem\r\n```\r\n\r\ngem源修改\r\n\r\n```\r\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\r\n```\r\n\r\n### 1.5 修改logstash中的Gemfile和Gemfile.jruby-1.9.lock文件\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/1.jpg)\r\n\r\n修改上图中Gemfile文件红框位置为\r\n\r\n```\r\nsource \"https://gems.ruby-china.com/\"\r\n```\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/2.png)\r\n\r\n修改上图中Gemfile.jruby-1.9.lock文件(**其他版本logstash可能不叫这个名字，但是名字类似**)红框位置为\r\n\r\n```\r\nremote: https://gems.ruby-china.com/\r\n```\r\n\r\n### 1.6 安装bundler\r\n\r\n安装\r\n```\r\ngem install bundler\r\n```\r\n\r\n### 1.7 安装logstash-input-jdbc插件\r\n\r\n安装\r\n\r\n```\r\nbin/logstash-plugin  install logstash-input-jdbc\r\n```\r\n\r\n### 1.8 准备mysql-connector-java-x.x.x.jar\r\n\r\n需要准备一个mysql-connector-java-x.x.x.jar对应版本的jar，这里使用的是mysql-connector-java-5.1.6.jar。\r\n\r\n这个可以去官网下载：[https://dev.mysql.com/downloads/connector/j/5.1.html](https://dev.mysql.com/downloads/connector/j/5.1.html)\r\n\r\n## 2.配置logstash\r\n\r\n创建mysql-es.conf配置文件，名称可以自定，这里数据表以我博客友情链接表为例，内容如下：\r\n\r\n```\r\ninput {\r\n  jdbc {\r\n    # 驱动包位置\r\n    jdbc_driver_library => \"/usr/local/logstash/logstash-5.6.16/mysql-connector-java-5.1.6.jar\"\r\n    # 驱动\r\n    jdbc_driver_class => \"com.mysql.jdbc.Driver\"\r\n    # 数据库地址\r\n    jdbc_connection_string => \"jdbc:mysql://ip:3306/dalaoyang\"\r\n    # 数据库连接用户名\r\n    jdbc_user => \"root\"\r\n    # 数据库连接用户密码\r\n    jdbc_password => \"password\"\r\n    # 执行sql语句文件位置\r\n    # statement_filepath => \"filename.sql\"\r\n    # 执行sql\r\n    statement => \"SELECT * from link_info\"\r\n    # 是否分页\r\n    jdbc_paging_enabled => \"true\"\r\n    # 分页数量\r\n    jdbc_page_size => \"50000\"\r\n    type => \"jdbc\"\r\n    tracking_column => \"update_date\"\r\n    use_column_value => false\r\n    # 执行任务时间间隔，各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新\r\n    schedule => \"* * * * *\"\r\n  }\r\n}\r\n \r\n \r\noutput {\r\n  elasticsearch {\r\n        hosts => \"ip:端口\"\r\n        index => \"test-mysql\"\r\n        # 数据库中的id\r\n        document_id => \"%{link_id}\"\r\n  }\r\n}\r\n```\r\n\r\n## 3.启动logstash\r\n\r\n执行命令启动\r\n```\r\nbin/logstash  -f mysql-es.conf\r\n```\r\n\r\n启动后可以看到如图所示\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/3.jpg)\r\n\r\n## 4.查看ElasticSearch\r\n\r\n在ElasticSearch-head中可以看到对应mysql中的数据，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/4.jpg)\r\n\r\n## 5.总结\r\n\r\n总的来说过程还是很简单的，没有遇到太大的问题，这只是mysql同步es的一种方式，还有很多方式可以使用。', 'dalaoyang', '2019-06-11', 84, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (109, '使用go-mysql-elasticsearch同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用go-mysql-elasticsearch同步mysql数据库信息到ElasticSearch。\r\n\r\n\r\n## 1.go-mysql-elasticsearch简介\r\n\r\ngo-mysql-elasticsearch是一个将MySQL数据自动同步到Elasticsearch的服务。\r\n\r\n它首先使用mysqldump获取原始数据，然后用binlog增量地同步数据。\r\n\r\ngithub地址：[https://github.com/siddontang/go-mysql-elasticsearch](https://github.com/siddontang/go-mysql-elasticsearch)\r\n\r\n**这里有几点注意事项：**\r\n\r\n* 1.Mysql的binlog必须是ROW模式，不然启动会报错。\r\n* 2.连接Mysql的用户权限需要大一些。\r\n\r\n## 2.安装\r\n\r\n### 2.1 安装go\r\n\r\n安装go\r\n```\r\nyum install -y go\r\n```\r\n\r\n安装godep\r\n```\r\ngo get github.com/tools/godep\r\n```\r\n\r\n下载go-mysql-elastisearch插件\r\n```\r\ngo get github.com/siddontang/go-mysql-elasticsearch\r\n```\r\n\r\n进入对应目录，比如我使用的如下目录/root/go/src/github.com/siddontang/go-mysql-elasticsearch\r\n\r\n```\r\ncd /root/go/src/github.com/siddontang/go-mysql-elasticsearch\r\n```\r\n\r\n编译\r\n```\r\nmake\r\n```\r\n\r\n### 2.2 Mysql开启binlog\r\n\r\n接下来需要在mysql中开启binlog，首先查询一下是否开启了binlog。\r\n\r\n进入mysql\r\n```\r\nmysql -uroot -p\r\n```\r\n\r\n输入密码，然后输入如下命令查看binlog开启状态\r\n```\r\nshow variables like \'%log_bin%\';\r\n```\r\n\r\n如图所示，ON为开启了，如果没有开启的话为OFF。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/1.jpg)\r\n\r\n\r\n如果没有开启的话，需要在my.cnf配置中添加如下配置(其中server-id可以根据情况设置，这里设置为1，log-bin为日志位置，一定要给日志写的权限，不然会报错，binlog_format为模式，这里必须为ROW)：\r\n\r\n```\r\nserver-id=1\r\nlog-bin=/usr/local/mysql-log/mysql-bin.log\r\nbinlog_format=\"ROW\"\r\n```\r\n\r\n设置完成后重启mysql.\r\n\r\n```\r\nservice mysqld restart\r\n```\r\n\r\n如图重启成功，如果失败可以查看一下错误日志，这里不做过多介绍。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/2.jpg)\r\n\r\n## 3.配置go-mysql-elasticsearch\r\n\r\n需要配置一下go-mysql-elasticsearch，样例在：[https://github.com/siddontang/go-mysql-elasticsearch/blob/master/etc/river.toml](https://github.com/siddontang/go-mysql-elasticsearch/blob/master/etc/river.toml)\r\n\r\n\r\n本文测试的配置文件内容如下：\r\n\r\n```\r\n# MySQL 配置：地址，用户名，密码\r\nmy_addr = \"ip:3306\"     \r\nmy_user = \"root\"\r\nmy_pass = \"***\"\r\n\r\n# Elasticsearch地址\r\nes_addr = \"ip:端口\"\r\n    \r\n# 存储数据的位置\r\ndata_dir = \"./var\"\r\n    \r\n# Inner Http status address\r\nstat_addr = \"127.0.0.1:12800\"\r\n    \r\n# pseudo server id like a slave\r\nserver_id = 1001\r\n    \r\n# mysql or mariadb\r\nflavor = \"mysql\"\r\n    \r\n# mysql备份文件，如果不设置或设置为空，则跳过\r\n# mysqldump = \"mysqldump\"\r\n    \r\n# minimal items to be inserted in one bulk\r\nbulk_size = 128\r\n    \r\n# force flush the pending requests if we don\'t have enough items >= bulk_size\r\nflush_bulk_time = \"200ms\"\r\n    \r\n# Ignore table without primary key\r\nskip_no_pk_table = false\r\n    \r\n# MySQL数据源，schema：数据库，tables：表\r\n[[source]]\r\nschema = \"test\"\r\ntables = [\"link_info\"]\r\n\r\n[[rule]]\r\nschema = \"test\"\r\ntable = \"link_info\"\r\nindex = \"test_mysql2\"\r\ntype = \"link_info\"\r\n\r\n```\r\n\r\n## 4.运行go-mysql-elasticsearch\r\n\r\n配置完成后，运行go-mysql-elasticsearch\r\n\r\n```\r\nbin/go-mysql-elasticsearch -config=river.toml\r\n```\r\n\r\n如图所示运行成功。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/3.png)\r\n\r\n## 5.检验\r\n\r\n查看es-head，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/4.jpg)\r\n\r\n数据都存在，然后修改id为5的数据，查看go-mysql-elasticsearch控制台，果然监听到了变化，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/5.jpg)\r\n\r\n在次查看es-head，如图，数据也变化了。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/6.jpg)\r\n\r\n## 6.总结\r\n\r\n由于没上过生产，所以只对我个人测试使用进行评价，安装上和数据同步感觉很友好，因为结合binlog的原因，可以实现同步增删改。对于网上说的日志很少和不成熟等说法，这里不评价。', 'dalaoyang', '2019-06-13', 101, 'Y', '1', 'Y');
INSERT INTO `ARTICLE_INFO` VALUES (110, '使用canal增量同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用canal增量同步mysql数据库信息到ElasticSearch。（注意：是增量！！！）\n\n## 1.简介\n\n### 1.1 canal介绍\n\nCanal是一个基于MySQL二进制日志的高性能数据同步系统。Canal广泛用于阿里巴巴集团（包括[https://www.taobao.com](https://www.taobao.com)），以提供可靠的低延迟增量数据管道，github地址：[https://github.com/alibaba/canal](https://github.com/alibaba/canal)\n\nCanal Server能够解析MySQL binlog并订阅数据更改，而Canal Client可以实现将更改广播到任何地方，例如数据库和Apache Kafka。\n\n它具有以下功能：\n\n1. 支持所有平台。\n2. 支持由Prometheus提供支持的细粒度系统监控。\n3. 支持通过不同方式解析和订阅MySQL binlog，例如通过GTID。\n4. 支持高性能，实时数据同步。（详见Performance）\n5. Canal Server和Canal Client都支持HA / Scalability，由Apache ZooKeeper提供支持\n6. Docker支持。\n\n缺点：\n\n不支持全量更新，只支持增量更新。\n\n完整wiki地址：[https://github.com/alibaba/canal/wiki](https://github.com/alibaba/canal/wiki)\n\n### 1.2 运作原理\n\n原理很简单：\n\n1. Canal模拟MySQL的slave的交互协议，伪装成mysql slave，并将转发协议发送到MySQL Master服务器。\n2. MySQL Master接收到转储请求并开始将二进制日志推送到slave（即canal）。\n3. Canal将二进制日志对象解析为自己的数据类型（原始字节流）\n\n\n如图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/1.jpeg)\n\n### 1.3 同步es\n\n在同步数据到es的时候需要使用适配器：canal adapter。目前最新版本1.1.3，下载地址：[https://github.com/alibaba/canal/releases](https://github.com/alibaba/canal/releases)。\n\n**目前es貌似支持6.x版本，不支持7.x版本！！！**\n\n\n## 2.准备工作\n### 2.1 es和jdk\n\n安装es可以参考：[https://www.dalaoyang.cn/article/78](https://www.dalaoyang.cn/article/78)\n\n安装jdk可以参考：[https://www.dalaoyang.cn/article/16](https://www.dalaoyang.cn/article/16)\n\n### 2.2 安装canal server\n\n下载canal.deployer-1.1.3.tar.gz\n\n```\nwget https://github.com/alibaba/canal/releases/download/canal-1.1.3/canal.deployer-1.1.3.tar.gz\n```\n\n解压文件\n\n```\ntar -zxvf canal.deployer-1.1.3.tar.gz\n```\n\n进入解压后的文件夹\n\n```\ncd canal.deployer-1.1.3\n```\n\n修改conf/example/instance.properties文件，主要注意以下几处：\n\n* canal.instance.master.address：数据库地址，例如127.0.0.1:3306\n* canal.instance.dbUsername：数据库用户\n* canal.instance.dbPassword：数据库密码\n\n完整内容如下：\n```\n#################################################\n## mysql serverId , v1.0.26+ will autoGen\n# canal.instance.mysql.slaveId=0\n\n# enable gtid use true/false\ncanal.instance.gtidon=false\n\n# position info\ncanal.instance.master.address=127.0.0.1:3306\ncanal.instance.master.journal.name=\ncanal.instance.master.position=\ncanal.instance.master.timestamp=\ncanal.instance.master.gtid=\n\n# rds oss binlog\ncanal.instance.rds.accesskey=\ncanal.instance.rds.secretkey=\ncanal.instance.rds.instanceId=\n\n# table meta tsdb info\ncanal.instance.tsdb.enable=true\n#canal.instance.tsdb.url=\n#canal.instance.tsdb.dbUsername=\n#canal.instance.tsdb.dbPassword=\n\n#canal.instance.standby.address =\n#canal.instance.standby.journal.name =\n#canal.instance.standby.position =\n#canal.instance.standby.timestamp =\n#canal.instance.standby.gtid=\n\n# username/password\ncanal.instance.dbUsername=root\ncanal.instance.dbPassword=12345678\ncanal.instance.connectionCharset = UTF-8\n# enable druid Decrypt database password\ncanal.instance.enableDruid=false\n#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==\n\n# table regex\ncanal.instance.filter.regex=.*\\\\..*\n# table black regex\ncanal.instance.filter.black.regex=\n\n# mq config\n#canal.mq.topic=example\n# dynamic topic route by schema or table regex\n#canal.mq.dynamicTopic=mytest1.user,mytest2\\\\..*,.*\\\\..*\n#canal.mq.partition=0\n# hash partition config\n#canal.mq.partitionsNum=3\n#canal.mq.partitionHash=test.table:id^name,.*\\\\..*\n#################################################\n\n```\n\n回到canal.deployer-1.1.3目录下，启动canal：\n\n```\nsh bin/startup.sh\n```\n\n查看日志：\n\n```\nvi logs/canal/canal.log\n```\n\n 查看具体instance日志：\n \n```\n vi logs/example/example.log\n```\n\n关闭命令\n\n```\nsh bin/stop.sh\n```\n\n### 2.3 安装canal-adapter\n\n下载canal.adapter-1.1.3.tar.gz\n\n```\nwget https://github.com/alibaba/canal/releases/download/canal-1.1.3/canal.adapter-1.1.3.tar.gz\n```\n\n解压\n\n```\ntar -zxvf canal.adapter-1.1.3.tar.gz\n```\n\n进入解压后的文件夹\n\n```\ncd canal.adapter-1.1.3\n```\n\n修改conf/application.yml文件，主要注意如下内容，由于是yml文件，注意我这里说明的属性名称：\n\n* server.port:canal-adapter端口号\n* canal.conf.canalServerHost:canal-server地址和ip\n* canal.conf.srcDataSources.defaultDS.url:数据库地址\n* canal.conf.srcDataSources.defaultDS.username:数据库用户名\n* canal.conf.srcDataSources.defaultDS.password:数据库密码\n* canal.conf.canalAdapters.groups.outerAdapters.hosts:es主机地址,tcp端口\n\n完整内容如下：\n```\nserver:\n  port: 8081\nspring:\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    default-property-inclusion: non_null\n\n\ncanal.conf:\n  mode: tcp\n  canalServerHost: 127.0.0.1:11111\n  batchSize: 500\n  syncBatchSize: 1000\n  retries: 0\n  timeout:\n  accessKey:\n  secretKey:\n  srcDataSources:\n    defaultDS:\n      url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true\n      username: root\n      password: 12345678\n  canalAdapters:\n  - instance: example\n    groups:\n    - groupId: g1\n      outerAdapters:\n      - name: es\n        hosts: 127.0.0.1:9300\n        properties:\n         cluster.name: elasticsearch\n```\n\n\n另外需要配置conf/es/*.yml文件，adapter将会自动加载conf / es下的所有.yml结尾的配置文件。在介绍配置前，需要先介绍一下本案例使用的表结构，如下：\n\n```\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL,\n  `name` varchar(200) NOT NULL,\n  `address` varchar(1000) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n需要手动去es中创建索引，比如这里使用es-head创建，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/2.jpg)\n\ntest索引结构如下：\n```\n{\n    \"mappings\":{\n        \"_doc\":{\n            \"properties\":{\n                \"name\":{\n                    \"type\":\"text\"\n                },\n                \"address\":{\n                    \"type\":\"text\"\n                }\n            }\n        }\n    }\n}\n```\n\n接下来创建test.yml（文件名随意），内容很好理解_index为索引名称，sql为对应语句，内容如下：\n\n```\ndataSourceKey: defaultDS\ndestination: example\ngroupId:\nesMapping:\n  _index: test\n  _type: _doc\n  _id: _id\n  upsert: true\n  sql: \"select a.id as _id,a.name,a.address from test a\"\n  commitBatch: 3000\n```\n\n\n配置完成后，回到canal-adapter根目录，执行命令启动\n\n```\nbin/startup.sh\n```\n\n查看日志\n\n```\nvi logs/adapter/adapter.log\n```\n\n关闭canal-adapter命令\n\n```\nbin/stop.sh\n```\n\n## 3.测试\n\n都启动成功后，先查看一下es-head，如图，现在是没有任何数据的。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/3.jpg)\n\n\n接下来，我们在数据库中插入一条数据进行测试，语句如下：\n\n```\nINSERT INTO `test`.`test`(`id`, `name`, `address`) VALUES (7, \'北京\', \'北京市朝阳区\');\n```\n\n然后在看一下es-head，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/4.jpg)\n\n\n接下来看一下日志，如下：\n\n```\n2019-06-22 17:54:15.385 [pool-2-thread-1] DEBUG c.a.otter.canal.client.adapter.es.service.ESSyncService - DML: {\"data\":[{\"id\":7,\"name\":\"北京\",\"address\":\"北京市朝阳区\"}],\"database\":\"test\",\"destination\":\"example\",\"es\":1561197255000,\"groupId\":null,\"isDdl\":false,\"old\":null,\"pkNames\":[\"id\"],\"sql\":\"\",\"table\":\"test\",\"ts\":1561197255384,\"type\":\"INSERT\"} \nAffected indexes: test \n```\n\n小知识点：上面介绍的查看日志的方法可能不是很好用，推荐使用如下语法，比如查看日志最后200行：\n\n```\ntail -200f logs/adapter/adapter.log\n```\n\n\n## 4.总结\n\n1.全量更新不能实现，但是增删改都是可以的。\n2.一定要提前创建好索引。\n3.es配置的是tcp端口，比如默认的9300', 'dalaoyang', '2019-06-22', 52, 'Y', '1', 'Y');
COMMIT;

-- ----------------------------
-- Table structure for ARTICLE_TAG
-- ----------------------------
DROP TABLE IF EXISTS `ARTICLE_TAG`;
CREATE TABLE `article_tag` (
  `ARTICLE_ID` int(11) NOT NULL COMMENT '文章id',
  `TAG_ID` int(11) NOT NULL COMMENT '标签id',
  PRIMARY KEY (`ARTICLE_ID`,`TAG_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ARTICLE_TAG
-- ----------------------------
BEGIN;
INSERT INTO `ARTICLE_TAG` VALUES (1, 1);
INSERT INTO `ARTICLE_TAG` VALUES (1, 10);
INSERT INTO `ARTICLE_TAG` VALUES (2, 1);
INSERT INTO `ARTICLE_TAG` VALUES (3, 1);
INSERT INTO `ARTICLE_TAG` VALUES (4, 1);
INSERT INTO `ARTICLE_TAG` VALUES (5, 9);
INSERT INTO `ARTICLE_TAG` VALUES (6, 1);
INSERT INTO `ARTICLE_TAG` VALUES (7, 2);
INSERT INTO `ARTICLE_TAG` VALUES (7, 24);
INSERT INTO `ARTICLE_TAG` VALUES (8, 5);
INSERT INTO `ARTICLE_TAG` VALUES (9, 10);
INSERT INTO `ARTICLE_TAG` VALUES (10, 1);
INSERT INTO `ARTICLE_TAG` VALUES (11, 1);
INSERT INTO `ARTICLE_TAG` VALUES (11, 7);
INSERT INTO `ARTICLE_TAG` VALUES (11, 8);
INSERT INTO `ARTICLE_TAG` VALUES (12, 4);
INSERT INTO `ARTICLE_TAG` VALUES (12, 7);
INSERT INTO `ARTICLE_TAG` VALUES (13, 1);
INSERT INTO `ARTICLE_TAG` VALUES (14, 2);
INSERT INTO `ARTICLE_TAG` VALUES (15, 3);
INSERT INTO `ARTICLE_TAG` VALUES (16, 4);
INSERT INTO `ARTICLE_TAG` VALUES (17, 1);
INSERT INTO `ARTICLE_TAG` VALUES (17, 11);
INSERT INTO `ARTICLE_TAG` VALUES (18, 1);
INSERT INTO `ARTICLE_TAG` VALUES (18, 6);
INSERT INTO `ARTICLE_TAG` VALUES (19, 1);
INSERT INTO `ARTICLE_TAG` VALUES (20, 1);
INSERT INTO `ARTICLE_TAG` VALUES (21, 1);
INSERT INTO `ARTICLE_TAG` VALUES (22, 1);
INSERT INTO `ARTICLE_TAG` VALUES (23, 1);
INSERT INTO `ARTICLE_TAG` VALUES (24, 1);
INSERT INTO `ARTICLE_TAG` VALUES (25, 1);
INSERT INTO `ARTICLE_TAG` VALUES (26, 1);
INSERT INTO `ARTICLE_TAG` VALUES (26, 6);
INSERT INTO `ARTICLE_TAG` VALUES (26, 12);
INSERT INTO `ARTICLE_TAG` VALUES (27, 1);
INSERT INTO `ARTICLE_TAG` VALUES (28, 4);
INSERT INTO `ARTICLE_TAG` VALUES (28, 13);
INSERT INTO `ARTICLE_TAG` VALUES (29, 4);
INSERT INTO `ARTICLE_TAG` VALUES (29, 14);
INSERT INTO `ARTICLE_TAG` VALUES (30, 4);
INSERT INTO `ARTICLE_TAG` VALUES (30, 15);
INSERT INTO `ARTICLE_TAG` VALUES (31, 4);
INSERT INTO `ARTICLE_TAG` VALUES (31, 9);
INSERT INTO `ARTICLE_TAG` VALUES (32, 1);
INSERT INTO `ARTICLE_TAG` VALUES (32, 16);
INSERT INTO `ARTICLE_TAG` VALUES (33, 1);
INSERT INTO `ARTICLE_TAG` VALUES (34, 2);
INSERT INTO `ARTICLE_TAG` VALUES (35, 4);
INSERT INTO `ARTICLE_TAG` VALUES (35, 16);
INSERT INTO `ARTICLE_TAG` VALUES (36, 2);
INSERT INTO `ARTICLE_TAG` VALUES (37, 2);
INSERT INTO `ARTICLE_TAG` VALUES (38, 2);
INSERT INTO `ARTICLE_TAG` VALUES (39, 2);
INSERT INTO `ARTICLE_TAG` VALUES (40, 2);
INSERT INTO `ARTICLE_TAG` VALUES (41, 1);
INSERT INTO `ARTICLE_TAG` VALUES (42, 2);
INSERT INTO `ARTICLE_TAG` VALUES (43, 1);
INSERT INTO `ARTICLE_TAG` VALUES (45, 1);
INSERT INTO `ARTICLE_TAG` VALUES (46, 1);
INSERT INTO `ARTICLE_TAG` VALUES (47, 1);
INSERT INTO `ARTICLE_TAG` VALUES (48, 1);
INSERT INTO `ARTICLE_TAG` VALUES (49, 1);
INSERT INTO `ARTICLE_TAG` VALUES (49, 19);
INSERT INTO `ARTICLE_TAG` VALUES (50, 5);
INSERT INTO `ARTICLE_TAG` VALUES (51, 4);
INSERT INTO `ARTICLE_TAG` VALUES (51, 17);
INSERT INTO `ARTICLE_TAG` VALUES (52, 1);
INSERT INTO `ARTICLE_TAG` VALUES (52, 17);
INSERT INTO `ARTICLE_TAG` VALUES (53, 1);
INSERT INTO `ARTICLE_TAG` VALUES (53, 18);
INSERT INTO `ARTICLE_TAG` VALUES (54, 1);
INSERT INTO `ARTICLE_TAG` VALUES (55, 3);
INSERT INTO `ARTICLE_TAG` VALUES (55, 4);
INSERT INTO `ARTICLE_TAG` VALUES (56, 4);
INSERT INTO `ARTICLE_TAG` VALUES (56, 20);
INSERT INTO `ARTICLE_TAG` VALUES (57, 10);
INSERT INTO `ARTICLE_TAG` VALUES (58, 1);
INSERT INTO `ARTICLE_TAG` VALUES (58, 13);
INSERT INTO `ARTICLE_TAG` VALUES (59, 1);
INSERT INTO `ARTICLE_TAG` VALUES (60, 1);
INSERT INTO `ARTICLE_TAG` VALUES (61, 1);
INSERT INTO `ARTICLE_TAG` VALUES (61, 10);
INSERT INTO `ARTICLE_TAG` VALUES (63, 1);
INSERT INTO `ARTICLE_TAG` VALUES (63, 22);
INSERT INTO `ARTICLE_TAG` VALUES (63, 23);
INSERT INTO `ARTICLE_TAG` VALUES (64, 2);
INSERT INTO `ARTICLE_TAG` VALUES (64, 24);
INSERT INTO `ARTICLE_TAG` VALUES (64, 25);
INSERT INTO `ARTICLE_TAG` VALUES (65, 1);
INSERT INTO `ARTICLE_TAG` VALUES (65, 11);
INSERT INTO `ARTICLE_TAG` VALUES (66, 1);
INSERT INTO `ARTICLE_TAG` VALUES (66, 11);
INSERT INTO `ARTICLE_TAG` VALUES (67, 1);
INSERT INTO `ARTICLE_TAG` VALUES (67, 26);
INSERT INTO `ARTICLE_TAG` VALUES (67, 27);
INSERT INTO `ARTICLE_TAG` VALUES (68, 1);
INSERT INTO `ARTICLE_TAG` VALUES (69, 1);
INSERT INTO `ARTICLE_TAG` VALUES (69, 28);
INSERT INTO `ARTICLE_TAG` VALUES (70, 1);
INSERT INTO `ARTICLE_TAG` VALUES (70, 14);
INSERT INTO `ARTICLE_TAG` VALUES (71, 1);
INSERT INTO `ARTICLE_TAG` VALUES (71, 29);
INSERT INTO `ARTICLE_TAG` VALUES (72, 3);
INSERT INTO `ARTICLE_TAG` VALUES (73, 2);
INSERT INTO `ARTICLE_TAG` VALUES (73, 30);
INSERT INTO `ARTICLE_TAG` VALUES (74, 1);
INSERT INTO `ARTICLE_TAG` VALUES (74, 31);
INSERT INTO `ARTICLE_TAG` VALUES (75, 1);
INSERT INTO `ARTICLE_TAG` VALUES (75, 32);
INSERT INTO `ARTICLE_TAG` VALUES (76, 1);
INSERT INTO `ARTICLE_TAG` VALUES (76, 18);
INSERT INTO `ARTICLE_TAG` VALUES (76, 28);
INSERT INTO `ARTICLE_TAG` VALUES (77, 4);
INSERT INTO `ARTICLE_TAG` VALUES (77, 33);
INSERT INTO `ARTICLE_TAG` VALUES (78, 4);
INSERT INTO `ARTICLE_TAG` VALUES (78, 17);
INSERT INTO `ARTICLE_TAG` VALUES (78, 36);
INSERT INTO `ARTICLE_TAG` VALUES (79, 34);
INSERT INTO `ARTICLE_TAG` VALUES (79, 36);
INSERT INTO `ARTICLE_TAG` VALUES (80, 35);
INSERT INTO `ARTICLE_TAG` VALUES (80, 36);
INSERT INTO `ARTICLE_TAG` VALUES (81, 3);
INSERT INTO `ARTICLE_TAG` VALUES (81, 37);
INSERT INTO `ARTICLE_TAG` VALUES (82, 16);
INSERT INTO `ARTICLE_TAG` VALUES (82, 17);
INSERT INTO `ARTICLE_TAG` VALUES (82, 34);
INSERT INTO `ARTICLE_TAG` VALUES (82, 35);
INSERT INTO `ARTICLE_TAG` VALUES (82, 36);
INSERT INTO `ARTICLE_TAG` VALUES (83, 1);
INSERT INTO `ARTICLE_TAG` VALUES (83, 9);
INSERT INTO `ARTICLE_TAG` VALUES (83, 15);
INSERT INTO `ARTICLE_TAG` VALUES (83, 20);
INSERT INTO `ARTICLE_TAG` VALUES (84, 1);
INSERT INTO `ARTICLE_TAG` VALUES (84, 9);
INSERT INTO `ARTICLE_TAG` VALUES (84, 15);
INSERT INTO `ARTICLE_TAG` VALUES (84, 20);
INSERT INTO `ARTICLE_TAG` VALUES (85, 5);
INSERT INTO `ARTICLE_TAG` VALUES (86, 4);
INSERT INTO `ARTICLE_TAG` VALUES (87, 4);
INSERT INTO `ARTICLE_TAG` VALUES (87, 38);
INSERT INTO `ARTICLE_TAG` VALUES (88, 4);
INSERT INTO `ARTICLE_TAG` VALUES (88, 39);
INSERT INTO `ARTICLE_TAG` VALUES (89, 4);
INSERT INTO `ARTICLE_TAG` VALUES (89, 40);
INSERT INTO `ARTICLE_TAG` VALUES (90, 3);
INSERT INTO `ARTICLE_TAG` VALUES (91, 3);
INSERT INTO `ARTICLE_TAG` VALUES (92, 3);
INSERT INTO `ARTICLE_TAG` VALUES (93, 1);
INSERT INTO `ARTICLE_TAG` VALUES (93, 41);
INSERT INTO `ARTICLE_TAG` VALUES (94, 1);
INSERT INTO `ARTICLE_TAG` VALUES (94, 41);
INSERT INTO `ARTICLE_TAG` VALUES (95, 1);
INSERT INTO `ARTICLE_TAG` VALUES (95, 42);
INSERT INTO `ARTICLE_TAG` VALUES (96, 2);
INSERT INTO `ARTICLE_TAG` VALUES (96, 41);
INSERT INTO `ARTICLE_TAG` VALUES (97, 1);
INSERT INTO `ARTICLE_TAG` VALUES (97, 42);
INSERT INTO `ARTICLE_TAG` VALUES (98, 1);
INSERT INTO `ARTICLE_TAG` VALUES (98, 36);
INSERT INTO `ARTICLE_TAG` VALUES (99, 43);
INSERT INTO `ARTICLE_TAG` VALUES (99, 44);
INSERT INTO `ARTICLE_TAG` VALUES (100, 1);
INSERT INTO `ARTICLE_TAG` VALUES (100, 45);
INSERT INTO `ARTICLE_TAG` VALUES (101, 1);
INSERT INTO `ARTICLE_TAG` VALUES (101, 46);
INSERT INTO `ARTICLE_TAG` VALUES (102, 1);
INSERT INTO `ARTICLE_TAG` VALUES (102, 2);
INSERT INTO `ARTICLE_TAG` VALUES (102, 45);
INSERT INTO `ARTICLE_TAG` VALUES (103, 2);
INSERT INTO `ARTICLE_TAG` VALUES (103, 30);
INSERT INTO `ARTICLE_TAG` VALUES (104, 2);
INSERT INTO `ARTICLE_TAG` VALUES (104, 45);
INSERT INTO `ARTICLE_TAG` VALUES (104, 46);
INSERT INTO `ARTICLE_TAG` VALUES (105, 4);
INSERT INTO `ARTICLE_TAG` VALUES (105, 47);
INSERT INTO `ARTICLE_TAG` VALUES (106, 1);
INSERT INTO `ARTICLE_TAG` VALUES (106, 48);
INSERT INTO `ARTICLE_TAG` VALUES (107, 5);
INSERT INTO `ARTICLE_TAG` VALUES (108, 7);
INSERT INTO `ARTICLE_TAG` VALUES (108, 17);
INSERT INTO `ARTICLE_TAG` VALUES (108, 35);
INSERT INTO `ARTICLE_TAG` VALUES (109, 7);
INSERT INTO `ARTICLE_TAG` VALUES (109, 17);
INSERT INTO `ARTICLE_TAG` VALUES (109, 49);
INSERT INTO `ARTICLE_TAG` VALUES (110, 5);
INSERT INTO `ARTICLE_TAG` VALUES (110, 7);
INSERT INTO `ARTICLE_TAG` VALUES (110, 17);
INSERT INTO `ARTICLE_TAG` VALUES (110, 50);
COMMIT;

-- ----------------------------
-- Table structure for SYS_USER
-- ----------------------------
DROP TABLE IF EXISTS `SYS_USER`;
CREATE TABLE `sys_user` (
  `ID` int(50) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `USERNAME` varchar(100) DEFAULT NULL COMMENT '用户名',
  `PASSWORD` varchar(100) DEFAULT NULL COMMENT '密码',
  `TRUENAME` varchar(100) DEFAULT NULL COMMENT '真实姓名',
  `EMAIL` varchar(100) DEFAULT NULL COMMENT '邮箱',
  `PHONE` varchar(11) DEFAULT NULL COMMENT '手机号',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of SYS_USER
-- ----------------------------
BEGIN;
INSERT INTO `SYS_USER` VALUES (1, 'admin', 'zzz111', 'admin', 'admin@dalaoyang.cn', '18888888888');
INSERT INTO `SYS_USER` VALUES (2, 'dalaoyang', 'dalaoyang', 'dalaoyang', 'yangyang@dalaoyang.cn', '18640027340');
COMMIT;

-- ----------------------------
-- Table structure for TAG_INFO
-- ----------------------------
DROP TABLE IF EXISTS `TAG_INFO`;
CREATE TABLE `tag_info` (
  `TAG_ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '标签主键id',
  `TAG_NAME` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`TAG_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of TAG_INFO
-- ----------------------------
BEGIN;
INSERT INTO `TAG_INFO` VALUES (1, 'SPRINGBOOT');
INSERT INTO `TAG_INFO` VALUES (2, 'SPRINGCLOUD');
INSERT INTO `TAG_INFO` VALUES (3, 'NGINX');
INSERT INTO `TAG_INFO` VALUES (4, 'LINUX');
INSERT INTO `TAG_INFO` VALUES (5, 'JAVA');
INSERT INTO `TAG_INFO` VALUES (6, 'JPA');
INSERT INTO `TAG_INFO` VALUES (7, 'MYSQL');
INSERT INTO `TAG_INFO` VALUES (8, 'SQLSERVER');
INSERT INTO `TAG_INFO` VALUES (9, 'MAVEN');
INSERT INTO `TAG_INFO` VALUES (10, 'INTELLIJIDEA');
INSERT INTO `TAG_INFO` VALUES (11, 'MYBATIS');
INSERT INTO `TAG_INFO` VALUES (12, 'DRUID');
INSERT INTO `TAG_INFO` VALUES (13, 'DOCKER');
INSERT INTO `TAG_INFO` VALUES (14, 'TOMCAT');
INSERT INTO `TAG_INFO` VALUES (15, 'JENKINS');
INSERT INTO `TAG_INFO` VALUES (16, 'REDIS');
INSERT INTO `TAG_INFO` VALUES (17, 'ELASTICSEARCH');
INSERT INTO `TAG_INFO` VALUES (18, 'MONGODB');
INSERT INTO `TAG_INFO` VALUES (19, 'SHIRO');
INSERT INTO `TAG_INFO` VALUES (20, 'GIT');
INSERT INTO `TAG_INFO` VALUES (22, 'DUBBO');
INSERT INTO `TAG_INFO` VALUES (23, 'RPC');
INSERT INTO `TAG_INFO` VALUES (24, 'EUREKA');
INSERT INTO `TAG_INFO` VALUES (25, '高可用');
INSERT INTO `TAG_INFO` VALUES (26, 'JDBC');
INSERT INTO `TAG_INFO` VALUES (27, 'JDBCTEMPLATE');
INSERT INTO `TAG_INFO` VALUES (28, 'WEBFLUX');
INSERT INTO `TAG_INFO` VALUES (29, 'JSP');
INSERT INTO `TAG_INFO` VALUES (30, 'GATEWAY');
INSERT INTO `TAG_INFO` VALUES (31, 'MYBATIS-GERERATOR');
INSERT INTO `TAG_INFO` VALUES (32, 'AOP');
INSERT INTO `TAG_INFO` VALUES (33, 'RABBITMQ');
INSERT INTO `TAG_INFO` VALUES (34, 'KIBANA');
INSERT INTO `TAG_INFO` VALUES (35, 'LOGSTASH');
INSERT INTO `TAG_INFO` VALUES (36, 'ELK');
INSERT INTO `TAG_INFO` VALUES (37, 'VUE');
INSERT INTO `TAG_INFO` VALUES (38, 'GOACCESS');
INSERT INTO `TAG_INFO` VALUES (39, 'ROCKETMQ');
INSERT INTO `TAG_INFO` VALUES (40, 'KAFKA');
INSERT INTO `TAG_INFO` VALUES (41, 'NACOS');
INSERT INTO `TAG_INFO` VALUES (42, 'SHARDING-JDBC');
INSERT INTO `TAG_INFO` VALUES (43, 'DALAOYANG');
INSERT INTO `TAG_INFO` VALUES (44, 'ELASTIC-JOB');
INSERT INTO `TAG_INFO` VALUES (45, 'PROMETHEUS');
INSERT INTO `TAG_INFO` VALUES (46, 'SOFA-LOOKOUT');
INSERT INTO `TAG_INFO` VALUES (47, 'JUMPSERVER');
INSERT INTO `TAG_INFO` VALUES (48, 'GRAYLOG');
INSERT INTO `TAG_INFO` VALUES (49, 'GO');
INSERT INTO `TAG_INFO` VALUES (50, 'CANAL');
COMMIT;

-- ----------------------------
-- Table structure for WEBSITE_ACCESS_INFO
-- ----------------------------
DROP TABLE IF EXISTS `WEBSITE_ACCESS_INFO`;
CREATE TABLE `website_access_info` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `ACCESS_DATE` date DEFAULT NULL COMMENT '访问日期',
  `ACCESS_COUNT` int(11) DEFAULT NULL COMMENT '访问数量',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=230 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of WEBSITE_ACCESS_INFO
-- ----------------------------
BEGIN;
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (1, '2018-12-15', 301);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (2, '2018-12-16', 268);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (3, '2018-12-17', 491);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (4, '2018-12-18', 415);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (5, '2018-12-19', 597);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (6, '2018-12-20', 506);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (7, '2018-12-21', 585);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (8, '2018-12-22', 382);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (9, '2018-12-23', 379);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (10, '2018-12-24', 466);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (11, '2018-12-25', 555);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (12, '2018-12-26', 461);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (13, '2018-12-27', 498);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (14, '2018-12-28', 579);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (15, '2018-12-29', 381);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (16, '2018-12-30', 383);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (17, '2018-12-31', 498);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (18, '2019-01-01', 220);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (19, '2019-01-02', 528);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (20, '2019-01-03', 470);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (21, '2019-01-04', 389);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (22, '2019-01-05', 455);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (23, '2019-01-06', 351);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (24, '2019-01-07', 398);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (25, '2019-01-08', 838);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (26, '2019-01-09', 383);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (27, '2019-01-10', 358);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (28, '2019-01-11', 391);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (29, '2019-01-12', 352);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (30, '2019-01-13', 292);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (31, '2019-01-14', 522);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (32, '2019-01-15', 450);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (33, '2019-01-16', 414);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (34, '2019-01-17', 408);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (35, '2019-01-18', 536);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (36, '2019-01-19', 438);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (37, '2019-01-20', 387);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (38, '2019-01-21', 315);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (39, '2019-01-22', 352);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (40, '2019-01-23', 384);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (41, '2019-01-24', 636);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (42, '2019-01-25', 487);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (43, '2019-01-26', 308);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (44, '2019-01-27', 369);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (45, '2019-01-28', 363);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (46, '2019-01-29', 435);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (47, '2019-01-30', 385);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (48, '2019-01-31', 456);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (49, '2019-02-01', 689);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (50, '2019-02-02', 346);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (51, '2019-02-03', 269);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (52, '2019-02-04', 257);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (53, '2019-02-05', 292);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (54, '2019-02-06', 320);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (55, '2019-02-07', 405);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (56, '2019-02-08', 304);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (57, '2019-02-09', 339);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (58, '2019-02-10', 272);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (59, '2019-02-11', 591);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (60, '2019-02-12', 618);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (61, '2019-02-13', 805);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (62, '2019-02-14', 648);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (63, '2019-02-15', 790);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (64, '2019-02-16', 1222);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (65, '2019-02-17', 468);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (66, '2019-02-18', 657);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (67, '2019-02-19', 719);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (68, '2019-02-20', 683);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (69, '2019-02-21', 1229);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (70, '2019-02-22', 658);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (71, '2019-02-23', 443);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (72, '2019-02-24', 589);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (73, '2019-02-25', 451);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (74, '2019-02-26', 780);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (75, '2019-02-27', 699);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (76, '2019-02-28', 831);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (77, '2019-03-01', 1028);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (78, '2019-03-02', 603);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (79, '2019-03-03', 863);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (80, '2019-03-04', 881);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (81, '2019-03-05', 810);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (82, '2019-03-06', 812);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (83, '2019-03-07', 623);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (84, '2019-03-08', 500);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (85, '2019-03-09', 574);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (86, '2019-03-10', 590);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (87, '2019-03-11', 771);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (88, '2019-03-12', 2729);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (89, '2019-03-13', 835);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (90, '2019-03-14', 887);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (91, '2019-03-15', 821);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (92, '2019-03-16', 563);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (93, '2019-03-17', 628);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (94, '2019-03-18', 683);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (95, '2019-03-19', 907);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (96, '2019-03-20', 755);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (97, '2019-03-21', 1194);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (98, '2019-03-22', 740);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (99, '2019-03-23', 628);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (100, '2019-03-24', 597);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (101, '2019-03-25', 662);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (102, '2019-03-26', 814);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (103, '2019-03-27', 789);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (104, '2019-03-28', 887);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (105, '2019-03-29', 839);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (106, '2019-03-30', 481);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (107, '2019-03-31', 560);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (108, '2019-04-01', 824);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (109, '2019-04-02', 1017);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (110, '2019-04-03', 698);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (111, '2019-04-04', 734);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (112, '2019-04-05', 761);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (113, '2019-04-06', 928);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (114, '2019-04-07', 418);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (115, '2019-04-08', 583);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (116, '2019-04-09', 816);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (117, '2019-04-10', 706);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (118, '2019-04-11', 753);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (119, '2019-04-12', 586);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (120, '2019-04-13', 463);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (121, '2019-04-14', 468);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (122, '2019-04-15', 676);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (123, '2019-04-16', 600);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (124, '2019-04-17', 646);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (125, '2019-04-18', 715);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (126, '2019-04-19', 676);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (127, '2019-04-20', 1039);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (128, '2019-04-21', 980);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (129, '2019-04-22', 739);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (130, '2019-04-23', 1528);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (131, '2019-04-24', 743);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (132, '2019-04-25', 653);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (133, '2019-04-26', 766);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (134, '2019-04-27', 857);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (135, '2019-04-28', 1037);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (136, '2019-04-29', 787);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (137, '2019-04-30', 2263);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (138, '2019-05-01', 923);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (139, '2019-05-02', 771);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (140, '2019-05-03', 698);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (141, '2019-05-04', 536);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (142, '2019-05-05', 574);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (143, '2019-05-06', 642);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (144, '2019-05-07', 965);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (145, '2019-05-08', 1032);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (146, '2019-05-09', 705);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (147, '2019-05-10', 535);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (148, '2019-05-11', 368);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (149, '2019-05-12', 748);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (150, '2019-05-13', 580);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (151, '2019-05-14', 862);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (152, '2019-05-15', 943);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (153, '2019-05-16', 764);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (154, '2019-05-17', 683);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (155, '2019-05-17', 683);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (156, '2019-05-17', 683);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (157, '2019-05-18', 525);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (158, '2019-05-18', 525);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (159, '2019-05-18', 525);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (160, '2019-05-19', 716);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (161, '2019-05-19', 716);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (162, '2019-05-19', 716);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (163, '2019-05-20', 820);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (164, '2019-05-20', 820);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (165, '2019-05-20', 820);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (166, '2019-05-21', 822);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (167, '2019-05-21', 822);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (168, '2019-05-21', 822);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (169, '2019-05-22', 757);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (170, '2019-05-22', 757);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (171, '2019-05-22', 757);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (172, '2019-05-23', 776);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (173, '2019-05-23', 776);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (174, '2019-05-23', 776);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (175, '2019-05-24', 665);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (176, '2019-05-24', 665);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (177, '2019-05-24', 665);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (178, '2019-05-25', 689);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (179, '2019-05-25', 689);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (180, '2019-05-25', 689);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (181, '2019-05-26', 586);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (182, '2019-05-26', 586);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (183, '2019-05-26', 586);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (184, '2019-05-27', 1079);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (185, '2019-05-27', 1079);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (186, '2019-05-27', 1079);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (187, '2019-05-28', 713);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (188, '2019-05-28', 713);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (189, '2019-05-28', 713);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (190, '2019-05-29', 912);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (191, '2019-05-29', 912);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (192, '2019-05-29', 912);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (193, '2019-05-30', 849);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (194, '2019-05-30', 849);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (195, '2019-05-30', 849);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (196, '2019-05-31', 798);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (197, '2019-05-31', 0);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (198, '2019-06-01', 983);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (199, '2019-06-01', 983);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (200, '2019-06-02', 653);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (201, '2019-06-03', 868);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (202, '2019-06-04', 2118);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (203, '2019-06-05', 781);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (204, '2019-06-06', 751);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (205, '2019-06-07', 556);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (206, '2019-06-08', 509);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (207, '2019-06-09', 822);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (208, '2019-06-10', 744);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (209, '2019-06-11', 1038);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (210, '2019-06-12', 825);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (211, '2019-06-13', 1162);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (212, '2019-06-14', 705);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (213, '2019-06-15', 523);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (214, '2019-06-16', 836);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (215, '2019-06-17', 782);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (216, '2019-06-18', 757);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (217, '2019-06-19', 799);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (218, '2019-06-20', 1020);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (219, '2019-06-21', 618);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (220, '2019-06-22', 660);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (221, '2019-06-23', 588);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (222, '2019-06-24', 1217);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (223, '2019-06-25', 882);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (224, '2019-06-26', 955);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (225, '2019-06-27', 1462);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (226, '2019-06-28', 947);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (227, '2019-06-29', 740);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (228, '2019-06-30', 557);
INSERT INTO `WEBSITE_ACCESS_INFO` VALUES (229, '2019-07-01', 1014);
COMMIT;

-- ----------------------------
-- Table structure for WEBSITE_SYSTEM_INFO
-- ----------------------------
DROP TABLE IF EXISTS `WEBSITE_SYSTEM_INFO`;
CREATE TABLE `website_system_info` (
  `ID` int(11) NOT NULL,
  `TOTAL_WEBSITE_VISITS` int(11) DEFAULT NULL,
  `TODAY_WEBSITE_VISITS` int(11) DEFAULT NULL,
  `MONTH_WEBSITE_VISITS` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of WEBSITE_SYSTEM_INFO
-- ----------------------------
BEGIN;
INSERT INTO `WEBSITE_SYSTEM_INFO` VALUES (1, 247143, 461, 1475);
COMMIT;

-- ----------------------------
-- Table structure for article_info
-- ----------------------------
DROP TABLE IF EXISTS `article_info`;
CREATE TABLE `article_info` (
  `ARTICLE_ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `ARTICLE_NAME` varchar(1000) DEFAULT NULL COMMENT '文章名称',
  `ARTICLE_CONTENT` text COMMENT '文章内容',
  `ARTICLE_AUTHORS` varchar(1000) DEFAULT NULL COMMENT '文章作者',
  `ARTICLE_INPUT_DATE` date DEFAULT NULL COMMENT '文章录入日期',
  `ARTICLE_READING_TIME` int(11) DEFAULT NULL COMMENT '文章阅读次数',
  `ARTICLE_IS_TOP` varchar(1) DEFAULT NULL COMMENT '是否置顶',
  `ARTICLE_TAG` varchar(100) DEFAULT NULL COMMENT '文章标签',
  `ARTICLE_IS_RELEASE` varchar(2) DEFAULT NULL,
  PRIMARY KEY (`ARTICLE_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=111 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_info
-- ----------------------------
BEGIN;
INSERT INTO `article_info` VALUES (1, '使用IntelliJ Idea新建SpringBoot项目', '简单给大家介绍一下我来创建SpringBoot项目使用的工具，本人使用IntelliJ Idea来创建项目，利用其中的Spring Initializr工具来快速创建项目。\n\n步骤如下：\n\n菜单栏中选择File--New--Project，出现如下图所示，然后选择Spring Initializr。\n\n其中SDK可以根据自己需求选择合适的jdk版本，本人项目均使用的Jdk1.8\n\nService Url 是Spring官方提供的Spring Initializr工具地址。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/1)\n\n然后点击Next，进入下面页面，其中以下各项内容与创建maven项目填写相同。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/2)\n\n点击Next，如下图所示，可以配置SpringBoot项目或SpringCloud项目各种依赖，需要注意的是，SpringBoot旁边的2.0.0是自己需要使用的SpringBoot版本，根据自己的需求选择。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/3)\n\n\n选择依赖和版本后，点击Next进入下图所示。设置项目名称，以及项目存储位置。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/4)\n\n以上都设置完成后，点击Finish。\n\n进入项目后，启动项目就可以看到SpringBoot项目启动后的标志Banner，第一个SpringBoot项目就这样搭建完成了。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/1/5)\n\n\n个人网站：[http://dalaoyang.cn]()', 'dalaoyang', '2018-01-04', 1901, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (2, 'SpringBoot的第一个web项目', '这一节主要是讲springboot搭建简单的web项目。\n\n首先pom文件新增spring-boot-starter-web依赖，pom文件如下所示\n\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_web</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_web</name>\n	<description>springboot_web</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n然后在项目内新建IndexController，代码如下\n\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/13\n */\n@RestController\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index(){\n        return \"hi dalaoyang\";\n    }\n}\n```\n\n启动类SpringbootWebApplication代码如下\n\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootWebApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootWebApplication.class, args);\n	}\n}\n```\n\n配置文件如下\n\n```\n##设置端口号\nserver.port=8888\n\n##springboot项目默认访问是/ 默认不配置下面属性的话 可以直接通过http://ip:port/可以访问index\n##如果在配置文件中增加如下配置 则访问时需要访问http://ip:port/dalaoyang\nserver.context-path=/dalaoyang\n```\n\n就这样一个简单的springboot web项目搭建完成。\n\n然后启动项目 访问http://localhost:8888/dalaoyang/如下图所示\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/2/1)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-01-07', 1007, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (3, 'SpringBoot集成FreeMarker', '给大家简单介绍一下springboot 集成FreeMarker\n过程很简单，5分钟即可。\n\n首先在项目中增添依赖spring-boot-starter-freemarker\npom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_freemarker</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_freemarker</name>\n	<description>springboot_freemarker</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-freemarker</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n然后创建controller，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/14\n */\n@Controller\npublic class TestController {\n\n    @RequestMapping(\"/test\")\n    public String testFreemarker(ModelMap modelMap){\n        modelMap.addAttribute(\"msg\", \"Hello dalaoyang , this is freemarker\");\n        return \"freemarker\";\n    }\n}\n```\n\napplication.properties如下\n```\n##端口号\nserver.port=8888\n\n#设定ftl文件路径\nspring.freemarker.template-loader-path=classpath:/templates\n#设定静态文件路径，js,css等\nspring.mvc.static-path-pattern=/static/**\n```\n\n然后简单给大家介绍一下，目录结构\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/3/1)\n\n然后贴上ftl文件的代码，一定注意，是ftl！！！！！\n写html文件是无法找到页面的。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\"/>\n    <title>FreeMarker</title>\n</head>\n<body>\n<h1>${msg}</h1>\n</body>\n</html>\n```\n\n然后启动项目，访问http://localhost:8888/ 即可看到以下页面，\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/3/2)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-02-02', 945, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (4, 'SpringBoot集成Thymeleaf', '上一篇给大家介绍了springboot整合freemarker，这一片来继续为大家介绍一种模板thymeleaf。\r\n\r\n首先在项目中增添thymeleaf依赖spring-boot-starter-thymeleaf\r\n同时为了解决html严格校验报错的问题，增添依赖nekohtml\r\npom文件代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_thymeleaf</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_thymeleaf</name>\r\n	<description>springboot_thymeleaf</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.10.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>net.sourceforge.nekohtml</groupId>\r\n			<artifactId>nekohtml</artifactId>\r\n			<version>1.9.15</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\ncontroller代码大致与freemarker相同，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email 397600342@qq.com\r\n * @date 2018/3/14\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String testThymeleaf(ModelMap modelMap){\r\n        modelMap.addAttribute(\"msg\", \"Hello dalaoyang , this is thymeleaf\");\r\n        return \"thymeleaf\";\r\n    }\r\n}\r\n```\r\napplication.properties如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n\r\n#设定thymeleaf文件路径 默认为src/main/resources/templates\r\nspring.thymeleaf.prefix=classpath:/templates/ \r\n#设定静态文件路径，js,css等\r\nspring.mvc.static-path-pattern=/static/**\r\n# 是否开启模板缓存，默认true\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n# 模板编码\r\nspring.thymeleaf.encoding=UTF-8\r\n```\r\nhtml代码如下\r\n\r\n```\r\n<!DOCTYPE html>\r\n<!--解决th报错 -->\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>thymeleaf</title>\r\n</head>\r\n<body>\r\n<h1 th:text=\"${msg}\"></h1>\r\n</body>\r\n</html>\r\n```\r\n\r\n启动项目，访问http://localhost:8888/ 即可看到以下页面，\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/4/1)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-02-09', 966, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (5, 'maven仓库设置', 'Maven 中央仓库地址：  \n\n1、http://www.sonatype.org/nexus/  私服nexus工具使用  \n2、http://mvnrepository.com/   \n3、http://repo1.maven.org/maven2  \n4、http://maven.aliyun.com/nexus/content/repositories/central/  阿里云 \n5、http://repo2.maven.org/maven2/ 私服nexus工具使用  \n6、http://uk.maven.org/maven2/  \n7、http://repository.jboss.org/nexus/content/groups/public  \n8、http://maven.oschina.net/content/groups/public/oschina  \n9、http://mirrors.ibiblio.org/maven2/  \n10、http://maven.antelink.com/content/repositories/central/  \n11、http://nexus.openkoala.org/nexus/content/groups/Koala-release/   \n12、http://maven.tmatesoft.com/content/groups/public/\n\n\nmaven库配置\n```\n<mirror>\n<id>oschina-repo</id>\n<name>开源中国镜像</name>\n<mirrorOf>central</mirrorOf>\n<url>可以根据自己的网络情况选填上面的url</url>\n</mirror>\n```', 'dalaoyang', '2018-04-02', 410, 'Y', '9', 'Y');
INSERT INTO `article_info` VALUES (6, 'SpringBoot使用WebJars', '本人主要做的是java，但是从第一份工作开始，就一直在做一个写前端又写后端的程序员，相信很多朋友和我一样，不仅要会后台代码，还要懂得很多的前端代码，例如javascipt和css样式。\n\n本文就为大家简单介绍一下SpringBoot如何结合前端代码。\n\nSpringBoot结合前端有很多种方法，比如在static里面直接加入css或js，又或者引入webjars，以jar包的形式加入项目，本文就是简单介绍一下这种方式。\n\n\n话不多说，直接引入代码，还是新建一个SpringBoot Web项目。然后在pom文件引入webjars的jar，pom文件代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_webjars</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_webjars</name>\n	<description>springboot_webjars</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n       <!-- 引用bootstrap -->\n		<dependency>\n			<groupId>org.webjars</groupId>\n			<artifactId>bootstrap</artifactId>\n			<version>3.3.7-1</version>\n		</dependency>\n\n		<!-- 引用jquery -->\n		<dependency>\n			<groupId>org.webjars</groupId>\n			<artifactId>jquery</artifactId>\n			<version>3.1.1</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n然后我们观察一下项目的依赖jar包，依赖中就有了bootstrap.jar和jquery.jar\n\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/6/1)\n\n\n然后在src/main/resources/static文件下新建index.html，代码如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dalaoyang</title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css\" />\n    <script src=\"/webjars/jquery/3.1.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js\"></script>\n</head>\n<body>\n<div class=\"container\"><br/>\n    <div class=\"alert alert-success\">\n        <a href=\"#\" class=\"close\" data-dismiss=\"alert\" aria-label=\"close\">×</a>\n        Hello, <strong>Dalaoyang!</strong>\n    </div>\n</div>\n</body>\n</html>\n```\n\n至此配置已经结束，启动项目，访问http://localhost:8888/\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/6/2)\n\n\n至此SpringBoot结合WebJars成功就完成。\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n', 'dalaoyang', '2018-02-23', 807, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (7, '服务注册与发现---eureka', 'eureka简介：云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。\r\n\r\n\r\n话不多说直接上代码\r\n\r\n首先新建一个springcloud eurekaserver项目。\r\npom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_eureka_server</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springcloud_eureka_server</name>\r\n	<description>springcloud_eureka_server</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-eureka-server</artifactId>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>Edgware.SR1</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n然后在application.properties加入如下配置:\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n最后只需在启动类application上加入注解@EnableEurekaServer \r\n开启服务注册中心，然后启动项目，访问[http://localhost:8761/](http://localhost:8761/)可以看到如下页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/1)\r\n\r\n下图可见当前并没有实例\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/2)\r\n\r\n然后新建一个eureka-client项目，pom文件如下\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_eureka_client</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springcloud_eureka_client</name>\r\n	<description>springcloud_eureka_client</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-eureka</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>${spring-cloud.version}</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n```\r\n\r\napplication.properties如下所示：\r\n```\r\n##端口号\r\nserver.port=8762\r\n\r\nspring.application.name=eureka_client\r\n\r\neureka.client.service-url.defaultZone=http://localhost:8761/eureka/\r\n```\r\n\r\n启动类appliction加入@EnableEurekaClient注解，application代码如下\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaClient\r\npublic class SpringcloudEurekaClientApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudEurekaClientApplication.class, args);\r\n	}\r\n}\r\n```\r\n\r\n启动eureka-client，在观察eurekaserver管理页面\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/7/3)\r\n\r\n这时就可以看到一个实例已经注册成功了，服务名为EUREKA_CLIENT ,端口为8762\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n', 'dalaoyang', '2018-02-08', 797, 'Y', '2', 'Y');
INSERT INTO `article_info` VALUES (8, '简单实现自定义注解', '在Java中创建自定义注解\n\n创建自定义注解与编写接口很相似，除了它的接口关键字前有个@符号。\n注意以下几点：\n\n·注解方法不能有参数。  \n·注解方法的返回类型局限于原始类型，字符串，枚举，注解，或以上类型构成的数组。  \n·注解方法可以包含默认值。  \n·注解可以包含与其绑定的元注解，元注解为注解提供信息，有四种元注解类型：  \n\n1. @Documented – 表示使用该注解的元素应被javadoc或类似工具文档化，它应用于类型声明，类型声明的注解会影响客户端对注解元素的使用。如果一个类型声明添加了Documented注解，那么它的注解会成为被注解元素的公共API的一部分。\n\n2. @Target – 表示支持注解的程序元素的种类，一些可能的值有TYPE, METHOD, CONSTRUCTOR, FIELD等等。如果Target元注解不存在，那么该注解就可以使用在任何程序元素之上。\n\n3. @Inherited – 表示一个注解类型会被自动继承，如果用户在类声明的时候查询注解类型，同时类声明中也没有这个类型的注解，那么注解类型会自动查询该类的父类，这个过程将会不停地重复，直到该类型的注解被找到为止，或是到达类结构的顶层（Object）。\n\n4. @Retention – 表示注解类型保留时间的长短，它接收RetentionPolicy参数，可能的值有SOURCE, CLASS, 以及RUNTIME。\n\n以下是一个简单自定义注解的实现过程：\n\n首先创建自定义注解类Annotations，代码如下:\n```\npackage com.dalaoyang.test;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Annotations {\n    long time() default -1;\n}\n```\n\n写一个简单的实现类:\n```\npackage com.dalaoyang.test;\n\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project java_custon_annotations\n * @package com.dalaoyang.test\n * @email 397600342@qq.com\n * @date 2018/3/27\n */\npublic class DoSomeThing {\n    public void test() {\n        System.out.println(\"执行自定义注解\");\n        System.out.println(\"执行自定义注解结束时间：\"+new Date());\n\n    }\n}\n```\n\n然后写一个使用注解的类：\n```\npackage com.dalaoyang.test;\n\n\npublic class Test {\n\n    private DoSomeThing doSomeThing= new DoSomeThing();\n\n\n    @Annotations\n    public void test(){\n        doSomeThing.test();\n    }\n\n}\n```\n\n最后利用反射，使注解可以使用：\n```\npackage com.dalaoyang.test;\n\n\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\n\n// 反射注解\npublic class AnnotationsRunner {\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"执行自定义注解开始时间：\"+new Date());\n        Class clazz = Test.class;\n        Method[] ms = clazz.getMethods();\n        for (Method method : ms) {\n            boolean flag = method.isAnnotationPresent(Annotations.class);\n            if (flag) {\n                method.invoke(clazz.newInstance(), null);\n            }\n        }\n    }\n}\n```\n\n执行AnnotationsRunner类中得main函数，可以看到控制台如下所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/8/1)', 'dalaoyang', '2017-02-15', 403, 'Y', '5', 'Y');
INSERT INTO `article_info` VALUES (9, '解决Intellij IDEA部署JavaWeb项目 404问题', '今天朋友问了我一个问题，他的公司项目用idea启动tomcat是成功的，\n但是访问页面是404。一般来说，这个问题普遍都是打war包的时候配置有一定的问题导致的。\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/1)\n\n检查一下Project Structure的配置，首先是project：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/2)\n\nModules-Sources如下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/3)\n\nModules-Paths中没什么需要特别修改的地方。\nModules-Dependencis如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/4)\n\n\nLiraires如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/5)\n\nFacets如下，路径一定不要配错，不如一定404，如下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/6)\n\n最后就是Artifacts:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/7)\n\n项目到这就配置完了，有些路径一定要结合自己的项目来配置。\n\n接下来配置tomcat：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/8)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/9/9)\n\n\n到此，启动项目即可。', 'dalaoyang', '2018-03-14', 378, 'N', '10', 'Y');
INSERT INTO `article_info` VALUES (10, 'SpringBoot的国际化使用', '在项目中，很多时候需要国际化的支持，这篇文章要介绍一下springboot项目中国际化的使用。\n\n   \n在这个项目中前端页面使用的thymeleaf，另外加入了nekohtml去掉html严格校验，如果不了解springboot和thymeleaf的使用，可以去看我的上一篇文章[《SpringBoot集成Thymeleaf》](https://juejin.im/post/5aa8ce8ff265da23a404836f)。\n\n新建一个springboot项目，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_internationalization</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_internationalization</name>\n	<description>springboot_internationalization</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.10.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>net.sourceforge.nekohtml</groupId>\n			<artifactId>nekohtml</artifactId>\n			<version>1.9.15</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n从上面可以看出，其实和之前结合thymeleaf的时候一样。接下来给大家看一下application.propertie配置：\n```\n##端口号\nserver.port=8888\n\n\n##去除thymeleaf的html严格校验\nspring.thymeleaf.mode=LEGACYHTML5\n\n#设定thymeleaf文件路径 默认为src/main/resources/templates\nspring.freemarker.template-loader-path=classpath:/templates\n```\n\n新建IndexController\n```\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String hello(Model model){\n        return \"index\";\n    }\n}\n```\n\n到这里可以看出来，其实和整合thymeleaf一样。\n\n接下来我们要加入国际化的关键，在resources里面新建messages.properties（默认配置），messages_en_US.properties（英文），messages_zh_CN.properties（中文）\n\n其中messages.properties里面加入：\n```\nmessage = 欢迎使用国际化（默认）\n```\n\nmessages_en_US.properties里面加入：\n```\nmessage = Welcome to internationalization (English)\n```\n\nmessages_zh_CN.properties里面加入\n```\nmessage = \\u6b22\\u8fce\\u4f7f\\u7528\\u56fd\\u9645\\u5316\\uff08\\u4e2d\\u6587\\uff09\n```\n\n\n然后在templates下新建index.html，代码如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n<a href=\"/?lang=en_US\">English(US)</a>\n<a href=\"/?lang=zh_CN\">简体中文</a></br>\n<p><label th:text=\"#{message}\"></label></p>\n\n\n</body>\n</html>\n```\n\n创建国际化配置文件，I18Config 代码如下:\n```\npackage com.dalaoyang.config;\n\nimport java.util.Locale;\n\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\n@Configuration\n@EnableAutoConfiguration\n@ComponentScan\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email 397600342@qq.com\n * @date 2018/3/28\n */\npublic class I18Config extends WebMvcConfigurerAdapter{\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver slr = new SessionLocaleResolver();\n        // 默认语言\n        slr.setDefaultLocale(Locale.US);\n        return slr;\n    }\n\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();\n        // 参数名\n        lci.setParamName(\"lang\");\n        return lci;\n    }\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n}\n```\n\n最后修改IndexController，修改成如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport java.util.Locale;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.ui.Model;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/3/28\n */\n@Controller\npublic class IndexController {\n\n    @Autowired\n    private MessageSource messageSource;\n\n    @RequestMapping(\"/\")\n    public String hello(Model model){\n        Locale locale = LocaleContextHolder.getLocale();\n        model.addAttribute(\"message\", messageSource.getMessage(\"message\", null, locale));\n        return \"index\";\n    }\n}\n```\n\n现在启动项目，访问http://localhost:8888/\n\n然后点击中文或者English就可以自由切换语言了。', 'dalaoyang', '2018-03-15', 1465, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (11, 'SpringBoot使用数据库', '这一篇简单介绍一下SpringBoot配置数据库的配置（依赖和application.properties）,以下全是以本地数据库为例子，具体用户名密码地址都根据实际去修改。\n\nMysql数据库：\n\npom文件：\n```\n<dependency>\n	<groupId>mysql</groupId>\n	<artifactId>mysql-connector-java</artifactId>\n	<scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\nSql Server数据库：\n\npom文件：\n```\n<dependency>\n    <groupId>com.microsoft.sqlserver</groupId>\n    <artifactId>mssql-jdbc</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\n##数据库地址\nspring.datasource.url=jdbc:sqlserver://192.168.16.218:1433;databaseName=dev_btrpawn\n##数据库用户名\nspring.datasource.username=sa\n##数据库密码\nspring.datasource.password=p@ssw0rd\n##数据库驱动\nspring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n\noracle数据库：\n\n没有找到仓库中oracle得jar 需要自己下载然后加入\n\napplication.properties:\n```\nspring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver\nspring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl\nspring.datasource.username=dalaoyang\nspring.datasource.password=dalaoyang123\n```\n\nmongodb数据库：\n\npom文件：\n```\n<dependencies>\n	<dependency> \n	    <groupId>org.springframework.boot</groupId>\n	    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n	</dependency> \n</dependencies>\n```\n\napplication.properties:\n```\nspring.data.mongodb.uri=mongodb://localhost:27017/test\n```\n\nh2数据库：\n\npom文件：\n```\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <scope>runtime</scope>\n</dependency>\n```\n\napplication.properties:\n```\nspring.datasource.url=jdbc:h2:file:D:/roncoo_h2/roncoo_spring_boot;AUTO_SERVER=TRUE;DBCLOSE_ON_EXIT=FALSE\nspring.datasource.username=sa\nspring.datasource.password=\n```\n', 'dalaoyang', '2018-03-23', 1434, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (12, 'linux下安装mysql', ' 这是自己踩过的坑，记录一下，翻了一天博客，csdn等等，最后在网上看到了一个十分简单的安装过程。\n\n安装\n```\n# yum -y install http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm\n# yum info mysql-community-server\n# yum -y install mysql-community-server\n# vi /etc/my.cnf\n    character-set-server=utf8\n# /etc/init.d/mysqld restart\n# mysqld --version\n    mysqld  Ver 5.6.23 for Linux on x86_64 (MySQL Community Server (GPL))\n```\n    \n设置\n\n```\n# mysql_secure_installation  \n    Enter current password for root (enter for none):　←　回车  \n  \n    Set root password? [Y/n]　←　回车  \n    New password:　←　123456  \n    Re-enter new password:　←　123456  \n  \n    Remove anonymous users? [Y/n]　←　回车(删除匿名用户)  \n  \n    Disallow root login remotely? [Y/n]　←　回车(禁止远程root登录)  \n  \n    Remove test database and access to it? [Y/n]　←　回车(删除test库)  \n  \n    Reload privilege tables now? [Y/n]　←　回车  \n  \n    Thanks for using MySQL!  \n# mysql -u root -p  \n    Enter password:123456  \n  \n    mysql> create database mydb;  \n    mysql> grant all privileges on mydb.* to testuser@localhost identified by \'123456\';  \n    mysql> select user, host from mysql.user;  \n    mysql> quit  \n```\n    \n    \n装到这之后，本地使用没问题了，但是远程连接却不好用，提示Host is not allowed to connect to this MySQL server。然后在一片文章里找到解决办法，记录一下。\n\n\n先说说这个错误，其实就是我们的MySQL不允许远程登录，所以远程登录失败了，解决方法如下：\n\n1、在装有MySQL的机器上登录MySQL mysql -u root -p密码  \n2、执行use mysql;  \n3、执行update user set host = \'%\' where user = \'root\';这一句执行完可能会报错，不用管它。  \n4、执行FLUSH PRIVILEGES;  \n\n经过上面4步，就可以解决这个问题了。 \n注: 第四步是刷新MySQL的权限相关表，一定不要忘了，我第一次的时候没有执行第四步，结果一直不成功，最后才找到这个原因。', 'dalaoyang', '2018-03-15', 716, 'Y', '4', 'Y');
INSERT INTO `article_info` VALUES (13, 'SpringBoot学习历程', '## SpringBoot学习历程\r\n\r\n\r\n以下为本人学习SpringBoot的历程，大家可以跟我参考跟我一样的学习历程。   \r\n\r\n\r\n\r\n## 入门\r\n\r\n[使用IntelliJ Idea新建SpringBoot项目](https://www.dalaoyang.cn/article/1)\r\n\r\n[SpringBoot启动banner更改](https://www.dalaoyang.cn/article/47)\r\n\r\n[SpringBoot定时任务](https://www.dalaoyang.cn/article/19)\r\n\r\n[SpringBoot返回json和xml](https://www.dalaoyang.cn/article/20)\r\n\r\n[SpringBoot启动banner更改](https://www.dalaoyang.cn/article/47)\r\n\r\n[SpringBoot使用validator校验](https://www.dalaoyang.cn/article/48)\r\n\r\n[SpringBoot统一处理异常](https://www.dalaoyang.cn/article/45)\r\n\r\n[SpringBoot拦截器](https://www.dalaoyang.cn/article/43)\r\n\r\n[SpringBoot使用缓存](https://www.dalaoyang.cn/article/60)\r\n\r\n[SpringBoot使用事务](https://www.dalaoyang.cn/article/59)\r\n\r\n[SpringBoot使用AOP](https://www.dalaoyang.cn/article/75)\r\n\r\n## Web学习\r\n\r\n[SpringBoot的第一个web项目](https://www.dalaoyang.cn/article/2)\r\n\r\n[SpringBoot集成FreeMarker](https://www.dalaoyang.cn/article/3)\r\n\r\n[SpringBoot集成Thymeleaf](https://www.dalaoyang.cn/article/4)\r\n\r\n[SpringBoot使用Jsp](https://www.dalaoyang.cn/article/71)\r\n\r\n[SpringBoot使用WebJars](https://www.dalaoyang.cn/article/6)\r\n\r\n[SpringBoot的国际化使用](https://www.dalaoyang.cn/article/10)\r\n\r\n[SpringBoot文件上传下载](https://www.dalaoyang.cn/article/22)\r\n\r\n[SpringBoot邮件发送](https://www.dalaoyang.cn/article/23)\r\n\r\n## 数据库学习\r\n\r\n[SpringBoot使用数据库](https://www.dalaoyang.cn/article/11)\r\n\r\n[SpringBoot整合Jpa](https://www.dalaoyang.cn/article/18)\r\n\r\n[SpringBoot整合Mybatis](https://www.dalaoyang.cn/article/17)\r\n\r\n[SpringBoot多数据源](https://www.dalaoyang.cn/article/25)\r\n\r\n[SpringBoot使用Swagger2实现Restful API](https://www.dalaoyang.cn/article/21)\r\n\r\n[SpringBoot集成阿里巴巴Druid监控](https://www.dalaoyang.cn/article/26)\r\n\r\n[SpringBoot使用JdbcTemplate](https://www.dalaoyang.cn/article/67)\r\n\r\n[SpringBoot整合Mybatis-Plus](https://www.dalaoyang.cn/article/66)\r\n\r\n[SpringBoot使用Mybatis-PageHelper](https://www.dalaoyang.cn/article/65)\r\n\r\n[SpringBoot使用Mybatis-Generator](https://www.dalaoyang.cn/article/74)\r\n\r\n\r\n## 日志学习\r\n\r\n[使用Log4j日志处理](https://www.dalaoyang.cn/article/24)\r\n\r\n## 监控学习\r\n\r\n[使用Actuator监控](https://www.dalaoyang.cn/article/27)\r\n\r\n[使用Admin监控](https://www.dalaoyang.cn/article/33)\r\n\r\n## 安全学习\r\n\r\n[SpringBoot使用validator校验](https://www.dalaoyang.cn/article/48)\r\n\r\n[使用shiro安全管理](https://www.dalaoyang.cn/article/49)\r\n\r\n[使用SpringSecurity](https://www.dalaoyang.cn/article/46)\r\n\r\n## 中间件\r\n\r\n[SpringBoot整合RabbitMQ](https://www.dalaoyang.cn/article/41)\r\n\r\n[SpringBoot整合Redis](https://www.dalaoyang.cn/article/32)\r\n\r\n[SpringBoot使用LomBok](https://www.dalaoyang.cn/article/54)\r\n\r\n[SpringBoot整合mongoDB](https://www.dalaoyang.cn/article/53)\r\n\r\n[SpringBoot整合elasticsearch](https://www.dalaoyang.cn/article/52)\r\n\r\n[SpringBoot整合dubbo](https://www.dalaoyang.cn/article/63)\r\n\r\n\r\n## 部署\r\n\r\n[Jenkins部署码云SpringBoot项目](https://www.dalaoyang.cn/article/83)\r\n\r\n[Jenkins部署码云SpringBoot项目到远程服务器](https://www.dalaoyang.cn/article/84)\r\n\r\n[docker部署springboot项目](https://www.dalaoyang.cn/article/58)\r\n\r\n[SpringBoot应用War包形式部署到外部Tomcat](https://www.dalaoyang.cn/article/70)\r\n\r\n## 2.X\r\n\r\n[SpringBoot使用Sharding-JDBC分库分表](https://www.dalaoyang.cn/article/95)\r\n\r\n[SpringBoot使用Nacos服务发现](https://www.dalaoyang.cn/article/94)\r\n\r\n[SpringBoot使用Nacos配置中心](https://www.dalaoyang.cn/article/93)\r\n\r\n[SpringBoot使用WebFlux响应式编程操作数据库](https://www.dalaoyang.cn/article/76)\r\n\r\n[SpringBoot2使用WebFlux函数式编程](https://www.dalaoyang.cn/article/69)\r\n\r\n\r\n\r\n个人网站：[http://www.dalaoyang.cn](http://www.dalaoyang.cn)\r\n\r\n未完待续。。。   \r\n\r\n## **大家可以关注我的写作平台。**\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)   \r\nCSDN    ：[https://blog.csdn.net/qq_33257527](https://blog.csdn.net/qq_33257527)    \r\n博客园  ：[http://www.cnblogs.com/dalaoyang/](http://www.cnblogs.com/dalaoyang/)   \r\n简书    ：[https://www.jianshu.com/u/128b6effde53](https://www.jianshu.com/u/128b6effde53)   \r\n掘金    ：[https://juejin.im/user/5aa50b96f265da23866f836e](https://juejin.im/user/5aa50b96f265da23866f836e)\r\n \r\n\r\n\r\n', 'dalaoyang', '2018-01-03', 2761, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (14, 'SpringCloud学习目录', 'Spring Cloud直接建立在Spring Boot的企业Java创新方法上，它通过实现经过验证的模式来简化分布式、微服务风格的体系结构，从而为您的微服务带来弹性、可靠性和协调。\n\n以上来自spring官网中文翻译。\n\n中文文档：[https://springcloud.cc/](https://springcloud.cc/)\n\n官方文档：[http://projects.spring.io/spring-cloud/#quick-start](http://projects.spring.io/spring-cloud/#quick-start)\n   \n学习SpringCloud到现在，看了两本书，分别是翟永超的《Spring Cloud微服务实战》和周立的《Spring Cloud与Docker微服务架构实战》，目前正在看方志朋的《深入理解Spring Cloud与微服务构建》，这几本书都不错，有空大家也可以去看看。\n\n最近总结了一下本人SpringCloud的学习历程，由于文章都是近期才开始写，文章内所有项目都是以jdk1.8+springboot1.5.9+springcloudEdgware.SR1来构建的，ide使用的是IntelliJ Idea。\n\n本人创建了一个公益eureka地址：[eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)\n\n\n下面是我学习SpringCloud的历程目录。\n  \n基础篇：\n\n[服务注册与发现---eureka ](https://www.dalaoyang.cn/article/7)  \n[负载均衡---ribbon  ](https://www.dalaoyang.cn/article/34)  \n[声明式调用---Feign](https://www.dalaoyang.cn/article/36)  \n[熔断器---Hystrix](https://www.dalaoyang.cn/article/37)  \n[路由网关---zuul ](https://www.dalaoyang.cn/article/38)  \n[分布式配置  ](https://www.dalaoyang.cn/article/39) \n[消息总线   ](https://www.dalaoyang.cn/article/40) \n[服务链路追踪---Sleuth   ](https://www.dalaoyang.cn/article/42)      \n[SpringBoot Admin监控  ](https://www.dalaoyang.cn/article/33) \n\n\n安全篇：\n\nSpringCloud Oauth2认证\nSpringBoot Security\n\n\n未完待续，文章目录和内容在整理中，后续会不断更新......\n\n\n个人网站：[http://dalaoyang.cn](https://link.jianshu.com/?t=http%3A%2F%2Fdalaoyang.cn%2F)\n\n\n\n', 'dalaoyang', '2018-02-01', 1433, 'Y', '2', 'Y');
INSERT INTO `article_info` VALUES (15, '利用nginx，腾讯云免费证书制作https\r\n', '之前一直在研究，https怎么弄。最近看到了腾讯云提供的免费得ssl证书，寻思把网站弄成https。\r\n\r\n首先先去腾讯云购买一个免费得证书。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/1)\r\n\r\n点击后填写内容，\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/2)\r\n\r\n然后下载证书\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/3)\r\n\r\n解压证书就可以看到，提供四种方式来修改https，我们需要用到的是\r\nNginx包里面的东西。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/4)\r\n\r\n\r\n证书到这里就搞完了。\r\n\r\n然后说一下项目配置，本人网站项目是用springboot做的，端口号8888。\r\n\r\n然后服务器安装nginx，具体安装细节就不细说了，不懂的就百度一下吧，特别简单。需要说的就是nginx.conf配置：\r\n\r\n```\r\n    ##这里是将http默认的80端口重定向到https\r\n    server {\r\n        listen       80;\r\n        server_name  www.dalaoyang.cn;\r\n        rewrite ^ https://$http_host$request_uri? permanent; \r\n    }\r\n	\r\n	##这里是将默认请求https的443端口拦截\r\n	##并请求转发到http://127.0.0.1:8888/\r\n    server {\r\n        listen 443;\r\n        server_name www.dalaoyang.cn;\r\n        ssl on;     \r\n         ssl_certificate 1_dalaoyang.cn_bundle.crt;\r\n        ssl_certificate_key 2_dalaoyang.cn.key;\r\n        ssl_session_timeout 5m;\r\n        location / {\r\n            proxy_set_header X-Real-IP $remote_addr;\r\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n            proxy_set_header Host $http_host;\r\n            proxy_set_header X-NginX-Proxy true;\r\n               #你的项目端口号\r\n            proxy_pass http://127.0.0.1:8888/;\r\n            proxy_redirect off;\r\n        }\r\n    }\r\n```\r\n\r\n然后在网站上输入www.dalaoyang.cn就可以看到如下图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/15/5)\r\n', 'dalaoyang', '2018-01-01', 928, 'Y', '3', 'Y');
INSERT INTO `article_info` VALUES (16, 'linux安装jdk', '本文介绍的是使用yum方式安装jdk，想要用其他方式绕行。\r\n\r\n\r\n1.查看yum中管理的可用的JDK软件包列表：\r\n\r\n```\r\nyum search java | grep -i --color JDK\r\n```\r\n\r\n结果如下图所示：\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-bad4b7610a836356?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n2.选择合适版本，安装jdk，本人选择的是java-1.8.0-openjdk-devel.x86_64\r\n\r\n```\r\nyum install java-1.8.0-openjdk-devel.x86_64\r\n```\r\n\r\n3配置环境变量，打开etc文件下profile\r\n\r\n```\r\nvi  /etc/profile\r\n```\r\n\r\n在文件内添加\r\n\r\n```\r\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.71-2.b15.el7_2.x86_64\r\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r\nexport PATH=$PATH:$JAVA_HOME/bin\r\n```\r\n\r\n保存关闭后，执行，让配置生效：\r\n\r\n```\r\nsource  /etc/profile\r\n```\r\n\r\n然后分别输入下面命令确认jdk是否安装成功：\r\n\r\n```\r\njava\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-554d793642e2a29c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n```\r\njavac\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-d6b3ae68b1e18ed1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n```\r\njava -version\r\n```\r\n\r\n\r\n![image](http://upload-images.jianshu.io/upload_images/9953332-5fe09193970694c4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n能显示以上信息，就说明安装成功了。', 'dalaoyang', '2018-04-04', 318, 'Y', '4', 'Y');
INSERT INTO `article_info` VALUES (17, 'SpringBoot整合Mybatis', '介绍一下SpringBoot整合mybatis，数据库选用的是mysql。\n\n首先创建数据库\n```\nCREATE DATABASE test;\n```\n\n建表以及插入初始数据(sql是从navicat中导出的)\n\n```\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for user\n-- ----------------------------\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_name` varchar(255) NOT NULL,\n  `user_password` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;\n\n-- ----------------------------\n-- Records of user\n-- ----------------------------\nBEGIN;\nINSERT INTO `user` VALUES (1, \'dalaoyang\', \'13\');\nINSERT INTO `user` VALUES (2, \'xiaoli\', \'123\');\nINSERT INTO `user` VALUES (3, \'xiaoxiongmao\', \'123\');\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n```\n\n下图为项目目录结构，  \njava---  \ncontroller包负责测试整合  \ndao包作为数据操作层  \nentity作为数据实体类\n\nresources---  \nmapper写dao层对应实现的sql\nmybatis里面是mybatis配置，包含typeAlias等等\nsql里面放的是上面写的建表数据及sql\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/17/1)\n\n\n接下来直接上代码，启动类没有修改，代码如下\n```\npackage com.dalaoyang;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n\n\n@SpringBootApplication\npublic class SpringbootMybatisApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootMybatisApplication.class, args);\n    }\n}\n```\n\napplication.properties包含了数据库配置，mybatis配置，代码如下:\n\n```\n##端口号\nserver.port=8888\n\n\n##检查 mybatis 配置是否存在，一般命名为 mybatis-config.xml\nmybatis.check-config-location =true\n##配置文件位置\nmybatis.config-location=classpath:mybatis/mybatis-config.xml\n## mapper xml 文件地址\nmybatis.mapper-locations=classpath*:mapper/*Mapper.xml\n##日志级别\nlogging.level.com.yang.dao=debug\n\n##数据库url\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n实体类User\n\n```\npackage com.dalaoyang.entity;\n\nimport org.apache.ibatis.type.Alias;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@Alias(\"user\")\npublic class User {\n\n    private int id;\n    private String user_name;\n    private String user_password;\n\n    public User(String user_name, String user_password) {\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public User(int id, String user_name, String user_password) {\n        this.id = id;\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getUser_password() {\n        return user_password;\n    }\n\n    public void setUser_password(String user_password) {\n        this.user_password = user_password;\n    }\n}\n```\n\ndao层代码\n\n```\npackage com.dalaoyang.dao;\n\nimport com.dalaoyang.entity.User;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.util.List;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dao\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@Mapper\npublic interface UserMapper {\n    User findUserByUsername(String username);\n\n    void updateUserByUsername(User user);\n\n    void deleteUserByUsername(String username);\n\n    void saveUser(User user);\n\n    List<User> getUserList();\n}\n```\n\nUserMapper.xml代码\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\">\n    <resultMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    <parameterMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    <select id=\"findUserByUsername\" parameterType=\"String\" resultMap=\"user\">\n        SELECT * FROM user\n        WHERE user_name=#{1}\n    </select>\n\n\n    <update id=\"updateUserByUsername\" parameterMap=\"user\">\n        UPDATE USER SET USER_PASSWORD=#{user_password} WHERE USER_NAME=#{user_name}\n    </update>\n\n    <delete id=\"deleteUserByUsername\" parameterType=\"String\">\n        DELETE FROM USER WHERE USER_NAME=#{1}\n    </delete>\n\n    <!-- 使用alias自定义的parameterType-->\n    <insert id=\"saveUser\" parameterType=\"user\">\n        INSERT INTO USER (user_password,user_name) VALUES (#{user_password},#{user_name})\n    </insert>\n\n    <select id=\"getUserList\" resultMap=\"user\">\n        SELECT  * FROM USER\n    </select>\n</mapper>\n```\n\nmybatis-config.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD SQL Map Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\" />\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\" />\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\" />\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\" />\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\" />\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\" />\n        <typeAlias alias=\"user\" type=\"com.dalaoyang.entity.User\"/>\n    </typeAliases>\n</configuration>\n```\n\npom文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mybatis</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mybatis</name>\n    <description>springboot_mybatis</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\nUserController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.dao.UserMapper;\nimport com.dalaoyang.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/5\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    UserMapper userMapper;\n\n    //http://localhost:8888/getUser?username=xiaoli2\n    @RequestMapping(\"/getUser\")\n    public String getUser(String username){\n        User user =userMapper.findUserByUsername(username);\n        return user!=null ? username+\"的密码是：\"+user.getUser_password():\"不存在用户名为\"+username+\"的用户\";\n    }\n\n    //http://localhost:8888/updateUser?username=xiaoli2&password=123\n    @RequestMapping(\"/updateUser\")\n    public String updateUser(String password,String username){\n        User user = new User(username,password);\n        userMapper.updateUserByUsername(user);\n        return \"success!\";\n    }\n\n\n    //http://localhost:8888/addUser?username=xiaoli2&password=123\n    @RequestMapping(\"/addUser\")\n    public String addUser(String username,String password){\n        User user = new User(username,password);\n        userMapper.saveUser(user);\n        return \"success!\";\n    }\n\n    //http://localhost:8888/addUser?username=xiaoli2\n    @RequestMapping(\"/deleteUser\")\n    public String deleteUser(String username){\n        userMapper.deleteUserByUsername(username);\n        return \"success!\";\n    }\n\n    //http://localhost:8888/getUserList\n    @RequestMapping(\"/getUserList\")\n    public List getUserList(String username, String password){\n        return userMapper.getUserList();\n    }\n}\n```\n\n启动项目，访问controller上面对应的注释上的地址即可以测试，\n其中包含了简单的增删改查，SpringBoot整合Mybatis就这样完成了。\n\n', 'dalaoyang', '2018-04-05', 1194, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (18, 'SpringBoot整合Jpa', '上一篇介绍了springboot简单整合mybatis的教程。这一篇是介绍springboot简单整合jpa的教程。\n\n由于jpa的功能强大，后续会继续写关于jpa的介绍已经使用，本文只是简单介绍一下它与springboot的整合。\n\njpa不需要像mybatis一样创建表，首先给大家看一下application.properties文件代码，其中包含了jpa的配置和数据库配置，尤其注意一下spring.jpa.hibernate.ddl-auto属性，代码如下：\n\n```\n##端口号\nserver.port=8888\n\n\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=create\n\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n启动类application\n\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootJpaApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootJpaApplication.class, args);\n    }\n}\n\n```\n\npom文件大致和整合mybatis一样，只是把其中的mybatis改成了jpa，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_jpa</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_jpa</name>\n    <description>springboot_jpa</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n实体类city，其中@Table中的name对应数据库中表的名称\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n然后就是jpa的重要地方，CityRepository，继承了JpaRepository，\n由于本文只是简单介绍了jpa的简单功能，所以JpaRepository中内置的方法已经足够使用。\n\n代码如下：\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\n\n最后是controller，里面和mybatis整合一样，方法上面写的就是对应的测试方法。\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.repository.CityRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n\n    @Autowired\n    private CityRepository cityRepository;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(String cityName,String cityIntroduce){\n        City city = new City(cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCity?cityId=2\n    @GetMapping(value = \"deleteCity\")\n    public String deleteCity(int cityId){\n        cityRepository.delete(cityId);\n        return \"success\";\n    }\n\n    //http://localhost:8888/updateCity?cityId=3&cityName=沈阳&cityIntroduce=辽宁省省会\n    @GetMapping(value = \"updateCity\")\n    public String updateCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/getCityById?cityId=3\n    @GetMapping(value = \"getCityById\")\n    public City getCityById(int cityId){\n        City city = cityRepository.findOne(cityId);\n        return city;\n    }\n}\n```\n\n\n到这里启动项目就可以简单测试一下整合的效果了。', 'dalaoyang', '2018-04-06', 979, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (19, 'SpringBoot定时任务', '项目中很多时候会使用到定时任务，这篇文章介绍一下springboot整合定时任务。\n\nspringboot整合定时任务其实就两点，  \n1.创建一个能被定时任务类，方法上加入@Scheduled注解\n2.在启动类application上加入@EnableScheduling注解\n\n\n代码如下，pom文件我只加入了devtools，其实不加入也可以\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_scheduled</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_scheduled</name>\n    <description>springboot_scheduled</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\napplication类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n@SpringBootApplication\n@EnableScheduling\npublic class SpringbootScheduledApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootScheduledApplication.class, args);\n    }\n}\n\n```\n\n定时任务类TestTimer\n\n```\npackage com.dalaoyang.timer;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.timer\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/7\n */\n@Component\npublic class TestTimer {\n\n    @Scheduled(cron = \"0/1 * * * * ?\")\n    private void test() {\n        System.out.println(\"执行定时任务的时间是：\"+new Date());\n    }\n\n}\n```\n\n\n到这里启动项目，可以看到控制台如下\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/19/1)\n\n\n\n需要注意的是@Scheduled(cron = \"0/1 * * * * ?\")中cron的值根据自己实际需要去写，如果需要可以去下面的网站去弄。  \n[http://cron.qqe2.com/](http://cron.qqe2.com/)', 'dalaoyang', '2018-04-07', 3210, 'N', '1', 'Y');
INSERT INTO `article_info` VALUES (20, 'SpringBoot返回json和xml', '有些情况接口需要返回的是xml数据，在springboot中并不需要每次都转换一下数据格式，只需做一些微调整即可。\n\n\n新建一个springboot项目，加入依赖jackson-dataformat-xml，pom文件代码如下：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_xml</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_xml</name>\n    <description>springboot_xml</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-xml</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n启动类默认即可，没有做任何调整。\n \n新建一个user类，代码如下：\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/8\n */\n@XmlRootElement\npublic class User {\n\n    String userName;\n    String userAge;\n    String userAddress;\n\n    public User(String userName, String userAge, String userAddress) {\n        this.userName = userName;\n        this.userAge = userAge;\n        this.userAddress = userAddress;\n    }\n\n    @XmlElement\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    @XmlElement\n    public String getUserAge() {\n        return userAge;\n    }\n\n    public void setUserAge(String userAge) {\n        this.userAge = userAge;\n    }\n\n    @XmlElement\n    public String getUserAddress() {\n        return userAddress;\n    }\n\n    public void setUserAddress(String userAddress) {\n        this.userAddress = userAddress;\n    }\n}\n```\n\n\n最后是controller，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.User;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/8\n */\n@RestController\npublic class UserController {\n\n    //http://localhost:8080/json\n    @GetMapping(value = \"/json\",produces = MediaType.APPLICATION_JSON_VALUE)\n    public User index(){\n        User user = new User(\"dalaoyang\", \"26\", \"北京\");\n        return user;\n    }\n\n\n    //http://localhost:8080/xml\n    @GetMapping(value = \"/xml\",produces = MediaType.APPLICATION_XML_VALUE)\n    public User XML(){\n        User user = new User(\"dalaoyang\", \"26\", \"北京\");\n        return user;\n    }\n}\n```\n\n\n到这里就可以启动项目了，访问http://localhost:8080/json,可以看到如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/20/1)\n\n\n访问http://localhost:8080/xml，如下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/20/2)', 'dalaoyang', '2018-04-08', 760, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (21, 'SpringBoot使用Swagger2实现Restful API', '很多时候，我们需要创建一个接口项目用来数据调转，其中不包含任何业务逻辑，比如我们公司。这时我们就需要实现一个具有Restful API的接口项目。\n\n本文介绍springboot使用swagger2实现Restful API。\n\n本项目使用mysql+jpa+swagger2。\n\n首先pom中加入swagger2，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_swagger2</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_swagger2</name>\n    <description>springboot_swagger2</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n接下来是配置文件，和整合jpa一样。代码如下：\n```\n##端口号\nserver.port=8888\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n创建一个swagger2配置类，简单解释一下，@Configuration注解让spring来加载配置，@EnableSwagger2开启swagger2。\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Configuration\n@EnableSwagger2\npublic class Swagger2Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.dalaoyang.swagger\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"使用Swagger2构建RESTful APIs\")\n                .description(\"关注博主博客：https://www.dalaoyang.cn/\")\n                .termsOfServiceUrl(\"https://www.dalaoyang.cn/\")\n                .contact(\"dalaoyang\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n创建一个user类作为model\n```\npackage com.dalaoyang.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotNull;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.model\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Entity\n@ApiModel(description = \"user\")\npublic class User {\n\n    @ApiModelProperty(value = \"主键id\",hidden = true)\n    @GeneratedValue\n    @Id\n    int id;\n\n    @ApiModelProperty(value = \"用户名称\")\n    @NotNull\n    @Column\n    String userName;\n\n    @ApiModelProperty(value = \"用户密码\")\n    @Column\n    String userPassword;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getUserPassword() {\n        return userPassword;\n    }\n\n    public void setUserPassword(String userPassword) {\n        this.userPassword = userPassword;\n    }\n\n    public User(int id, String userName, String userPassword) {\n        this.id=id;\n        this.userName = userName;\n        this.userPassword = userPassword;\n    }\n    public User(String userName, String userPassword) {\n        this.userName = userName;\n        this.userPassword = userPassword;\n    }\n\n    public User() {\n    }\n}\n```\n\njpa数据操作类UserRepository\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.model.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\npublic interface UserRepository extends JpaRepository<User,Integer> {\n\n    User findById(int id);\n}\n\n```\n然后添加文档内容，其实和写controller一样，只不过方法和参数中间穿插一些注解。\n```\npackage com.dalaoyang.swagger;\n\nimport com.dalaoyang.model.User;\nimport com.dalaoyang.repository.UserRepository;\nimport io.swagger.annotations.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.swagger\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@RestController\n@RequestMapping(value=\"/users\")\n@Api(value=\"用户操作接口\",tags={\"用户操作接口\"})\npublic class UserSwagger {\n\n    @Autowired\n    UserRepository userRepository;\n\n    @ApiOperation(value=\"获取用户详细信息\", notes=\"根据用户的id来获取用户详细信息\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @GetMapping(value=\"/findById\")\n    public User findById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        return user;\n    }\n\n    @ApiOperation(value=\"获取用户列表\", notes=\"获取用户列表\")\n    @GetMapping(value=\"/getUserList\")\n    public List getUserList(){\n        return userRepository.findAll();\n    }\n\n\n    @ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @PostMapping(value=\"/saveUser\")\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userRepository.save(user);\n        return \"success!\";\n    }\n\n    @ApiOperation(value=\"修改用户\", notes=\"修改用户\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name=\"id\",value=\"主键id\",required=true,paramType=\"query\",dataType=\"Integer\"),\n            @ApiImplicitParam(name=\"username\",value=\"用户名称\",required=true,paramType=\"query\",dataType = \"String\"),\n            @ApiImplicitParam(name=\"password\",value=\"用户密码\",required=true,paramType=\"query\",dataType = \"String\")\n    })\n    @GetMapping(value=\"/updateUser\")\n    public String updateUser(@RequestParam(value = \"id\")int id,@RequestParam(value = \"username\")String username,\n                             @RequestParam(value = \"password\")String password){\n        User user = new User(id, username, password);\n        userRepository.save(user);\n        return \"success!\";\n    }\n\n\n    @ApiOperation(value=\"删除用户\", notes=\"根据用户的id来删除用户\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @DeleteMapping(value=\"/deleteUserById\")\n    public String deleteUserById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        userRepository.delete(user);\n        return \"success!\";\n    }\n\n}\n```\n\n\n启动项目，访问http://localhost:8888/swagger-ui.html，可以看到如下图\n\n\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/1)\n\n\n为了方便大家学习观看，我分别用了几种不同的方法写，\n\n1.删除用户，代码如下\n```\n\n\n    @ApiOperation(value=\"删除用户\", notes=\"根据用户的id来删除用户\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @DeleteMapping(value=\"/deleteUserById\")\n    public String deleteUserById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        userRepository.delete(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/2)\n2.获取用户详细信息\n```\n @ApiOperation(value=\"获取用户详细信息\", notes=\"根据用户的id来获取用户详细信息\")\n    @ApiImplicitParam(name = \"id\", value = \"用户ID\", required = true,paramType = \"query\", dataType = \"Integer\")\n    @GetMapping(value=\"/findById\")\n    public User findById(@RequestParam(value = \"id\")int id){\n        User user = userRepository.findById(id);\n        return user;\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/3)\n\n3.获取用户列表\n```\n@ApiOperation(value=\"获取用户列表\", notes=\"获取用户列表\")\n    @GetMapping(value=\"/getUserList\")\n    public List getUserList(){\n        return userRepository.findAll();\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/4)\n\n4.保存用户\n```\n@ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @PostMapping(value=\"/saveUser\")\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userRepository.save(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/5)\n\n5.修改用户\n```\n   @ApiOperation(value=\"修改用户\", notes=\"修改用户\")\n    @ApiImplicitParams({\n            @ApiImplicitParam(name=\"id\",value=\"主键id\",required=true,paramType=\"query\",dataType=\"Integer\"),\n            @ApiImplicitParam(name=\"username\",value=\"用户名称\",required=true,paramType=\"query\",dataType = \"String\"),\n            @ApiImplicitParam(name=\"password\",value=\"用户密码\",required=true,paramType=\"query\",dataType = \"String\")\n    })\n    @PutMapping(value=\"/updateUser\")\n    public String updateUser(@RequestParam(value = \"id\")int id,@RequestParam(value = \"username\")String username,\n                             @RequestParam(value = \"password\")String password){\n        User user = new User(id, username, password);\n        userRepository.save(user);\n        return \"success!\";\n    }\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/21/6)\n\n\n然后给大家分享一下我之前学习时记录在有道云笔记的关于swagger2的使用说明，原创作者是谁，我也记不清了。如果原创作者看到的话，可以私聊我，我给您的名字加上，抱歉。\n\n```\n@Api：用在请求的类上，表示对类的说明\n    tags=\"说明该类的作用，可以在UI界面上看到的注解\"\n    value=\"该参数没什么意义，在UI界面上也看到，所以不需要配置\"\n示例：\n@Api(tags=\"APP用户注册Controller\")\n\n@ApiOperation：用在请求的方法上，说明方法的用途、作用\n    value=\"说明方法的用途、作用\"\n    notes=\"方法的备注说明\"\n示例：\n@ApiOperation(value=\"用户注册\",notes=\"手机号、密码都是必输项，年龄随边填，但必须是数字\")\n\n@ApiImplicitParams：用在请求的方法上，表示一组参数说明\n    @ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面\n        name：参数名\n        value：参数的汉字说明、解释\n        required：参数是否必须传\n        paramType：参数放在哪个地方\n            · header --> 请求参数的获取：@RequestHeader\n            · query --> 请求参数的获取：@RequestParam\n            · path（用于restful接口）--> 请求参数的获取：@PathVariable\n            · body（不常用）\n            · form（不常用）    \n        dataType：参数类型，默认String，其它值dataType=\"Integer\"       \n        defaultValue：参数的默认值\n示例：\n@ApiImplicitParams({\n    @ApiImplicitParam(name=\"mobile\",value=\"手机号\",required=true,paramType=\"form\"),\n    @ApiImplicitParam(name=\"password\",value=\"密码\",required=true,paramType=\"form\"),\n    @ApiImplicitParam(name=\"age\",value=\"年龄\",required=true,paramType=\"form\",dataType=\"Integer\")\n})\n\n@ApiResponses：用在请求的方法上，表示一组响应\n    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息\n        code：数字，例如400\n        message：信息，例如\"请求参数没填好\"\n        response：抛出异常的类\n@ApiOperation(value = \"select1请求\",notes = \"多个参数，多种的查询参数类型\")\n@ApiResponses({\n    @ApiResponse(code=400,message=\"请求参数没填好\"),\n    @ApiResponse(code=404,message=\"请求路径没有或页面跳转路径不对\")\n})\n\n@ApiModel：用于响应类上，表示一个返回响应数据的信息\n            （这种一般用在post创建的时候，使用@RequestBody这样的场景，\n            请求参数无法使用@ApiImplicitParam注解进行描述的时候）\n    @ApiModelProperty：用在属性上，描述响应类的属性\n示例：\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport java.io.Serializable;\n\n@ApiModel(description= \"返回响应数据\")\npublic class RestMessage implements Serializable{\n\n    @ApiModelProperty(value = \"是否成功\")\n    private boolean success=true;\n    @ApiModelProperty(value = \"返回对象\")\n    private Object data;\n    @ApiModelProperty(value = \"错误编号\")\n    private Integer errCode;\n    @ApiModelProperty(value = \"错误信息\")\n    private String message;\n\n    \n}\n\n\n\nPOST请求传入对象 \n示例：\n   @ApiOperation(value=\"保存用户\", notes=\"保存用户\")\n    @RequestMapping(value=\"/saveUser\", method= RequestMethod.POST)\n    public String saveUser(@RequestBody @ApiParam(name=\"用户对象\",value=\"传入json格式\",required=true) User user){\n        userDao.save(user);\n        return \"success!\";\n    }\n```', 'dalaoyang', '2018-04-09', 960, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (22, 'SpringBoot文件上传下载', '项目中经常会有上传和下载的需求，这篇文章简述一下springboot项目中实现简单的上传和下载。\n\n新建springboot项目，前台页面使用的thymeleaf模板，其余的没有特别的配置，pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_upload_download</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_upload_download</name>\n	<description>springboot_upload_download</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-thymeleaf</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>net.sourceforge.nekohtml</groupId>\n			<artifactId>nekohtml</artifactId>\n			<version>1.9.15</version>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n前台页面index.html，其中包含单个上传，下载，批量上传。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<p>单文件上传</p>\n<form action=\"upload\" method=\"POST\" enctype=\"multipart/form-data\">\n    文件：<input type=\"file\" name=\"file\"/>\n    <input type=\"submit\"/>\n</form>\n<hr/>\n<p>文件下载</p>\n<a href=\"download\">下载文件</a>\n<hr/>\n<p>多文件上传</p>\n<form method=\"POST\" enctype=\"multipart/form-data\" action=\"batch\">\n    <p>文件1：<input type=\"file\" name=\"file\"/></p>\n    <p>文件2：<input type=\"file\" name=\"file\"/></p>\n    <p><input type=\"submit\" value=\"上传\"/></p>\n</form>\n</body>\n</html>\n```\n\nIndexController只是用来页面的跳转\n```\npackage com.dalaoyang.Controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index()\n    {\n        return \"index\";\n    }\n}\n```\n\n最后是本文的重点，FileController，其中包含单个上传，单个下载，批量上传对应的方法。需要注意下载功能写的是对应我电脑里面固定位置的文件，仅供大家来参考。以下是代码：\n```\npackage com.dalaoyang.Controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartHttpServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.*;\nimport java.util.List;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/9\n */\n@RestController\npublic class FileController {\n    private static final Logger log = LoggerFactory.getLogger(FileController.class);\n\n    @RequestMapping(value = \"/upload\")\n    public String upload(@RequestParam(\"file\") MultipartFile file) {\n        try {\n            if (file.isEmpty()) {\n                return \"文件为空\";\n            }\n            // 获取文件名\n            String fileName = file.getOriginalFilename();\n            log.info(\"上传的文件名为：\" + fileName);\n            // 获取文件的后缀名\n            String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\n            log.info(\"文件的后缀名为：\" + suffixName);\n            // 设置文件存储路径\n            String filePath = \"/Users/dalaoyang/Downloads/\";\n            String path = filePath + fileName;\n            File dest = new File(path);\n            // 检测是否存在目录\n            if (!dest.getParentFile().exists()) {\n                dest.getParentFile().mkdirs();// 新建文件夹\n            }\n            file.transferTo(dest);// 文件写入\n            return \"上传成功\";\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"上传失败\";\n    }\n\n    @PostMapping(\"/batch\")\n    public String handleFileUpload(HttpServletRequest request) {\n        List<MultipartFile> files = ((MultipartHttpServletRequest) request).getFiles(\"file\");\n        MultipartFile file = null;\n        BufferedOutputStream stream = null;\n        for (int i = 0; i < files.size(); ++i) {\n            file = files.get(i);\n            String filePath = \"/Users/dalaoyang/Downloads/\";\n            if (!file.isEmpty()) {\n                try {\n                    byte[] bytes = file.getBytes();\n                    stream = new BufferedOutputStream(new FileOutputStream(\n                            new File(filePath + file.getOriginalFilename())));//设置文件路径及名字\n                    stream.write(bytes);// 写入\n                    stream.close();\n                } catch (Exception e) {\n                    stream = null;\n                    return \"第 \" + i + \" 个文件上传失败 ==> \"\n                            + e.getMessage();\n                }\n            } else {\n                return \"第 \" + i\n                        + \" 个文件上传失败因为文件为空\";\n            }\n        }\n        return \"上传成功\";\n    }\n\n    @GetMapping(\"/download\")\n    public String downloadFile(HttpServletRequest request, HttpServletResponse response) {\n        String fileName = \"dalaoyang.jpeg\";// 文件名\n        if (fileName != null) {\n            //设置文件路径\n            File file = new File(\"/Users/dalaoyang/Documents/dalaoyang.jpeg\");\n            //File file = new File(realPath , fileName);\n            if (file.exists()) {\n                response.setContentType(\"application/force-download\");// 设置强制下载不打开\n                response.addHeader(\"Content-Disposition\", \"attachment;fileName=\" + fileName);// 设置文件名\n                byte[] buffer = new byte[1024];\n                FileInputStream fis = null;\n                BufferedInputStream bis = null;\n                try {\n                    fis = new FileInputStream(file);\n                    bis = new BufferedInputStream(fis);\n                    OutputStream os = response.getOutputStream();\n                    int i = bis.read(buffer);\n                    while (i != -1) {\n                        os.write(buffer, 0, i);\n                        i = bis.read(buffer);\n                    }\n                    return \"下载成功\";\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    if (bis != null) {\n                        try {\n                            bis.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    if (fis != null) {\n                        try {\n                            fis.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        return \"下载失败\";\n    }\n}\n```', 'dalaoyang', '2018-04-10', 1468, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (23, 'SpringBoot邮件发送', '这篇文章介绍springboot的邮件发送。\n\n由于很简单就没有分出server和imp之类，只是在controller简单写个方法进行测试。\n\n首先pom文件加入spring-boot-starter-mail，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mail</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mail</name>\n    <description>springboot_mail</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-mail</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n接下来是application.properties，里面包含发送邮箱的地址，账号密码，接信地址，由于只是测试，所以都是固定写死的，如果项目中需要，可以根据自行情况进行修改。\n```\n##端口号\nserver.port=8888\n\n##这里根据自己的情况填写\n##邮箱服务器地址\n##QQ smtp.qq.com\n##sina smtp.sina.cn\n##aliyun smtp.aliyun.com\n##163 smtp.163.com\nspring.mail.host=smtp.aliyun.com\n##邮箱用户名\nspring.mail.username=dalaoyang@aliyun.com\n##邮箱密码（注意：qq邮箱应该使用独立密码，去qq邮箱设置里面获取）\nspring.mail.password=******\n##编码格式\nspring.mail.default-encoding=UTF-8\n\n##发送邮件地址\nmail.fromMail.sender=dalaoyang@aliyun.com\n##接收邮件地址\nmail.fromMail.receiver=yangyang@dalaoyang.cn\n\n\n```\n\n然后先展示一下controller的完整代码：\n```\npackage com.dalaoyang.controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.mail.javamail.MimeMessageHelper;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.mail.MessagingException;\nimport javax.mail.internet.MimeMessage;\nimport java.io.File;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@RestController\npublic class MailController {\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Value(\"${mail.fromMail.sender}\")\n    private String sender;\n\n    @Value(\"${mail.fromMail.receiver}\")\n    private String receiver;\n\n    @Autowired\n    private JavaMailSender javaMailSender;\n\n    /* *\n     * @Description  http://localhost:8888/sendMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送文本邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendMail\")\n    public String sendMail() {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(sender);\n        message.setTo(receiver);\n        message.setSubject(\"大老杨\");\n        message.setText(\"你好你好你好！\");\n        try {\n            javaMailSender.send(message);\n            logger.info(\"简单邮件已经发送。\");\n        } catch (Exception e) {\n            logger.error(\"发送简单邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description  http://localhost:8888/sendHtmlMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送html邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendHtmlMail\")\n    public String testHtmlMail() {\n        String content=\"<html>\\n\" +\n                \"<body>\\n\" +\n                \"    <h3>hello world ! 这是一封Html邮件!</h3>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            //true表示需要创建一个multipart message\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"html mail\");\n            helper.setText(content, true);\n\n            javaMailSender.send(message);\n            logger.info(\"html邮件发送成功\");\n        } catch (MessagingException e) {\n            logger.error(\"发送html邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description http://localhost:8888/sendFilesMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送附件邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendFilesMail\")\n    public String sendFilesMail() {\n        String filePath=\"/Users/dalaoyang/Downloads/article_tag.sql\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"附件邮件\");\n            helper.setText(\"这是一封带附件的邮件\", true);\n\n            FileSystemResource file = new FileSystemResource(new File(filePath));\n            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));\n            helper.addAttachment(fileName, file);\n\n            javaMailSender.send(message);\n            logger.info(\"带附件的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送带附件的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n\n    /* *\n     * @Description http://localhost:8888/sendInlineResourceMail\n     * @author dalaoyang\n     * @email 397600342@qq.com\n     * @method 发送图片邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendInlineResourceMail\")\n    public String sendInlineResourceMail() {\n        String Id = \"dalaoyang12138\";\n        String content=\"<html><body>这是有图片的邮件：<img src=\\\'cid:\" + Id + \"\\\' ></body></html>\";\n        String imgPath = \"/Users/dalaoyang/Downloads/dalaoyang.jpeg\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"这是有图片的邮件\");\n            helper.setText(content, true);\n\n            FileSystemResource res = new FileSystemResource(new File(imgPath));\n            helper.addInline(Id, res);\n\n            javaMailSender.send(message);\n            logger.info(\"嵌入静态资源的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送嵌入静态资源的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n}\n\n```\n\n然后一点一点来，本文分4种情况：\n1.发送简单的文本邮件\n```\n /* *\n     * @Description  http://localhost:8888/sendMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送文本邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendMail\")\n    public String sendMail() {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(sender);\n        message.setTo(receiver);\n        message.setSubject(\"大老杨\");\n        message.setText(\"你好你好你好！\");\n        try {\n            javaMailSender.send(message);\n            logger.info(\"简单邮件已经发送。\");\n        } catch (Exception e) {\n            logger.error(\"发送简单邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/1)\n\n2.发送html邮件\n\n```\n/* *\n     * @Description  http://localhost:8888/sendHtmlMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送html邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendHtmlMail\")\n    public String testHtmlMail() {\n        String content=\"<html>\\n\" +\n                \"<body>\\n\" +\n                \"    <h3>hello world ! 这是一封Html邮件!</h3>\\n\" +\n                \"</body>\\n\" +\n                \"</html>\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            //true表示需要创建一个multipart message\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"html mail\");\n            helper.setText(content, true);\n\n            javaMailSender.send(message);\n            logger.info(\"html邮件发送成功\");\n        } catch (MessagingException e) {\n            logger.error(\"发送html邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendHtmlMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/2)\n\n\n3.发送附件邮件\n```\n/* *\n     * @Description http://localhost:8888/sendFilesMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送附件邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendFilesMail\")\n    public String sendFilesMail() {\n        String filePath=\"/Users/dalaoyang/Downloads/article_tag.sql\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"附件邮件\");\n            helper.setText(\"这是一封带附件的邮件\", true);\n\n            FileSystemResource file = new FileSystemResource(new File(filePath));\n            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));\n            helper.addAttachment(fileName, file);\n\n            javaMailSender.send(message);\n            logger.info(\"带附件的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送带附件的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n访问http://localhost:8888/sendFilesMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/3)\n\n\n4.发送图片邮件\n\n```\n /* *\n     * @Description http://localhost:8888/sendInlineResourceMail\n     * @author dalaoyang\n     * @email yangyang@dalaoyang.cn\n     * @method 发送图片邮件\n     * @date\n     * @param\n     * @return\n     */\n    @RequestMapping(\"/sendInlineResourceMail\")\n    public String sendInlineResourceMail() {\n        String Id = \"dalaoyang12138\";\n        String content=\"<html><body>这是有图片的邮件：<img src=\\\'cid:\" + Id + \"\\\' ></body></html>\";\n        String imgPath = \"/Users/dalaoyang/Downloads/dalaoyang.jpeg\";\n        MimeMessage message = javaMailSender.createMimeMessage();\n\n        try {\n            MimeMessageHelper helper = new MimeMessageHelper(message, true);\n            helper.setFrom(sender);\n            helper.setTo(receiver);\n            helper.setSubject(\"这是有图片的邮件\");\n            helper.setText(content, true);\n\n            FileSystemResource res = new FileSystemResource(new File(imgPath));\n            helper.addInline(Id, res);\n\n            javaMailSender.send(message);\n            logger.info(\"嵌入静态资源的邮件已经发送。\");\n        } catch (MessagingException e) {\n            logger.error(\"发送嵌入静态资源的邮件时发生异常！\", e);\n        }\n        return \"success\";\n    }\n```\n\n访问http://localhost:8888/sendInlineResourceMail，可以看到页面上显示success，在去看邮箱可以看到如下图，证明发送成功\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/23/4)', 'dalaoyang', '2018-04-11', 1051, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (24, '使用Log4j日志处理', 'Springboot日志默认使用的是logback，本文将介绍将springboot项目日志修改为log4j。\n\n首先要将默认的日志依赖排除，然后引用log4j，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_log4j</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_log4j</name>\n    <description>springboot_log4j</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupI>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-log4j</artifactId>\n            <version>1.3.2.RELEASE</version>\n            <type>pom</type>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n引用log4j之后，在resources加入log4j配置即可，下面是本人之前项目的log4j.properties内容，代码如下：\n```\nlog4j.rootLogger=debug,CONSOLE,FILE\n\n##输出到控制台\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.Threshold=DEBUG\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH\\:mm\\:ss} -%-4r [%t] %-5p  %x - %m%n\nlog4j.appender.CONSOLE.Target=System.out\nlog4j.appender.CONSOLE.Encoding=gbk\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n\n\n##输出到日志文件 每10M分成一个日志文件\nlog4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.FILE.File=/Users/dalaoyang/Downloads/log\nlog4j.appender.FILE.DatePattern = \'_\'yyyy-MM-dd-HH-mm\'.log\'\nlog4j.appender.FILE.MaxFileSize=10MB\nlog4j.appender.FILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.FILE.layout.ConversionPattern=%d%n%m%n\n\n\n\n```\n\n简单讲解一下：  \nCONSOLE里面是输出到控制台的日志\nFILE是输入到日志文件的日志，日志是按照大小分的，最大为10M，\n每小时一个日志文件。', 'dalaoyang', '2018-04-13', 753, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (25, 'SpringBoot多数据源', '很多业务场景都需要使用到多数据库，本文介绍springboot对多数据源的使用。\n\n这次先说一下application.properties文件，分别连接了2个数据库test和test1。完整代码如下：\n```\n##端口号\nserver.port=8888\n\n\n##数据库url\nspring.datasource.test.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.test.username=root\n##数据库密码\nspring.datasource.test.password=root\n##数据库驱动\nspring.datasource.test.driver-class-name=com.mysql.jdbc.Driver\n\n\n##数据库url\nspring.datasource.test2.url=jdbc:mysql://localhost:3306/test2?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.test2.username=root\n##数据库密码\nspring.datasource.test2.password=root\n##数据库驱动\nspring.datasource.test2.driver-class-name=com.mysql.jdbc.Driver\n\n\nspring.jpa.hibernate.ddl-auto=create\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n然后说一下处理多数据源的DataSourceConfig，其中@ConfigurationProperties注解对应刚才的数据库，而且这个重点是一定要有一个主数据源，并且在上面加上@Primary，代码如下：\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport javax.sql.DataSource;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\npublic class DataSourceConfig {\n    @Bean(name = \"testDataSource\")\n    @Qualifier(\"testDataSource\")\n    @ConfigurationProperties(prefix=\"spring.datasource.test\")\n    public DataSource primaryDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = \"test2DataSource\")\n    @Qualifier(\"test2DataSource\")\n    @Primary\n    @ConfigurationProperties(prefix=\"spring.datasource.test2\")\n    public DataSource secondaryDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n}\n```\n\n\n接下来是对应test数据库的配置，其中需要说一下的是@EnableJpaRepositories注解里面的basePackages属性对应的是这个数据源对应的repository（因为本文使用的是jpa）， @Qualifier注解内的value要和DataSourceConfig的值一致即可。\n代码如下：\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\nimport java.util.Map;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        entityManagerFactoryRef=\"entityManagerFactoryPrimary\",\n        transactionManagerRef=\"transactionManagerPrimary\",\n        basePackages= { \"com.dalaoyang.repository.datasource\" })\npublic class TestDataSourceConfig {\n    @Autowired\n    @Qualifier(\"testDataSource\")\n    private DataSource dataSource;\n\n    @Primary\n    @Bean(name = \"entityManagerPrimary\")\n    public EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n        return entityManagerFactoryPrimary(builder).getObject().createEntityManager();\n    }\n\n    @Primary\n    @Bean(name = \"entityManagerFactoryPrimary\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactoryPrimary (EntityManagerFactoryBuilder builder) {\n        return builder\n                .dataSource(dataSource)\n                .properties(getVendorProperties(dataSource))\n                .packages(\"com.dalaoyang.entity.datasource\") //设置实体类所在位置\n                .persistenceUnit(\"primaryPersistenceUnit\")\n                .build();\n    }\n\n    @Autowired\n    private JpaProperties jpaProperties;\n\n    private Map<String, String> getVendorProperties(DataSource dataSource) {\n        return jpaProperties.getHibernateProperties(dataSource);\n    }\n\n    @Primary\n    @Bean(name = \"transactionManagerPrimary\")\n    public PlatformTransactionManager transactionManagerPrimary(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());\n    }\n}\n```\n\nTest2DataSourceConfig就不多说了，和TestDataSourceConfig原理一致，代码如下：\n```\npackage com.dalaoyang.config;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManager;\nimport javax.sql.DataSource;\nimport java.util.Map;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Configuration\n@EnableTransactionManagement\n@EnableJpaRepositories(\n        entityManagerFactoryRef=\"entityManagerFactorySecondary\",\n        transactionManagerRef=\"transactionManagerSecondary\",\n        basePackages= { \"com.dalaoyang.repository.datasource2\" }) //设置Repository所在位置\npublic class Test2DataSourceConfig {\n    @Autowired\n    @Qualifier(\"test2DataSource\")\n    private DataSource dataSource;\n\n    @Bean(name = \"entityManagerSecondary\")\n    public EntityManager entityManager(EntityManagerFactoryBuilder builder) {\n        return entityManagerFactorySecondary(builder).getObject().createEntityManager();\n    }\n\n    @Bean(name = \"entityManagerFactorySecondary\")\n    public LocalContainerEntityManagerFactoryBean entityManagerFactorySecondary (EntityManagerFactoryBuilder builder) {\n        return builder\n                .dataSource(dataSource)\n                .properties(getVendorProperties(dataSource))\n                .packages(\"com.dalaoyang.entity.datasource2\") //设置实体类所在位置\n                .persistenceUnit(\"secondaryPersistenceUnit\")\n                .build();\n    }\n\n    @Autowired\n    private JpaProperties jpaProperties;\n\n    private Map<String, String> getVendorProperties(DataSource dataSource) {\n        return jpaProperties.getHibernateProperties(dataSource);\n    }\n\n    @Bean(name = \"transactionManagerSecondary\")\n    PlatformTransactionManager transactionManagerSecondary(EntityManagerFactoryBuilder builder) {\n        return new JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());\n    }\n}\n```\n\n下面是对应的model和repository\n\nCity类\n```\npackage com.dalaoyang.entity.datasource;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n\n\n}\n\n```\nHouse类\n\n```\npackage com.dalaoyang.entity.datasource2;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@Entity\n@Table(name=\"house\")\npublic class House {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int houseId;\n    private String houseName;\n    private String houseIntroduce;\n\n    public int getHouseId() {\n        return houseId;\n    }\n\n    public void setHouseId(int houseId) {\n        this.houseId = houseId;\n    }\n\n    public String getHouseName() {\n        return houseName;\n    }\n\n    public void setHouseName(String houseName) {\n        this.houseName = houseName;\n    }\n\n    public String getHouseIntroduce() {\n        return houseIntroduce;\n    }\n\n    public void setHouseIntroduce(String houseIntroduce) {\n        this.houseIntroduce = houseIntroduce;\n    }\n\n    public House(String houseName, String houseIntroduce) {\n        this.houseName = houseName;\n        this.houseIntroduce = houseIntroduce;\n    }\n}\n```\n\nCityRepository\n\n```\npackage com.dalaoyang.repository.datasource;\n\nimport com.dalaoyang.entity.datasource.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\nHouseRepository\n\n```\npackage com.dalaoyang.repository.datasource2;\n\nimport com.dalaoyang.entity.datasource2.House;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository.datasource2\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\npublic interface HouseRepository extends JpaRepository<House,Integer> {\n}\n```\n\npom文件\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_datasources</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_datasources</name>\n	<description>springboot_datasources</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-jpa</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>mysql</groupId>\n			<artifactId>mysql-connector-java</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n\n```\n\n因为上面这些都没什么可说的，都是和正常的写法没什么区别，最后是TestController测试类\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.datasource.City;\nimport com.dalaoyang.entity.datasource2.House;\nimport com.dalaoyang.repository.datasource.CityRepository;\nimport com.dalaoyang.repository.datasource2.HouseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/10\n */\n@RestController\npublic class TestController {\n\n    @Autowired\n    CityRepository cityRepository;\n\n    @Autowired\n    HouseRepository houseRepository;\n\n    @GetMapping(\"/testDataSource\")\n    public String testDataSource(){\n        City city = new City(\"北京\",\"中国首都\");\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    @GetMapping(\"/testDataSource2\")\n    public String testDataSource2(){\n        House house = new House(\"豪宅\",\"特别大的豪宅\");\n        houseRepository.save(house);\n        return \"success\";\n    }\n\n}\n```\n\n启动项目可以看到test数据库中新建了city表，test2数据库中新建了house表。\n\n', 'dalaoyang', '2018-04-14', 994, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (26, 'SpringBoot集成阿里巴巴Druid监控', 'druid是阿里巴巴开源的数据库连接池，提供了优秀的对数据库操作的监控功能，本文要讲解一下springboot项目怎么集成druid。\n\n本文在基于jpa的项目下开发，首先在pom文件中额外加入druid依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_druid</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_druid</name>\n    <description>springboot_druid</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.12.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.0.28</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\napplication.properties上半段和整合jpa一点没变，下面加入了一些druid的配置，如果对druid的配置有什么不理解的，可以去网上查一下。（这篇文章我觉得写的很好，[传送门](https://blog.csdn.net/hj7jay/article/details/51686418)）\n\n```\n#端口号\nserver.port=8888\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=create\n\n##控制台打印sql\nspring.jpa.show-sql=true\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n#这里是不同的\n#使用druid的话 需要多配置一个属性spring.datasource.type\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource  \n\n\n# 连接池的配置信息\n# 初始化大小，最小，最大\nspring.datasource.initialSize=5  \nspring.datasource.minIdle=5  \nspring.datasource.maxActive=20  \n# 配置获取连接等待超时的时间\nspring.datasource.maxWait=60000  \n# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒\nspring.datasource.timeBetweenEvictionRunsMillis=60000  \n# 配置一个连接在池中最小生存的时间，单位是毫秒\nspring.datasource.minEvictableIdleTimeMillis=300000  \nspring.datasource.validationQuery=SELECT 1 FROM DUAL  \nspring.datasource.testWhileIdle=true  \nspring.datasource.testOnBorrow=false  \nspring.datasource.testOnReturn=false  \n# 打开PSCache，并且指定每个连接上PSCache的大小\nspring.datasource.poolPreparedStatements=true  \nspring.datasource.maxPoolPreparedStatementPerConnectionSize=20  \n# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，\'wall\'用于防火墙\nspring.datasource.filters=stat,wall,log4j\n# 通过connectProperties属性来打开mergeSql功能；慢SQL记录\n```\n\n然后在项目中加入DruidConfig，简单讲解一下，这个配置文件主要是加载application.properties的配置，代码如下：\n```\npackage com.dalaoyang.config;\n\nimport java.sql.SQLException;\n\nimport javax.sql.DataSource;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\nimport com.alibaba.druid.pool.DruidDataSource;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n@Configuration\npublic class DruidConfig {\n    private Logger logger = Logger.getLogger(this.getClass());\n\n    @Value(\"${spring.datasource.url}\")\n    private String dbUrl;\n\n    @Value(\"${spring.datasource.username}\")\n    private String username;\n\n    @Value(\"${spring.datasource.password}\")\n    private String password;\n\n    @Value(\"${spring.datasource.driver-class-name}\")\n    private String driverClassName;\n\n    @Value(\"${spring.datasource.initialSize}\")\n    private int initialSize;\n\n    @Value(\"${spring.datasource.minIdle}\")\n    private int minIdle;\n\n    @Value(\"${spring.datasource.maxActive}\")\n    private int maxActive;\n\n    @Value(\"${spring.datasource.maxWait}\")\n    private int maxWait;\n\n    @Value(\"${spring.datasource.timeBetweenEvictionRunsMillis}\")\n    private int timeBetweenEvictionRunsMillis;\n\n    @Value(\"${spring.datasource.minEvictableIdleTimeMillis}\")\n    private int minEvictableIdleTimeMillis;\n\n    @Value(\"${spring.datasource.validationQuery}\")\n    private String validationQuery;\n\n    @Value(\"${spring.datasource.testWhileIdle}\")\n    private boolean testWhileIdle;\n\n    @Value(\"${spring.datasource.testOnBorrow}\")\n    private boolean testOnBorrow;\n\n    @Value(\"${spring.datasource.testOnReturn}\")\n    private boolean testOnReturn;\n\n    @Value(\"${spring.datasource.poolPreparedStatements}\")\n    private boolean poolPreparedStatements;\n\n    @Value(\"${spring.datasource.maxPoolPreparedStatementPerConnectionSize}\")\n    private int maxPoolPreparedStatementPerConnectionSize;\n\n    @Value(\"${spring.datasource.filters}\")\n    private String filters;\n\n    @Value(\"{spring.datasource.connectionProperties}\")\n    private String connectionProperties;\n\n    @Bean\n    @Primary  //主数据源\n    public DataSource dataSource(){\n        DruidDataSource datasource = new DruidDataSource();\n\n        datasource.setUrl(this.dbUrl);\n        datasource.setUsername(username);\n        datasource.setPassword(password);\n        datasource.setDriverClassName(driverClassName);\n\n        //configuration\n        datasource.setInitialSize(initialSize);\n        datasource.setMinIdle(minIdle);\n        datasource.setMaxActive(maxActive);\n        datasource.setMaxWait(maxWait);\n        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);\n        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);\n        datasource.setValidationQuery(validationQuery);\n        datasource.setTestWhileIdle(testWhileIdle);\n        datasource.setTestOnBorrow(testOnBorrow);\n        datasource.setTestOnReturn(testOnReturn);\n        datasource.setPoolPreparedStatements(poolPreparedStatements);\n        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);\n        try {\n            datasource.setFilters(filters);\n        } catch (SQLException e) {\n            logger.error(\"druid configuration Exception\", e);\n        }\n        datasource.setConnectionProperties(connectionProperties);\n\n        return datasource;\n    }\n}\n```\n\n然后创建DruidFilter，代码如下：\n```\npackage com.dalaoyang.filter;\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.annotation.WebInitParam;\n\nimport com.alibaba.druid.support.http.WebStatFilter;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.filter\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n\n\n@WebFilter(filterName=\"druidWebStatFilter\",urlPatterns=\"/*\",\n        initParams={\n                @WebInitParam(name=\"exclusions\",value=\"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\")//忽略资源\n        }\n)\npublic class DruidFilter extends WebStatFilter  {\n}\n```\n\n\n新建DruidServlet，在类上面加注解@WebServlet，其中配置了登录druid监控页面的账号密码，白名单黑名单之类的配置，代码如下：\n```\npackage com.dalaoyang.servlet;\nimport javax.servlet.annotation.WebInitParam;\nimport javax.servlet.annotation.WebServlet;\n\nimport com.alibaba.druid.support.http.StatViewServlet;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.servlet\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/12\n */\n\n\n@WebServlet(urlPatterns=\"/druid/*\",\n        initParams={\n                @WebInitParam(name=\"allow\",value=\"\"),// IP白名单(没有配置或者为空，则允许所有访问)\n                @WebInitParam(name=\"deny\",value=\"\"),// IP黑名单 (deny优先于allow)\n                @WebInitParam(name=\"loginUsername\",value=\"admin\"),// 登录druid管理页面用户名\n                @WebInitParam(name=\"loginPassword\",value=\"admin\")// 登录druid管理页面密码\n        })\npublic class DruidServlet extends StatViewServlet {\n\n}\n```\n\n然后在启动类加入注解@ServletComponentScan，让项目扫描到servlet，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\n\n\n@SpringBootApplication\n// 启动类必须加入@ServletComponentScan注解，否则无法扫描到servlet\n@ServletComponentScan\npublic class SpringbootDruidApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootDruidApplication.class, args);\n    }\n}\n```\n\n\n剩余的就是和整合jpa一样的entity（实体类），repository（数据操作层），controller（测试使用的controller），直接展示代码。\n\nCity\n\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@Entity\n@Table(name=\"city\")\npublic class City {\n\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n\nCityRepository\n\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.City;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Repository\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic interface CityRepository extends JpaRepository<City,Integer> {\n}\n```\n\nCityController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.repository.CityRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n\n    @Autowired\n    private CityRepository cityRepository;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(String cityName,String cityIntroduce){\n        City city = new City(cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCity?cityId=2\n    @GetMapping(value = \"deleteCity\")\n    public String deleteCity(int cityId){\n        cityRepository.delete(cityId);\n        return \"success\";\n    }\n\n    //http://localhost:8888/updateCity?cityId=3&cityName=沈阳&cityIntroduce=辽宁省省会\n    @GetMapping(value = \"updateCity\")\n    public String updateCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        cityRepository.save(city);\n        return \"success\";\n    }\n\n\n    //http://localhost:8888/getCityById?cityId=3\n    @GetMapping(value = \"getCityById\")\n    public City getCityById(int cityId){\n        City city = cityRepository.findOne(cityId);\n        return city;\n    }\n}\n```\n\n然后启动项目，可以看到控制台已经创建了city表。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/1)\n\n然后访问http://localhost:8888/druid，可以看到如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/2)\n\n输入账号密码admin，admin，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/3)\n\n然后这时我们可以访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都\n\n然后点击导航上面的SQL监控，如下图，\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/26/4)\n\n从上图可以看到启动项目创建表的sql已经刚刚执行的sql。到这里整合已经完成了。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-15', 1129, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (27, '使用Actuator监控', 'Actuator可能大家非常熟悉，它是springboot提供对应用自身监控，以及对应用系统配置查看等功能。\n\n\nspringboot使用actuator的方式非常简单，只需要在项目中加入依赖spring-boot-starter-actuator，完整pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_actuator</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_actuator</name>\n	<description>springboot_actuator</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n\n其余没有任何修改，没有新建任何类，在配置文件中加入了几条属性，配置文件如下：\n```\n##端口号\nserver.port=8888\n\n\n##项目信息\ninfo.name=dalaoyang\ninfo.server.port=${server.port}\n```\n\n\n然后启动项目可以看到：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/1)\n\n介绍一下红框内的Actuator暴露的功能：\n\nHTTP方法 | 路径 | 描述 | 鉴权\n- | :-: | :-: | :-:\nGET	| /autoconfig |	查看自动配置的使用情况 |	true\nGET	|/configprops|	查看配置属性，包括默认配置|	true\nGET	|/beans	|查看bean及其关系列表|	true\nGET	|/dump	|打印线程栈|	true\nGET	|/env	|查看所有环境变量|	true\nGET	|/env/{name}|	查看具体变量值|	true\nGET	|/health|	查看应用健康指标|	false\nGET	|/info|	查看应用信息|	false\nGET	|/mappings|	查看所有url映射|	true\nGET	|/metrics|	查看应用基本指标|	true\nGET	|/metrics/{name}|	查看具体指标|	true\nPOST |	/shutdown|	关闭应用|	true\nGET	|/trace|	查看基本追踪信息|	true\n\n\n通过上面表格，我们可以在浏览器上访问http://localhost:8888/health可以看到如下图:\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/2)\n\n\n访问http://localhost:8888/info，可以看到\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/27/3)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-15', 612, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (28, 'linux6.8安装docker', 'Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\n本文介绍一下本人在阿里云服务器centos6.8安装docker的方法：\n\n使用root登录服务器，输入\n```\nyum install docker-io\n```\n\n\n安装完成之后启动docker，如下图即为启动成功\n```\nservice docker start\n```\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/1)\n\n\n查看docker状态\n```\nservice docker status\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/2)\n\n查看docker版本\n```\ndocker version\n```\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/3)\n\n\nps:本人在第一次安装的时候遇到一个小插曲，执行下面命令，无法启动docker\n```\nyum install docker\n```\n\n然后我通过卸载docker在用上面安装的方法成功的。\n```\nyum remove docker\n```\n\n下图是我之前启动的提示\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/28/4)\n\n\n遇到相似的问题可以跟我的方法一样去解决，由于本人也是刚刚开始学习docker很多东西我也不是理解的很明白，有不对的地方可以及时指正我。', 'dalaoyang', '2018-04-16', 353, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (29, 'linux安装tomcat', '在linux上安装tomcat可以直接在linux服务器上通过wget方式直接下载tomcat，也可以把本地的tomcat上传到服务器。由于本人之前下载过tomcat，就直接从电脑上上传到服务器。\n\n本人使用的是mac 通过命令行 \n```\nscp /Users/dalaoyang/downloads/apache-tomcat-7.0.77.tar.gz root@47.98.***.***:/usr/local/tomcat//apache-tomcat-7.0.77.tar.gz\n```\n\n简单说一下   \nscp 上传  \n/Users/dalaoyang/downloads/apache-tomcat-7.0.77.tar.gz  本地文件路径\nroot 登录服务器用户  \n@47.98.***.*** 服务器地址  \n/root/Downloads/apache-tomcat-7.0.77.tar.gz 上传到服务器上的地址及名称\n\n\n接下来是要在linux服务器上操作的：\n\n创建一个tomcat目录，位置可以根据自己情况选择\n\n```\nmkdir /usr/local/tomcat\n```\n\n将上传的tomcat复制到上面目录\n```\ncp apache-tomcat-7.0.77.tar.gz /usr/local/tomcat/\n```\n\n进入tomcat目录\n```\ncd /usr/local/tomcat/\n```\n\n解压tomcat\n```\ntar -zxvf apache-tomcat-7.0.77.tar.gz\n```\n\n下面是启动tomcat：\n\n进入tomcat的bin目录\n```\ncd /usr/local/tomcat/apache-tomcat-7.0.77/bin/\n```\n\n启动tomcat\n```\n./startup.sh\n```\n\n关闭tomcat\n```\n./shutdown.sh\n```', 'dalaoyang', '2018-04-16', 394, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (30, 'linux安装jenkins', '首先先安装一个jdk，如果没有安装可以查看我的文章[linux安装jdk](https://juejin.im/post/5ac47dd5518825558c47a5d7)\n\n\n然后使用下面命令\n```\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\nsudo yum install jenkins\n```\n\n\n启动jenkins\n```\nservice jenkins start\n```\n\n然后访问http://${ip}/8080，可以看到jenkins那个小老头，根据自行配置安装插件，其中密码在这里\n\n```\nvi /var/lib/jenkins/secrets/initialAdminPassword\n```\n', 'dalaoyang', '2018-04-16', 296, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (31, 'linux安装maven', 'maven之前本地就有，直接上传到了服务器上，我使用的是maven-3.5.3\r\n\r\n从本地上传maven\r\n\r\n```\r\nscp /Users/dalaoyang/downloads/apache-maven-3.5.3-bin.tar.gz root@47.98.***.***:/usr/local/maven/apache-maven-3.5.3-bin.tar.gz\r\n```\r\n\r\n\r\n到服务器上  \r\n\r\n解压maven\r\n```\r\ntar -zxvf apache-maven-3.5.3-bin.tar.gz\r\n```\r\n\r\n打开配置文件\r\n```\r\nvi /etc/profile\r\n```\r\n\r\n然后配置环境变量，在文件最后加入\r\n```\r\nexport M2_HOME=/usr/local/maven/apache-maven-3.5.3\r\nexport PATH=$PATH:$M2_HOME/bin\r\n```\r\n\r\n使配置生效\r\n```\r\nsource /etc/profile\r\n```\r\n\r\n验证结果\r\n```\r\nmvn -v\r\n```\r\n\r\n\r\n', 'dalaoyang', '2018-04-17', 376, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (32, 'SpringBoot整合Redis', '偷懒了几天，好几天没写springboot了。真的不是没什么可写，是因为坚持做一件事真的很难。  \n\n今天抽空弄了一个springboot整合redis的小例子。\n\n首先做好准备工作，在本地安装一个redis，具体步骤可以自行百度，然后启动redis。出现下图页面就启动成功了。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/1)\n\n\n然后新建项目，加入redis依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_redis</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_redis</name>\n	<description>springboot_redis</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-redis</artifactId>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n然后在application.properties加入redis配置：\n```\n##端口号\nserver.port=8888\n\n# Redis数据库索引（默认为0）\nspring.redis.database=0 \n# Redis服务器地址\nspring.redis.host=localhost\n# Redis服务器连接端口\nspring.redis.port=6379 \n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n#连接池最大连接数（使用负值表示没有限制）\nspring.redis.pool.max-active=8 \n# 连接池最大阻塞等待时间（使用负值表示没有限制）\nspring.redis.pool.max-wait=-1 \n# 连接池中的最大空闲连接\nspring.redis.pool.max-idle=8 \n# 连接池中的最小空闲连接\nspring.redis.pool.min-idle=0 \n# 连接超时时间（毫秒）\nspring.redis.timeout=0\n\n```\n\nRedisConfig配置类，其中@EnableCaching开启注解\n```\npackage com.dalaoyang.config;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.config\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/18\n */\n@Configuration\n@EnableCaching//开启缓存\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Bean\n    public CacheManager cacheManager(RedisTemplate<?,?> redisTemplate) {\n        CacheManager cacheManager = new RedisCacheManager(redisTemplate);\n        return cacheManager;\n    }\n\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, String> redisTemplate = new RedisTemplate<String, String>();\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n}\n```\n\n由于只是简单整合，我只创建了一个RedisService来用来存取缓存数据，实际项目中可以根据需求创建interface，impl等等，代码如下：\n```\npackage com.dalaoyang.service;\nimport javax.annotation.Resource;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.service\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/18\n */\n@Service\npublic class RedisService {\n    @Resource\n    private RedisTemplate<String,Object> redisTemplate;\n\n    public void set(String key, Object value) {\n        //更改在redis里面查看key编码问题\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        vo.set(key, value);\n    }\n\n    public Object get(String key) {\n        ValueOperations<String,Object> vo = redisTemplate.opsForValue();\n        return vo.get(key);\n    }\n}\n```\n\n实体类City：\n```\npackage com.dalaoyang.entity;\n\nimport java.io.Serializable;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.Entity\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\npublic class City implements Serializable {\n    private int cityId;\n    private String cityName;\n    private String cityIntroduce;\n\n    public City(int cityId, String cityName, String cityIntroduce) {\n        this.cityId = cityId;\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City(String cityName, String cityIntroduce) {\n        this.cityName = cityName;\n        this.cityIntroduce = cityIntroduce;\n    }\n\n    public City() {\n    }\n\n    public int getCityId() {\n        return cityId;\n    }\n\n    public void setCityId(int cityId) {\n        this.cityId = cityId;\n    }\n\n    public String getCityName() {\n        return cityName;\n    }\n\n    public void setCityName(String cityName) {\n        this.cityName = cityName;\n    }\n\n    public String getCityIntroduce() {\n        return cityIntroduce;\n    }\n\n    public void setCityIntroduce(String cityIntroduce) {\n        this.cityIntroduce = cityIntroduce;\n    }\n}\n```\n\n测试类CityController\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.City;\nimport com.dalaoyang.service.RedisService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/4/7\n */\n@RestController\npublic class CityController {\n\n    @Autowired\n    private RedisService redisService;\n\n\n    //http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=1\n    @GetMapping(value = \"saveCity\")\n    public String saveCity(int cityId,String cityName,String cityIntroduce){\n        City city = new City(cityId,cityName,cityIntroduce);\n        redisService.set(cityId+\"\",city);\n        return \"success\";\n    }\n\n\n\n    //http://localhost:8888/getCityById?cityId=1\n    @GetMapping(value = \"getCityById\")\n    public City getCity(int cityId){\n        City city = (City) redisService.get(cityId+\"\");\n        return city;\n    }\n}\n```\n\n到这里配置基本上都完成了，然后启动项目访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=18\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/2)\n\n发现报错了，看了一下后台，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/3)\n\n发现是实体类没有序列化，然后给City类序列化，然后访问http://localhost:8888/saveCity?cityName=北京&cityIntroduce=中国首都&cityId=18发现这次成功了。\n\n然后查看redis，发现key值的编码不对\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/4)\n\n在RedisService中加入\n```\n //更改在redis里面查看key编码问题\n        RedisSerializer redisSerializer =new StringRedisSerializer();\n        redisTemplate.setKeySerializer(redisSerializer);\n```\n在查看redis的key发现编码正确了\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/32/5)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://dalaoyang.cn/)', 'dalaoyang', '2018-04-18', 1124, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (33, '使用Admin监控', '在springboot中，也提供了很全面的监控系统。这篇文章介绍一下springboot—admin监控springboot项目。\n\n\n原来大致是这样的，springboot——admin——server负责当监控中心，功能类似springcloud--eureka。其他springboot作为client把自身信息注册到admin--server中去。\n\n\n创建一个springboot-admin-server项目。pom文件中加入依赖，pom文件完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_admin_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_admin_server</name>\n    <description>springboot_admin_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-server</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-server-ui</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n在springboot启动类上加入注解@EnableAdminServer，代码如下：\n```\npackage com.dalaoyang;\n\nimport de.codecentric.boot.admin.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@EnableAdminServer\npublic class SpringbootAdminServerApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootAdminServerApplication.class, args);\n	}\n}\n```\n\n\n到这里就配置完成了，启动项目访问http://localhost:8080/可以看到下图，目前还没有发现client\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/1)\n\n\n然后创建一个springboot-admin-client项目，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_admin_client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_admin_client</name>\n    <description>springboot_admin_client</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-client</artifactId>\n            <version>1.5.6</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n然后只需配置一下服务注册到admin-server即可，配置如下：\n```\n##将服务注册到admin-server\nspring.boot.admin.url=http://localhost:8080\n\n##端口号\nserver.port=8388\n\n#禁用安全控制\nmanagement.security.enabled=false\n```\n\n启动项目，在访问http://localhost:8080/发现服务已经注册成功了，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/2)\n\n然后点击右侧的Details，可以看到更详细的监控信息\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/3)\n\nDetails:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/4)\nMetrices:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/5)\n\nEnviroment:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/6)\n\nLogging:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/7)\n\nJMX:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/8)\n\n\nThreads:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/9)\n\nAudit:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/10)\n\nTrace:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/33/11)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-19', 735, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (34, '负载均衡---ribbon', 'Ribbon:提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。\n\n\n上一篇简单讲解了eureka的使用，这一篇文章基于上一篇的基础上，讲一下springcloud的另一个重要的组件ribbon。\n\n这篇文章需要新建三个工程，service（8762），service（8763），service-ribbon（8764），三个服务分别向eureka-server注册中心注册，本文的服务使用的注册中心都是本人创建的测试eureka--[http://eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)。\n\n首先新建一个service（8762），括号内的8762是项目的端口号，加入eureka依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_service</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_service</name>\n    <description>springcloud_service</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件\n```\n##端口号\nserver.port=8762\n\n##服务名称\nspring.application.name=service\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类使用注解@EnableEurekaClient向注册中心注册，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@EnableEurekaClient\npublic class SpringcloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringcloudServiceApplication.class, args);\n    }\n\n\n    @Value(\"${server.port}\")\n    String port;\n\n    @Value(\"${spring.application.name}\")\n    String serviceName;\n\n    @GetMapping(\"/\")\n    public String index(){\n        return \"serviceName=\" + serviceName + \"-------port=\" + port;\n    }\n}\n```\n\n到这里service（8762）创建完成，然后复制一个项目，端口号改为8763作为service（8763）。\n\n然后新建项目service-ribbon（8764），pom文件加入ribbon依赖，pom完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_ribbon</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_ribbon</name>\n    <description>springcloud_ribbon</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-ribbon</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8764\n\n##服务名称\nspring.application.name=service_ribbon\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n由于只是一个简单demo，所有我将java代码都写在了启动类里面，解释一下，@LoadBalanced放在RestTemplate上面，表明RestTemplate开启负载均衡。代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\npublic class SpringcloudRibbonApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudRibbonApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${server.port}\")\n	String port;\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@GetMapping(\"/\")\n	public String index(){\n		return restTemplate().getForObject(\"http://service/\",String.class);\n	}\n}\n```\n\n分别启动service（8762），service（8763），service-ribbon（8764）三个工程。\n先查看http://eureka.dalaoyang.cn/,可以看到三个实例注册成功。如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/1)\n多次访问http://localhost:8764/，可以看到页面交替显示\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/2)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/3)\n可以看到负载均衡已经做到了。\n\n完整项目流程如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/34/4)', 'dalaoyang', '2018-04-19', 648, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (35, 'linux安装redis', '进入usr/local文件夹\n```\ncd usr/local\n```\n\n先创建一个redis文件夹\n```\nmkdir redis\n```\n\n下载redis\n```\nwget http://download.redis.io/releases/redis-4.0.9.tar.gz\n```\n\n解压缩 \n```\ntar xzf redis-4.0.9.tar.gz\n```\n\n进入redis文件夹\n```\ncd redis-4.0.9\n```\n\n编译\n```\nmake\n```\n\n进入到src文件夹\n\n```\ncd src\n```\n\n执行安装 \n```\nmake install\n```\n\n到这里就安装完成了\n\n然后输入命令，启动redis\n```\n./redis-server\n```\n\n在打开一个终端\n```\nredis-cli\n```\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/35/1)\n', 'dalaoyang', '2018-04-19', 338, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (36, '声明式调用---Feign', 'Feign:Feign是一种声明式、模板化的HTTP客户端。\n\n\n用我的理解来说，Feign的功能类似dubbo暴露服务，但是与dubbo稍有不同的是Feign是HTTP REST接口的形式暴露的。\n\n\n这一篇还是要利用到上一篇中的service（8762），service（8763）两个服务，先启动这两个服务。\n\n新建项目，service-feign（8765），pom加入feign依赖，完整pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_feign</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_feign</name>\n    <description>springcloud_feign</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-feign</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n在启动类加入@EnableFeignClients注解，如果没有加入basePackages制定扫描包得话，默认会去找项目会扫描到的所有@FeignClient。启动类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.feign.EnableFeignClients;\n\n\n@SpringBootApplication\n@EnableEurekaClient\n//@EnableFeignClients(basePackages = \"com.dalaoyang.interfaces\")\n@EnableFeignClients\npublic class SpringcloudFeignApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudFeignApplication.class, args);\n	}\n}\n\n```\n\n创建Feign暴露接口，接口上加入@FeignClient(value=\"service\",fallback = FeignFallbackService.class)\n注解。\nservice为要远程调用服务的名字，即你要调用服务的spring.application.name  \nfallback为远程调用失败后回调的方法。代码如下：\n```\npackage com.dalaoyang.interfaces;\n\nimport com.dalaoyang.back.FeignFallbackService;\nimport org.springframework.cloud.netflix.feign.FeignClient;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.interfaces\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/20\n */\n@FeignClient(value=\"service\",fallback = FeignFallbackService.class)\n//这里是要远程调用的服务的名称，即你要调用服务的spring.application.name\n//fallback是远程调用失败回调的方法\npublic interface FeignInterface {\n    @GetMapping(\"/\")\n    String IndexInfo();\n}\n```\n\n\n远程调用失败回调类FeignFallbackService，要实现对应的FeignClient实现对应的方法:\n```\npackage com.dalaoyang.back;\n\nimport com.dalaoyang.interfaces.FeignInterface;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.back\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/20\n */\n@Service\npublic class FeignFallbackService implements FeignInterface {\n    @Override\n    public String IndexInfo(){\n        return \"远程调用失败！\";\n    };\n}\n```\n\n最后看一下配置文件，需要注意的是feign.hystrix.enabled，如果配置远程调用回调的话需要声明一下Feign的 hystrix支持，不然页面还是会显示错误。\n```\n##端口号\nserver.port=8765\n\n##服务名称\nspring.application.name=service_feign\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n\n##声明Feign的 hystrix支持\nfeign.hystrix.enabled=true\n```\n\n\n启动service-feign（8765），先去看一眼http://eureka.dalaoyang.cn\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-87667680dca691ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到服务注册成功，然后访问http://localhost:8765/，可以看到页面和使用ribbon的时候一样交替显示。\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-faba991d2a5179ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-a694c9236e536594?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n控制台\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-38b1ed5c0efa0aca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后我们关闭service（8762），service（8763）两个服务，再次访问，可以看到\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-3f9670835711631c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-20', 693, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (37, '熔断器---Hystrix', 'Hystrix：熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。\n\n\n说到熔断器，先要引入另外一个词，雪崩效应。\n\n雪崩效应，百度百科的解释是这样的：    \n\n**登山时，决不能顺着山边扔石子儿。一是有击中别人的危险，一枚从数千英尺落下的小石头，破坏力相当惊人；二是有可能引发雪崩，一枚不起眼的小石子儿，顶多只能撞动几块差不多大小的石头；但只要有足够数量的石头翻滚起来，用不了多久，大块大块的岩石也会松动下滑。于是乎，这一颗小小的石子儿，就能引发一场雪崩。这个道理不言自明，好比就是水滴石穿、蝴蝶效应，说的都是一个小因素的变化，却往往有着无比强大的力量，以至于最后改变整体结构、产生意想不到的结果。现在，把这个原理适用于商业和技术领域，它同样能得到类似的效果—商业和技术本身具有一定的结构和体系，当人们适当地拆散其结构，并予以重新组合，便能释放出犹如雪崩般巨大的能量。雪崩把旧有的产业体系打得粉碎，甚至，有时候干脆让整个产业消失。在雪崩的巨大压力下，商业与技术之间固有的联系被彻底中断，不得不接受新的改造和整合，其最终将引爆一系列创新的革命，这就是“雪崩效应”。\n以上来自百度百科。**\n\n从上面可以看到，造成雪崩效应很可能就是因为一个特别小的原因，比如一个石子。然后让我们在看一下下图：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/1)\n\n图中每个字母代表了一个微服务，剪头代表服务的调用。  \n假设1：\n服务G由于某种原因瘫痪了，可以看出来影响的是服务M无法调用服务G，可能说某种意义上，影响的只是单服务，光看图可能没那么大影响。\n假设2：\n服务B瘫痪了，从图中能够发现上半区的所有服务都要瘫痪。\n假设3：\n最坏的可能，服务A瘫痪了，服务A的瘫痪导致B,C,D全部瘫痪，连锁反应造成所有服务都死了，造成整个系统的瘫痪。\n\n为了不让这样的事情发生，springcloud中提供了Hystrix熔断器，即在失败率达到阈值时（默认为5秒内20次失败），自动调用回调方法，使请求快速返回。\n\n举一个通俗的例子，大家都能遇到这样的情况，家里的用电量过高的时候，会出现“跳闸”，为什么出现跳闸，就是因为长期用电量过高，会出现超载，长期这样就会升温，引起火灾等不好的连锁反应。\n\n下面介绍一下ribbon整合断路器：\n\n新建一个项目springcloud_hystric_ribbon，项目在springboot_ribbon上做了简单的修改，pom文件中加入hystrix，pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_hystric_ribbon</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_hystric_ribbon</name>\n	<description>springcloud_hystric_ribbon</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-ribbon</artifactId>\n		</dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-hystrix</artifactId>\n        </dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8764\n\n##服务名称\nspring.application.name=springcloud_hystric_ribbon\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类加入注解@EnableHystrix开启熔断器，然后在之前的方法上加上注解	@HystrixCommand(fallbackMethod = \"indexError\")，其中fallbackMethod是在调用失败时的回调方法。代码如下：\n```\npackage com.dalaoyang;\n\nimport com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;\nimport com.netflix.ribbon.proxy.annotation.Hystrix;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@EnableEurekaClient\n@RestController\n@EnableHystrix\npublic class SpringcloudHystricRibbonApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudHystricRibbonApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${server.port}\")\n	String port;\n\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@HystrixCommand(fallbackMethod = \"indexError\")\n	@GetMapping(\"/\")\n	public String index(){\n		return restTemplate().getForObject(\"http://service/\",String.class);\n	}\n\n\n	public String indexError(){\n		return \"调用服务失败!\";\n	}\n}\n```\n\n启动服务，访问http://localhost:8764/，可以看到响应如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/2)\n\n\n\n接下来说一下feign的熔断器使用，其实上一篇文章已经使用了断路器，这里就不具体介绍了，如果需要可以看我的上一篇文章--[《声明式调用---Feign》](https://www.dalaoyang.cn/article/36)\n\n\n然后我们在改造一下springcloud_hystric_ribbon项目，加入Hystrix Dashboard仪表盘，pom文件中加入依赖：\n```\n\n<dependency>\n	<groupId>org.springframework.boot</groupId>\n	<artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<dependency>\n	<groupId>org.springframework.cloud</groupId>\n	<artifactId>spring-cloud-starter-hystrix-dashboard</artifactI>\n</dependency>\n```\n\n启动类加入@EnableHystrixDashboard启动仪表盘。启动项目，访问http://localhost:8764/hystrix\n\n可以看到下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/3)\n\n\n上面填写http://localhost:8764/hystrix.stream，title随便填写一下即可，然后点击Monitor Stream，看到下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/4)\n\n这是发现一直在loading，不要着急，在打开一个窗口请求一下http://localhost:8764/，然后在看一下仪表盘，如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/37/5)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-21', 576, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (38, '路由网关---zuul', 'Zuul：Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。\n\n\n在微服务盛行的时代，客户端与系统之间的交互基本上如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/1)\n\n客户端想要请求到服务，首先请求到zuul网关，然后zuul网管将请求分发到对应的服务去。\n\n新建一个springcloud_zuul（8766），pom文件加入zuul依赖，pom文件完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_zuul</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_zuul</name>\n    <description>springcloud_zuul</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zuul</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n然后在启动类上添加@EnableZuulProxy启动zuul，完整代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@SpringBootApplication\n@EnableZuulProxy\npublic class SpringcloudZuulApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZuulApplication.class, args);\n	}\n\n}\n\n```\n\n在配置文件加入如下配置：\n```\n##端口号\nserver.port=8766\n\n##服务名称\nspring.application.name=service-zuul\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n\n##zuul路由转发 service-a转发到service_ribbon\nzuul.routes.service-a.path=/service-a/**\n\nzuul.routes.service-a.service-id=service_ribbon\n\n##zuul路由转发 service-b转发到service\nzuul.routes.service-b.path=/service-b/**\n\nzuul.routes.service-b.service-id=service\n\n```\n\n然后分别启动之前service（8762），service_ribbon（8764）和springcloud_zuul（8766）。\n\n先看一下[http://eureka.dalaoyang.cn](http://eureka.dalaoyang.cn)，如下：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/2)\n\n然后在浏览器上分别访问http://localhost:8766/service-a，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/3)\n\nhttp://localhost:8766/service-b，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/4)\n\nzuul网关的简单配置到这里基本上完成了。\n\n\n然后介绍一个zuul的过滤器，新建一个过滤器的类RequestLogFilter，这个类需要继承ZuulFilter，需要实现几个方法。\n\n\nfilterType：这个方法返回过滤器的类型，pre（路由前执行），route（路由中执行），post（路由后执行），error（发生错误后执行）\n\nfilterOrder：返回一个int来指定过滤器的执行顺序\n\nshouldFilter：返回boolean值来决定过滤器是否执行，true执行，false不执行。\n\nrun：过滤器要执行的操作。\n\n本项目中过滤器代码如下：\n```\npackage com.dalaoyang.filter;\n\nimport com.netflix.zuul.ZuulFilter;\nimport com.netflix.zuul.context.RequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.http.HttpServletRequest;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.filter\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/22\n */\npublic class RequestLogFilter extends ZuulFilter {\n\n    Logger logger = LoggerFactory.getLogger(RequestLogFilter.class);\n\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public Object run() {\n        RequestContext requestContext = RequestContext.getCurrentContext();\n        HttpServletRequest httpServletRequest = requestContext.getRequest();\n        logger.info(\"请求路径：\"+httpServletRequest.getRequestURL().toString());\n        return null;\n    }\n}\n```\n\n修改一下启动类：\n```\npackage com.dalaoyang;\n\nimport com.dalaoyang.filter.RequestLogFilter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\n@EnableZuulProxy\npublic class SpringcloudZuulApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZuulApplication.class, args);\n	}\n\n	@Bean\n	public RequestLogFilter requestLogFilter(){\n		return new RequestLogFilter();\n	}\n}\n\n```\n\n在重启项目，访问http://localhost:8766/service-a，然后看控制台可以看到如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/5)\n\n有时会出现这样的情况，比如本文的service实例down了，如下图这种情况\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/6)\n\n那么在访问，就会无法转发，其实zuul也提供了失败回调的方法。\n新建一个ServiceFallback类实现ZuulFallbackProvider接口，需要重写2个方法。\n\n其中getRoute方法中可以指定为哪个微服务回退，*为所有服务。\n\n代码如下：\n```\npackage com.dalaoyang.fallback;\n\nimport org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.stereotype.Component;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springcloud_learn\n * @package com.dalaoyang.fallback\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/22\n */\n@Component\npublic class ServiceFallback implements ZuulFallbackProvider {\n\n    @Override\n    public String getRoute() {\n        return \"*\";\n    }\n\n    @Override\n    public ClientHttpResponse fallbackResponse() {\n        return new ClientHttpResponse() {\n            @Override\n            public HttpStatus getStatusCode() throws IOException {\n                return HttpStatus.OK;\n            }\n\n            @Override\n            public int getRawStatusCode() throws IOException {\n                return this.getStatusCode().value();\n            }\n\n            @Override\n            public String getStatusText() throws IOException {\n                return this.getStatusCode().getReasonPhrase();\n            }\n\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public InputStream getBody() throws IOException {\n                return new ByteArrayInputStream(\"当前访问服务不可用！\".getBytes());\n            }\n\n            @Override\n            public HttpHeaders getHeaders() {\n                HttpHeaders httpHeaders = new HttpHeaders();\n                MediaType mediaType = new MediaType(\"application\", \"json\",\n                        Charset.forName(\"UTF-8\"));\n                httpHeaders.setContentType(mediaType);\n                return httpHeaders;\n            }\n        };\n    }\n}\n```\n\n重启项目，访问http://localhost:8766/service-a如下图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/38/7)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-22', 582, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (39, '分布式配置', '分布式配置：配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。\n\n\n在生产环境，由于配置繁多，造成运维人员或开发人员配置上的不便，springcloud提供了分布式配置中心组建，支持从远程配置仓库（git）中读取配置。\n\n读取配置流程如下图：\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-b7b40102e5561be3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nconfig-server从git中读取远程配置，config-client在从config-server中读取配置。\n\n\n新建项目config-server，pom文件中加入config-server依赖，完整代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_config_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_config_server</name>\n    <description>springcloud_config_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-eureka</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n启动类加入@EnableConfigServer注解，表明这是一个config-server并开启配置服务器功能。代码如下:\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.config.server.EnableConfigServer;\n\n@SpringBootApplication\n@EnableConfigServer\npublic class SpringcloudConfigServerApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigServerApplication.class, args);\n	}\n}\n```\n\napplication.properties配置如下：\n```\n##端口号\nserver.port=9000\n\n##服务名称\nspring.application.name=config_server\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n##远程仓库配置\n\n##git仓库地址\nspring.cloud.config.server.git.uri=https://gitee.com/dalaoyang/SpringCloudConfig.git\n\n##git仓库配置路径\nspring.cloud.config.server.git.searchPaths=config\n\n##git仓库分支\nspring.cloud.config.label=master\n\n##如果为公开仓库，用户名密码可不填\n##git仓库用户名\n##spring.cloud.config.server.git.username=\n\n##git仓库密码\n##spring.cloud.config.server.git.password=\n```\n\nconfig-server到这里构建完成，然后新建一个config-client服务。pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_config_client</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_config_client</name>\n	<description>springcloud_config_client</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n\n```\n\n\n然后新建一个配置文件，这里需要说明一下，config-client默认会去找8888端口的配置中心，如果配置中心使用8888端口，config-client可以使用application.properties配置文件。如果配置中心没有使用8888端口，那么config-client要使用bootstrap.properties，原因是bootstrap.* 命名的文件会被优先读取和配置。由于这个例子的项目使用端口为9000，所以新建一个bootstrap.properties，代码如下：\n```\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n然后做一个测试类，修改一下application，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudConfigClientApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigClientApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n\n}\n```\n\n到这里就全部构建完成了，依次启动config-server和config-client。\n\n先访问一下[http://eureka.dalaoyang.cn/](http://eureka.dalaoyang.cn/)\n![image](http://upload-images.jianshu.io/upload_images/9953332-1b97b85abe9283be?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到服务构建成功，然后访问http://localhost:8080/getTitle，可以看到：\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-861ea849971fc387?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-23', 581, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (40, '消息总线', 'SpringCloudBus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。\n\n在上一篇写出了springcloud对微服务的集中配置，那么就出现了一个问题，如果修改配置了怎么实现不需重启服务来实现配置的更新，下面有集中解决方法。\n\n1.使用/refresh手动刷新配置\n\n缺点：单点刷新，如果集群服务多的话，无论是工作量还是维护上都十分麻烦。\n\n使用上一篇的config-client服务，加入依赖，\n```\nspring-boot-starter-actuator\n```\npom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_config_client</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_config_client</name>\n	<description>springcloud_config_client</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n在Controller类上加入@RefreshScope注解，由于上一篇controller写在了启动类上，所以直接加在启动类上，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@RefreshScope\npublic class SpringcloudConfigClientApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudConfigClientApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n\n}\n```\n\n配置文件新增配置management.security.enabled=false，在刷新时关闭安全验证。\n\n代码如下：\n```\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n\n## 刷新时，关闭安全验证\nmanagement.security.enabled=false\n```\n\n分别启动项目config-server，config-client。访问http://localhost:8080/getTitle，结果如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/1)\n\n修改git上配置，修改为dalaoyang_test_change，在次请求，结果没有改变，使用postman或者其他工具post请求http://localhost:8080/getTitle看到返回如下结果。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/2)\n\n在次访问http://localhost:8080/getTitle，如下图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/3)\n\n\n2.使用springcloudbus刷新配置\n\nspringcloudbus需要使用轻量消息代理，本文使用rabbitmq，启动rabbitmq如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/4)\n\n访问http://localhost:15672/#/如下图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/5)\n\n新建项目springcloud_bus，同时改造config-client，pom文件加入bus依赖，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_bus</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_bus</name>\n	<description>springcloud_bus</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-eureka</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-config</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-actuator</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-bus-amqp</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n加入rabbitmq配置，配置文件如下：\n```\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n\n##端口号\nserver.port=8881\n\n## 刷新时，关闭安全验证\nmanagement.security.enabled=false\n\nspring.application.name=config-client\nspring.cloud.config.label=master\nspring.cloud.config.profile=test\nspring.cloud.config.uri= http://localhost:9000/\n\n##注册中心地址\neureka.client.service-url.defaultZone=http://eureka.dalaoyang.cn/eureka/\n```\n\n启动类加入注解@RefreshScope，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\n@RefreshScope\npublic class SpringcloudBusApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudBusApplication.class, args);\n	}\n\n\n	@Value(\"${title}\")\n	String title;\n\n	@RequestMapping(\"/getTitle\")\n	public String getTitle(){\n		return title;\n	}\n}\n```\n\nconfig-client加入同样依赖和配置，重启config-client，启动springcloud_bus，先去[http://eureka.dalaoyang.cn/](http://eureka.dalaoyang.cn/)，可以看到\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/6)\n\n先将git上配置改回dalaoyang_test，分别请求http://localhost:8881/getTitle和http://localhost:8080/getTitle结果如下：\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/7)\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/8)\n\n然后用postman使用post请求访问http://localhost:8881/bus/refresh\n\n再次分别请求http://localhost:8881/getTitle和http://localhost:8080/getTitle结果如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/9)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/40/10)\n\n从图中可以看出刷新配置成功。\n\n3.局部刷新配置，配置与第2种方法一样，只是在使用postman刷新时略加改变，在本文中使用http://localhost:8881/bus/refresh?destination=config-client:8881可以刷新服务名为config-client端口为8881的服务，如果想要刷新服务名为config-client的所有服务可以写成http://localhost:8881/bus/refresh?destination=config-client:**\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n', 'dalaoyang', '2018-04-24', 682, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (41, 'SpringBoot整合RabbitMQ', 'RabbitMQ是开源消息队列系统，用erlang语言开发。如果不了解可以查看官网[http://www.rabbitmq.com/](http://www.rabbitmq.com/)\n\n这篇文章介绍一个springboot简单整合RabbitMQ。\n\n1.安装rabbitmq，自行百度即可，方法很多。\n\n2.启动rabbitmq，成功如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/1)\n\n可以访问[http://localhost:15672/](http://localhost:15672/)查看管理页面\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/2)\n\n新建项目，pom文件加入依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springboot_rabbitmq</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springboot_rabbitmq</name>\n	<description>springboot_rabbitmq</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-amqp</artifactId>\n		</dependency>\n	</dependencies>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n新建一个消息发送者Sender，使用AmqpTemplate将消息发送到消息队列message中去。代码如下：\n```\npackage com.dalaoyang.sender;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.send\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@Component\npublic class Sender {\n    Logger logger = Logger.getLogger(Sender.class);\n\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    public String send(){\n        String context = \"简单消息发送\";\n        logger.info(\"简单消息发送时间：\"+new Date());\n        amqpTemplate.convertAndSend(\"message\", context);\n        return \"发送成功\";\n    }\n}\n```\n\n创建消息接收者Receiver，使用注解@RabbitListener(queues = \"message\")来监听message的消息队列@RabbitHandler来实现具体消费。\n\n```\npackage com.dalaoyang.receiver;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Date;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.receiver\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@Component\n@RabbitListener(queues = \"message\")\npublic class Receiver {\n    Logger logger = Logger.getLogger(Receiver.class);\n\n    @RabbitHandler\n    public void process(String Str) {\n        logger.info(\"接收消息：\"+Str);\n        logger.info(\"接收消息时间：\"+new Date());\n    }\n}\n```\n\n\n然后看一下配置信息，因为是简单整合，所以只配置了端口和rabbitmq的信息，如下：\n```\n##端口号\nserver.port=8888\n\n##rabbitmq\nspring.rabbitmq.host=localhost\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n```\n\n创建一个controller，这里仅用来测试，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.sender.Sender;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/25\n */\n@RestController\npublic class TestController {\n\n    @Autowired\n    private Sender sender;\n\n    @GetMapping(\"hello\")\n    public String helloTest(){\n        sender.send();\n        return \"success\";\n    }\n\n}\n```\n\n启动项目，访问[http://localhost:8888/hello](http://localhost:8888/hello)然后观看控制台可以看到消息已经发送成功。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/41/3)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-25', 785, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (42, '服务链路追踪---Sleuth', 'Sleuth：日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。\n\n\n当服务与服务之间调用复杂时，SpringCloud Sleuth配合Zipkin提供的界面，可以直观的分析追踪数据，这篇文章介绍SpringCloud Sleuth与Zipkin配合使用。\n\n新建Zipkin Server，加入zipkin依赖，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_zipkin</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_zipkin</name>\n	<description>springcloud_zipkin</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>io.zipkin.java</groupId>\n			<artifactId>zipkin-server</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>io.zipkin.java</groupId>\n			<artifactId>zipkin-autoconfigure-ui</artifactId>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件只配置了一个端口号：\n```\n##端口号\nserver.port=9000\n```\n\n启动类加入注解@EnableZipkinServer，来声明是一个ZipkinServer，启动项目，可以看到控制的log已经变化了，如图\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-54a36a74c760ab97?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n然后在浏览器访问[http://localhost:9000/zipkin/dependency/](http://localhost:9000/zipkin/dependency/)，如下图\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-17e4555d6c7d52d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n为了方便我们观察，分别创建了两个项目，first_service（9001），second_service（9002），pom文件加入spring-cloud-starter-zipkin依赖，\nfirst_service（9001）pom文件代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n	<modelVersion>4.0.0</modelVersion>\n\n	<groupId>com.dalaoyang</groupId>\n	<artifactId>springcloud_zipkin_firstservice</artifactId>\n	<version>0.0.1-SNAPSHOT</version>\n	<packaging>jar</packaging>\n\n	<name>springcloud_zipkin_firstservice</name>\n	<description>springcloud_zipkin_firstservice</description>\n\n	<parent>\n		<groupId>org.springframework.boot</groupId>\n		<artifactId>spring-boot-starter-parent</artifactId>\n		<version>1.5.9.RELEASE</version>\n		<relativePath/> <!-- lookup parent from repository -->\n	</parent>\n\n	<properties>\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n		<java.version>1.8</java.version>\n		<spring-cloud.version>Edgware.SR1</spring-cloud.version>\n	</properties>\n\n	<dependencies>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-web</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-devtools</artifactId>\n			<scope>runtime</scope>\n		</dependency>\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-test</artifactId>\n			<scope>test</scope>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.cloud</groupId>\n			<artifactId>spring-cloud-starter-zipkin</artifactId>\n			<version>1.3.1.RELEASE</version>\n		</dependency>\n	</dependencies>\n\n	<dependencyManagement>\n		<dependencies>\n			<dependency>\n				<groupId>org.springframework.cloud</groupId>\n				<artifactId>spring-cloud-dependencies</artifactId>\n				<version>${spring-cloud.version}</version>\n				<type>pom</type>\n				<scope>import</scope>\n			</dependency>\n		</dependencies>\n	</dependencyManagement>\n	<build>\n		<plugins>\n			<plugin>\n				<groupId>org.springframework.boot</groupId>\n				<artifactId>spring-boot-maven-plugin</artifactId>\n			</plugin>\n		</plugins>\n	</build>\n\n\n</project>\n```\n\n配置文件，其中spring.zipkin.base-url指定zipkin server地址\n```\nserver.port=9001\nspring.zipkin.base-url=http://localhost:9000\nspring.application.name=first_service\n```\n\n启动类加上@RestController注解方便测试，然后新建两个方法，一个用于被调用，一个调用其他，代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudZipkinFirstserviceApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZipkinFirstserviceApplication.class, args);\n	}\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@RequestMapping(\"/callSecond\")\n	public String callSecond(){\n		return restTemplate().getForObject(\"http://localhost:9002/second\", String.class);\n	}\n\n\n	@RequestMapping(\"/first\")\n	public String first(){\n		return serviceName;\n\n	}\n}\n```\n\n到这里first_service（9001）代码展示完成，接下来是second_service（9002）代码，内容不在赘述，和first_service（9001）类似。\n\npom文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springcloud_zipkin_secondservice</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springcloud_zipkin_secondservice</name>\n    <description>springcloud_zipkin_secondservice</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Edgware.SR1</spring-cloud.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-zipkin</artifactId>\n            <version>1.3.1.RELEASE</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n\n```\n\n配置文件：\n```\nserver.port=9002\nspring.zipkin.base-url=http://localhost:9000\nspring.application.name=second_service\n```\n\n启动类：\n```\npackage com.dalaoyang;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@RestController\npublic class SpringcloudZipkinSecondserviceApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringcloudZipkinSecondserviceApplication.class, args);\n	}\n\n\n	@Bean\n	@LoadBalanced\n	RestTemplate restTemplate() {\n		return new RestTemplate();\n	}\n\n	@Value(\"${spring.application.name}\")\n	String serviceName;\n\n	@RequestMapping(\"/second\")\n	public String second(){\n		return serviceName;\n	}\n\n	@RequestMapping(\"/callFirst\")\n	public String callFirst(){\n		return restTemplate().getForObject(\"http://localhost:9001/first\",String.class);\n	}\n}\n\n```\n\n启动这两个项目，浏览器访问[http://localhost:9001/callSecond](http://localhost:9001/callSecond)，然后观看Zipkin Server页面，可以看到调用关系，请求细节等，如下图：\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-6ce3a4e59bf5ab21?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-52a1b88202106b1a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-4e6ee8bdbb1d3b36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-2781280af5dc6a08?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n', 'dalaoyang', '2018-04-26', 575, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (43, 'SpringBoot拦截器', '在实际开发中，总存在着这样的场景，比如拦截请求的ip地址，或者在所有的请求都返回相同的数据，如果每一个方法都写出相同数据固然可以实现，但是随着项目的变大，重复的代码会越来越多，所以在这种情况我们可以用拦截器来实现。\n\n\n最近一直在研究thymeleaf，越发的感觉这个很好用，所以这篇文章也选择结合这个来使用。\n\n新建项目，pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_interceptor</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_interceptor</name>\n    <description>springboot_interceptor</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>net.sourceforge.nekohtml</groupId>\n            <artifactId>nekohtml</artifactId>\n            <version>1.9.15</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n新建一个拦截器CommonInterceptor，继承HandlerInterceptorAdapter。给大家说一下，在继承HandlerInterceptorAdapter有三个拦截器是经常使用的：\n1.preHandle在业务处理器处理请求之前被调用  \n2.postHandle在业务处理器处理请求执行完成后,生成视图之前执行\n3.afterCompletion在DispatcherServlet完全处理完请求后被调用\n\n本文使用的是postHandle，代码如下：\n```\npackage com.dalaoyang.interceptor;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.stereotype.Component;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.interceptor\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/27\n */\n@Component\npublic class CommonInterceptor extends HandlerInterceptorAdapter {\n    Logger logger = Logger.getLogger(CommonInterceptor.class);\n\n\n\n    //preHandle在业务处理器处理请求之前被调用，\n    //postHandle在业务处理器处理请求执行完成后,生成视图之前执行\n    //afterCompletion在DispatcherServlet完全处理完请求后被调用\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n                           ModelAndView modelAndView) throws Exception {\n        logger.info(\"请求ip：\"+request.getRemoteAddr());\n        logger.info(\"请求的方法：\"+request.getMethod());\n        ModelMap modelMap = modelAndView.getModelMap();\n        modelMap.addAttribute(\"title\",\"dalaoyang\");\n    }\n}\n```\n\n在启动类继承WebMvcConfigurerAdapter来为项目添加拦截器，代码如下：\n```\npackage com.dalaoyang;\n\nimport com.dalaoyang.interceptor.CommonInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n@SpringBootApplication\npublic class SpringbootInterceptorApplication extends WebMvcConfigurerAdapter {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootInterceptorApplication.class, args);\n    }\n\n    @Autowired\n    CommonInterceptor commonInterceptor;\n\n    // 增加拦截器\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(commonInterceptor);\n    }\n}\n```\n\nIndexController负责跳转，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/4/27\n */\n\n@Controller\npublic class IndexController {\n\n    @RequestMapping(\"/\")\n    public String index(Model model){\n        model.addAttribute(\"content\",\"hi , dalaoyang !\");\n        return \"index\";\n    }\n}\n```\n\n在templates下新建index.html，其中content是controller返回的内容，title是在拦截器中返回的内容，代码如下：\n```\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\n\n<!DOCTYPE html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title th:text=\"${title}\"></title>\n</head>\n<body>\n<p th:text=\"${content}\"></p>\n</body>\n</html>\n```\n\n\n启动项目，访问[http://localhost:8888/](http://localhost:8888/)，控制台如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/43/1)\n\n在看一下页面：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/43/2)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-27', 1047, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (45, 'SpringBoot统一处理异常', '在springboot项目，报错有着默认的提示，这篇文章介绍一下如何统一处理异常。\r\n\r\n新建项目，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_error</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_error</name>\r\n    <description>springboot_error</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n创建一个IndexController，里面写两个方法，index方法正常跳转，test方法是故意写的一个nullpoint的错误的方法。 代码如下：\r\n```\r\npackage com.dalaoyang.Controller;\r\n\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.Controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@RestController\r\npublic class IndexController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/test\")\r\n    public String test(){\r\n        Map map = null;\r\n        return map.toString();\r\n    }\r\n}\r\n```\r\n\r\n启动项目访问[http://localhost:8080/](http://localhost:8080/)，如下图，没有任何问题\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/1)\r\n\r\n\r\n然后随便访问一个项目里没有的地址，比如[http://localhost:8080/aaa](http://localhost:8080/aaa)，如下图所示，404没有找到：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/2)\r\n\r\n访问[http://localhost:8080/test](http://localhost:8080/test)，如下图500错误：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/3)\r\n\r\n\r\n从图上可以看到，springboot报错的时候都在找/error这个地址，这时我们新建一个CommonErrorController来统一处理异常，这个类实现了ErrorController，代码如下：\r\n```\r\npackage com.dalaoyang.Controller;\r\n\r\nimport org.springframework.boot.autoconfigure.web.ErrorController;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.Controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@RestController\r\npublic class CommonErrorController implements ErrorController {\r\n\r\n    private final String ERROR_PATH = \"/error\";\r\n\r\n\r\n    @Override\r\n    public String getErrorPath() {\r\n        return ERROR_PATH;\r\n    }\r\n\r\n    @RequestMapping(value = ERROR_PATH)\r\n    public String handleError(){\r\n        System.out.println(getErrorPath());\r\n        return \"error\";\r\n    }\r\n}\r\n```\r\n\r\n重启项目，在访问http://localhost:8080/aaa和http://localhost:8080/test就都返回\"error\"字符串了，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/45/4)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-28', 1135, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (46, '使用SpringSecurity', '前几天写了一个SpringBoot对拦截器的使用，在实际项目中，对一些情况需要做一些安全验证，比如在没有登录的情况下访问特定的页面应该解释的拦截处理。这一篇介绍使用SpringSecurity来做简单的安全控制，由于SpringSecurity比较复杂，如果有不对的地方可以大家一起学习。\r\n\r\n新建项目，前端页面使用thymeleaf，加入security依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_security</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_security</name>\r\n    <description>springboot_security</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-security</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.sourceforge.nekohtml</groupId>\r\n            <artifactId>nekohtml</artifactId>\r\n            <version>1.9.15</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n\r\n配置文件本文就是将之前整合thymeleaf的配置拿了过来，代码如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n\r\n#设定thymeleaf文件路径 默认为src/main/resources/templates\r\nspring.freemarker.template-loader-path=classpath:/templates\r\n#设定静态文件路径，js,css等\r\nspring.mvc.static-path-pattern=/static/**\r\n# 是否开启模板缓存，默认true\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n# 模板编码\r\nspring.freemarker.charset=UTF-8\r\n```\r\n\r\n接下来是这篇文章重要的地方，新建一个SecurityConfig类，继承WebSecurityConfigurerAdapter类，重写configure(HttpSecurity httpSecurity)方法，其中/css/**和/index的资源不需要验证，直接可以请求，/user/**的资源需要验证，权限是USER，/admin/**的资源需要验证，权限是ADMIN，登录地址是/login，登录失败地址是/login_error，异常重定向到 /401，注销跳转到/logout。\r\n注入AuthenticationManagerBuilder，在内存中创建一个用户dalaoyang，密码123的用户，权限是USER，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    // /css/**和/index的资源不需要验证，直接可以请求\r\n    // /user/**的资源需要验证，权限是USER /admin/**的资源需要验证，权限是ADMIN\r\n    // 登录地址是/login 登录失败地址是 /login_error\r\n    // 异常重定向到 /401\r\n    // 注销跳转到 /logout\r\n    @Override\r\n    protected void configure(HttpSecurity httpSecurity) throws Exception{\r\n        httpSecurity\r\n                .authorizeRequests()\r\n                .antMatchers(\"/css/**\",\"/index\").permitAll()\r\n                .antMatchers(\"/user/**\").hasRole(\"USER\")\r\n                .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\r\n                .and()\r\n                .formLogin().loginPage(\"/login\").failureUrl(\"/login_error\")\r\n                .and()\r\n                .exceptionHandling().accessDeniedPage(\"/401\");\r\n\r\n        httpSecurity.logout().logoutSuccessUrl(\"/logout\");\r\n    }\r\n\r\n\r\n    //内存中创建用户，用户名为dalaoyang，密码123，权限是USER\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth\r\n                .inMemoryAuthentication()\r\n                .withUser(\"dalaoyang\").password(\"123\").roles(\"USER\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n创建一个TestController负责跳转，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/4/28\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @RequestMapping(\"/\")\r\n    public String index(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/index\")\r\n    public String index2(){\r\n        return \"index\";\r\n    }\r\n\r\n    @RequestMapping(\"/user\")\r\n    public String user(){\r\n        return \"user/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/admin\")\r\n    public String admin(){\r\n        return \"admin/index\";\r\n    }\r\n\r\n    @RequestMapping(\"/login\")\r\n    public String login(){\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/login_error\")\r\n    public String login_error(Model model){\r\n        model.addAttribute(\"login_error\", \"用户名或密码错误\");\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/logout\")\r\n    public String logout(Model model){\r\n        model.addAttribute(\"login_error\", \"注销成功\");\r\n        return \"login\";\r\n    }\r\n\r\n    @RequestMapping(\"/401\")\r\n    public String error(){\r\n        return \"401\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n创建一个user/index.html，用于校验USER权限，没有登录的话不能直接访问，代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>user/index</title>\r\n</head>\r\n<body>\r\nuser/index\r\n\r\n<form th:action=\"@{/logout}\" method=\"post\">\r\n    <input type=\"submit\" value=\"注销\"/>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\n创建一个admin/index.html，只允许ADMIN权限访问，代码如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>admin</title>\r\n</head>\r\n<body>\r\nadmin/index\r\n</body>\r\n</html>\r\n```\r\n\r\n401页面，用于没有权限跳转：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>401</title>\r\n</head>\r\n<body>\r\n401\r\n</body>\r\n</html>\r\n```\r\n\r\nindex页面，任何权限都能访问\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>index</title>\r\n</head>\r\n<body>\r\nindex\r\n</body>\r\n</html>\r\n```\r\n\r\nlogin页面，用于登录\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>login</title>\r\n</head>\r\n<body>\r\n<h1>login</h1>\r\n<form th:action=\"@{/login}\" method=\"post\">\r\n    <span th:text=\"${login_error}\"></span>\r\n<br/>\r\n    <input type=\"text\" name=\"username\">用户名<br/>\r\n<input type=\"password\" name=\"password\">密码<br/>\r\n    <input type=\"submit\" value=\"登录\">\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\n到这里就全部创建完成了，启动项目，访问[http://localhost:8888/](http://localhost:8888/)，如图，可以直接访问。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/1)\r\n\r\n\r\n访问[http://localhost:8888/user](http://localhost:8888/user)被拦截到http://localhost:8888/login，如图\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/2)\r\n\r\n\r\n先输入错误的密码，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/3)\r\n\r\n\r\n然后输入用户名dalaoyang密码123，点击登录结果如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/4)\r\n\r\n访问[http://localhost:8888/admin](http://localhost:8888/admin)，如图，没有权限\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/5)\r\n\r\n我们在回到http://localhost:8888/user点击注销，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/46/6)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-04-29', 767, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (47, 'SpringBoot启动banner更改', '这篇文章的开始先给大家看一个图片\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/1)\r\n\r\n用过或者看过springboot的人都知道，这就是springboot启动的banner，这一篇介绍如何自定义springboot的启动bannner。\r\n\r\n先介绍一个可以制作自定义banner的网站，传送门：[http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20](http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/2)\r\n\r\n黄框内输入自定义文字，红框内填写字体，本文使用banner\r\n```\r\n    ___        _        _           _        ____    _  _      _        _  _      ___\r\n   F __\".     /.\\      FJ          /.\\      F __ ]  FJ  LJ    /.\\      F L L]   ,\"___\". \r\n  J |--\\ L   //_\\\\    J |         //_\\\\    J |--| L J \\/ F   //_\\\\    J   \\| L  FJ---L] \r\n  | |  J |  / ___ \\   | |        / ___ \\   | |  | | J\\  /L  / ___ \\   | |\\   | J |  [\"\"L\r\n  F L__J | / L___J \\  F L_____  / L___J \\  F L__J J  F  J  / L___J \\  F L\\\\  J | \\___] |\r\n J______/FJ__L   J__LJ________LJ__L   J__LJ\\______/F|____|J__L   J__LJ__L \\\\__LJ\\_____/F\r\n |______F |__L   J__||________||__L   J__| J______F |____||__L   J__||__L  J__| J_____F \r\n```                                                      \r\n\r\n新建banner.txt放入resources下，启动可以看到\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/3)\r\n\r\n另外spring提供了几种类型来设定banner：\r\n1.${AnsiColor.BRIGHT_CYAN}来设定banner字体，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/4)\r\n\r\n2.${AnsiBackground.BRIGHT_CYAN}来设定banner背景颜色，（本次demo样板较丑，勿喷），如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/5)\r\n\r\n3.${AnsiStyle.UNDERLINE}设定字体样式\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/6)\r\n\r\n\r\n还提供了几种与版本相关的，这里就简单举例说明2个，\r\n\r\n1.在配置文件中加入配置，如下：\r\n```\r\napplication.version=dalaoyang_v1\r\n```\r\n\r\n在banner中加入${application.version}使用，启动如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/7)\r\n\r\n配置文件加入\r\n```\r\nspring.application.name=dalaoyang\r\n```\r\n\r\nbanner中加入${spring.application.name}，如图\r\n\r\n2.使用springboot的版本\r\n\r\n在banner中加入${spring-boot.version}，启动如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/47/8)\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-04-30', 1618, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (48, 'SpringBoot使用validator校验', '在前台表单验证的时候，通常会校验一些数据的可行性，比如是否为空，长度，身份证，邮箱等等，那么这样是否是安全的呢，答案是否定的。因为也可以通过模拟前台请求等工具来直接提交到后台，比如postman这样的工具，那么遇到这样的问题怎么办呢，我们可以在后台也做相应的校验。\r\n\r\n\r\n新建项目，因为本文会使用postman模拟前端请求，所以本文需要加入web依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_validator</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_validator</name>\r\n	<description>springboot_validator</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n创建一个demo类，说一下本文使用demo中校验使用的注解：  \r\n@NotEmpty：非空  \r\n@Length：长度，最长或者最短  \r\n@Email：校验email  \r\n@Pattern：使用正则校验，本文使用的是身份证的正则  \r\n，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.Email;\r\nimport org.hibernate.validator.constraints.Length;\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.validation.constraints.Pattern;\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/1\r\n */\r\npublic class Demo implements Serializable {\r\n\r\n    @NotEmpty(message=\"用户名不能为空\")\r\n    @Length(min=6,max = 12,message=\"用户名长度必须位于6到12之间\")\r\n    private String userName;\r\n\r\n\r\n    @NotEmpty(message=\"密码不能为空\")\r\n    @Length(min=6,message=\"密码长度不能小于6位\")\r\n    private String passWord;\r\n\r\n    @Email(message=\"请输入正确的邮箱\")\r\n    private String email;\r\n\r\n    @Pattern(regexp = \"^(\\\\d{18,18}|\\\\d{15,15}|(\\\\d{17,17}[x|X]))$\", message = \"身份证格式错误\")\r\n    private String idCard;\r\n\r\n    public String getUserName() {\r\n        return userName;\r\n    }\r\n\r\n    public void setUserName(String userName) {\r\n        this.userName = userName;\r\n    }\r\n\r\n    public String getPassWord() {\r\n        return passWord;\r\n    }\r\n\r\n    public void setPassWord(String passWord) {\r\n        this.passWord = passWord;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public String getIdCard() {\r\n        return idCard;\r\n    }\r\n\r\n    public void setIdCard(String idCard) {\r\n        this.idCard = idCard;\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n创建一个TestDemoController，来测试本文的校验，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.Demo;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.validation.Valid;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/1\r\n */\r\n@RestController\r\npublic class TestDemoController {\r\n\r\n    @PostMapping(\"/\")\r\n    public String testDemo(@Valid Demo demo,BindingResult bindingResult){\r\n        StringBuffer stringBuffer = new StringBuffer();\r\n        if(bindingResult.hasErrors()){\r\n            List<ObjectError> list =bindingResult.getAllErrors();\r\n            for (ObjectError objectError:list) {\r\n                stringBuffer.append(objectError.getDefaultMessage());\r\n                stringBuffer.append(\"---\");\r\n            }\r\n        }\r\n        return stringBuffer!=null?stringBuffer.toString():\"\";\r\n    }\r\n}\r\n```\r\n\r\n启动项目使用postman分别做了三次请求，第一次所有属性都是随便填写的，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/1)\r\n\r\n第二次输入正确的身份证和邮箱，用户名和密码为空，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/2)\r\n\r\n第三次全部输入正确，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/48/3)\r\n\r\n\r\n本文只是使用的简单的几种校验，Hibernate-validator还有很多种校验的方法，大家可以参考这篇文章[https://blog.csdn.net/xgblog/article/details/52548659](https://blog.csdn.net/xgblog/article/details/52548659)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-01', 1885, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (49, '使用shiro安全管理', '之前介绍了springboot使用security进行权限管理，这篇文件介绍一下springboot使用shiro进行安全管理。\r\n\r\n\r\n简述本文的场景，本文使用springboot1.5.9+mysql+jpa+thymeleaf+shiro制作一个简单的验证，其中有2个角色，分别是admin和user，admin可以使用select和delete功能，user只能使用select功能。\r\n\r\n新建项目，加入shiro依赖，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_shiro</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_shiro</name>\r\n    <description>springboot_shiro</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.sourceforge.nekohtml</groupId>\r\n            <artifactId>nekohtml</artifactId>\r\n            <version>1.9.15</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.shiro</groupId>\r\n            <artifactId>shiro-spring</artifactId>\r\n            <version>1.4.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n\r\n##数据库配置\r\n##数据库地址\r\nspring.datasource.url=jdbc:mysql://localhost:3306/shiro?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=root\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n##validate  加载hibernate时，验证创建数据库表结构\r\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\r\n##create-drop        加载hibernate时创建，退出是删除表结构\r\n##update                 加载hibernate自动更新数据库结构\r\n##validate 启动时验证表的结构，不会创建表\r\n##none  启动时不做任何操作\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\n##控制台打印sql\r\nspring.jpa.show-sql=true\r\n\r\n\r\n# 建议在开发时关闭缓存,不然没法看到实时页面\r\nspring.thymeleaf.cache=false\r\n##去除thymeleaf的html严格校验\r\nspring.thymeleaf.mode=LEGACYHTML5\r\n```\r\n\r\n创建了三个实体类，分别是\r\nSysUser（用户表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysUser implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer userId;\r\n    @NotEmpty\r\n    private String userName;\r\n    @NotEmpty\r\n    private String passWord;\r\n\r\n    //多对多关系\r\n    @ManyToMany(fetch= FetchType.EAGER)\r\n    //急加载，加载一个实体时，定义急加载的属性会立即从数据库中加载\r\n    //FetchType.LAZY：懒加载，加载一个实体时，定义懒加载的属性不会马上从数据库中加载\r\n    @JoinTable(name = \"SysUserRole\", joinColumns = { @JoinColumn(name = \"userId\") },\r\n            inverseJoinColumns ={@JoinColumn(name = \"roleId\") })\r\n    private List<SysRole> roleList;// 一个用户具有多个角色\r\n\r\n\r\n    public Integer getUserId() {\r\n        return userId;\r\n    }\r\n\r\n    public void setUserId(Integer userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    public String getUserName() {\r\n        return userName;\r\n    }\r\n\r\n    public void setUserName(String userName) {\r\n        this.userName = userName;\r\n    }\r\n\r\n    public String getPassWord() {\r\n        return passWord;\r\n    }\r\n\r\n    public void setPassWord(String passWord) {\r\n        this.passWord = passWord;\r\n    }\r\n\r\n    public List<SysRole> getRoleList() {\r\n        return roleList;\r\n    }\r\n\r\n    public void setRoleList(List<SysRole> roleList) {\r\n        this.roleList = roleList;\r\n    }\r\n}\r\n```\r\nSysRole（角色表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.hibernate.validator.constraints.NotEmpty;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysRole implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer roleId;\r\n    private String roleName;\r\n\r\n    //多对多关系\r\n    @ManyToMany(fetch= FetchType.EAGER)\r\n    @JoinTable(name=\"SysRoleMenu\",joinColumns={@JoinColumn(name=\"roleId\")},inverseJoinColumns={@JoinColumn(name=\"menuId\")})\r\n    private List<SysMenu> menuList;\r\n\r\n    //多对多关系\r\n    @ManyToMany\r\n    @JoinTable(name=\"SysUserRole\",joinColumns={@JoinColumn(name=\"roleId\")},inverseJoinColumns={@JoinColumn(name=\"userId\")})\r\n    private List<SysUser> userList;// 一个角色对应多个用户\r\n\r\n    public Integer getRoleId() {\r\n        return roleId;\r\n    }\r\n\r\n    public void setRoleId(Integer roleId) {\r\n        this.roleId = roleId;\r\n    }\r\n\r\n    public String getRoleName() {\r\n        return roleName;\r\n    }\r\n\r\n    public void setRoleName(String roleName) {\r\n        this.roleName = roleName;\r\n    }\r\n\r\n    public List<SysMenu> getMenuList() {\r\n        return menuList;\r\n    }\r\n\r\n    public void setMenuList(List<SysMenu> menuList) {\r\n        this.menuList = menuList;\r\n    }\r\n\r\n    public List<SysUser> getUserList() {\r\n        return userList;\r\n    }\r\n\r\n    public void setUserList(List<SysUser> userList) {\r\n        this.userList = userList;\r\n    }\r\n}\r\n\r\n```\r\nSysMenu（菜单表）\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport javax.persistence.*;\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Entity\r\npublic class SysMenu implements Serializable {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Integer menuId;\r\n    private String menuName;\r\n\r\n    @ManyToMany\r\n    @JoinTable(name=\"SysRoleMenu\",joinColumns={@JoinColumn(name=\"menuId\")},inverseJoinColumns={@JoinColumn(name=\"roleId\")})\r\n    private List<SysRole> roleList;\r\n\r\n    public Integer getMenuId() {\r\n        return menuId;\r\n    }\r\n\r\n    public void setMenuId(Integer menuId) {\r\n        this.menuId = menuId;\r\n    }\r\n\r\n    public String getMenuName() {\r\n        return menuName;\r\n    }\r\n\r\n    public void setMenuName(String menuName) {\r\n        this.menuName = menuName;\r\n    }\r\n\r\n    public List<SysRole> getRoleList() {\r\n        return roleList;\r\n    }\r\n\r\n    public void setRoleList(List<SysRole> roleList) {\r\n        this.roleList = roleList;\r\n    }\r\n}\r\n```\r\n\r\n\r\n创建一个UserRepository用于查询用户信息：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.SysUser;\r\nimport org.springframework.data.repository.CrudRepository;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\npublic interface UserRepository extends CrudRepository<SysUser,Long> {\r\n\r\n    SysUser findByUserName(String username);\r\n}\r\n```\r\n\r\n创建几个前台页面进行测试，分别是：\r\nlogin.html:\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Login</title>\r\n</head>\r\n<body>\r\n错误信息：<h4 th:text=\"${msg}\"></h4>\r\n<form action=\"\" method=\"post\">\r\n    <p>账号：<input type=\"text\" name=\"username\" value=\"dalaoyang\"/></p>\r\n    <p>密码：<input type=\"text\" name=\"password\" value=\"123\"/></p>\r\n    <p><input type=\"submit\" value=\"登录\"/></p>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\nindex.html\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\nindex\r\n<br/>\r\n<form th:action=\"@{/logout}\" method=\"post\">\r\n    <p><input type=\"submit\" value=\"注销\"/></p>\r\n</form>\r\n</body>\r\n</html>\r\n```\r\n\r\ndelete.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\ndelete\r\n</body>\r\n</html>\r\n```\r\n\r\nselect.html\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\nselect\r\n</body>\r\n</html>\r\n```\r\n\r\n403.html\r\n```\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n403\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n创建一个ShiroConfig，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport org.apache.shiro.mgt.SecurityManager;\r\nimport org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;\r\nimport org.apache.shiro.spring.web.ShiroFilterFactoryBean;\r\nimport org.apache.shiro.web.mgt.DefaultWebSecurityManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;\r\n\r\nimport java.util.Date;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Configuration\r\npublic class ShiroConfig {\r\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    @Bean\r\n    public ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) {\r\n        logger.info(\"启动shiroFilter--时间是：\" + new Date());\r\n        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\r\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\r\n        //shiro拦截器\r\n        Map<String,String> filterChainDefinitionMap = new LinkedHashMap<String,String>();\r\n        //<!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问-->\r\n        //<!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 -->\r\n\r\n        // 配置不被拦截的资源及链接\r\n        filterChainDefinitionMap.put(\"/static/**\", \"anon\");\r\n        // 退出过滤器\r\n        filterChainDefinitionMap.put(\"/logout\", \"logout\");\r\n\r\n        //配置需要认证权限的\r\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\r\n        // 如果不设置默认会自动寻找Web工程根目录下的\"/login\"页面，即本文使用的login.html\r\n        shiroFilterFactoryBean.setLoginUrl(\"/login\");\r\n        // 登录成功后要跳转的链接\r\n        shiroFilterFactoryBean.setSuccessUrl(\"/index\");\r\n\r\n        //未授权界面\r\n        shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\r\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\r\n        return shiroFilterFactoryBean;\r\n    }\r\n\r\n    //自定义身份认证Realm（包含用户名密码校验，权限校验等）\r\n    @Bean\r\n    public MyShiroRealm myShiroRealm(){\r\n        MyShiroRealm myShiroRealm = new MyShiroRealm();\r\n        return myShiroRealm;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public SecurityManager securityManager(){\r\n        DefaultWebSecurityManager securityManager =  new DefaultWebSecurityManager();\r\n        securityManager.setRealm(myShiroRealm());\r\n        return securityManager;\r\n    }\r\n\r\n    //开启shiro aop注解支持，不开启的话权限验证就会失效\r\n    @Bean\r\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\r\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\r\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\r\n        return authorizationAttributeSourceAdvisor;\r\n    }\r\n\r\n    //配置异常处理，不配置的话没有权限后台报错，前台不会跳转到403页面\r\n    @Bean(name=\"simpleMappingExceptionResolver\")\r\n    public SimpleMappingExceptionResolver\r\n    createSimpleMappingExceptionResolver() {\r\n        SimpleMappingExceptionResolver simpleMappingExceptionResolver = new SimpleMappingExceptionResolver();\r\n        Properties mappings = new Properties();\r\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");//数据库异常处理\r\n        mappings.setProperty(\"UnauthorizedException\",\"403\");\r\n        simpleMappingExceptionResolver.setExceptionMappings(mappings);  // None by default\r\n        simpleMappingExceptionResolver.setDefaultErrorView(\"error\");    // No default\r\n        simpleMappingExceptionResolver.setExceptionAttribute(\"ex\");     // Default is \"exception\"\r\n        return simpleMappingExceptionResolver;\r\n    }\r\n}\r\n```\r\n\r\n在配置一个MyShiroRealm用于登录认证和授权认证，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dalaoyang.entity.SysMenu;\r\nimport com.dalaoyang.entity.SysRole;\r\nimport com.dalaoyang.entity.SysUser;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.apache.shiro.authc.AuthenticationException;\r\nimport org.apache.shiro.authc.AuthenticationInfo;\r\nimport org.apache.shiro.authc.AuthenticationToken;\r\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\r\nimport org.apache.shiro.authz.AuthorizationInfo;\r\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\r\nimport org.apache.shiro.realm.AuthorizingRealm;\r\nimport org.apache.shiro.subject.PrincipalCollection;\r\n\r\nimport javax.annotation.Resource;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\npublic class MyShiroRealm extends AuthorizingRealm {\r\n\r\n    @Resource\r\n    private UserRepository userRepository;\r\n\r\n    //授权\r\n    @Override\r\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\r\n        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();\r\n        SysUser userInfo  = (SysUser)principals.getPrimaryPrincipal();\r\n        for(SysRole role:userInfo.getRoleList()){\r\n            authorizationInfo.addRole(role.getRoleName());\r\n            for(SysMenu menu:role.getMenuList()){\r\n                authorizationInfo.addStringPermission(menu.getMenuName());\r\n            }\r\n        }\r\n        return authorizationInfo;\r\n    }\r\n\r\n    //认证\r\n    @Override\r\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)\r\n            throws AuthenticationException {\r\n        //获得当前用户的用户名\r\n        String username = (String)token.getPrincipal();\r\n        System.out.println(token.getCredentials());\r\n        //根据用户名找到对象\r\n        //实际项目中，这里可以根据实际情况做缓存，如果不做，Shiro自己也是有时间间隔机制，2分钟内不会重复执行该方法\r\n        SysUser userInfo = userRepository.findByUserName(username);\r\n        if(userInfo == null){\r\n            return null;\r\n        }\r\n        //这里会去校验密码是否正确\r\n        SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(\r\n                userInfo, //用户名\r\n                userInfo.getPassWord(),//密码\r\n                getName()\r\n        );\r\n        return authenticationInfo;\r\n    }\r\n}\r\n```\r\n\r\n最后新建一个controller，其中本文使用了2种验证权限的方法，select方法使用@RequiresPermissions(\"select\")来验证用户是否具有select权限，delete方法使用@RequiresRoles(\"admin\")来验证用户是否是admin，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.apache.shiro.authc.IncorrectCredentialsException;\r\nimport org.apache.shiro.authc.UnknownAccountException;\r\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\r\nimport org.apache.shiro.authz.annotation.RequiresRoles;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/2\r\n */\r\n@Controller\r\npublic class TestController {\r\n\r\n    @GetMapping({\"/\",\"/index\"})\r\n    public String index(){\r\n        return\"index\";\r\n    }\r\n\r\n    @GetMapping(\"/403\")\r\n    public String unauthorizedRole(){\r\n        return \"403\";\r\n    }\r\n\r\n    @GetMapping(\"/delete\")\r\n    //@RequiresPermissions(\"delete\")\r\n    @RequiresRoles(\"admin\")\r\n    public String delete(){\r\n        return \"delete\";\r\n    }\r\n\r\n    @GetMapping(\"/select\")\r\n    @RequiresPermissions(\"select\")\r\n    public String select(){\r\n        return \"select\";\r\n    }\r\n\r\n    @RequestMapping(\"/login\")\r\n    public String login(HttpServletRequest request, Map<String, Object> map) throws Exception{\r\n        System.out.println(\"HomeController.login()\");\r\n        // 登录失败从request中获取shiro处理的异常信息。\r\n        // shiroLoginFailure:就是shiro异常类的全类名.\r\n        String exception = (String) request.getAttribute(\"shiroLoginFailure\");\r\n        String msg = \"\";\r\n        //根据异常判断错误类型\r\n        if (exception != null) {\r\n            if (UnknownAccountException.class.getName().equals(exception)) {\r\n                msg = \"账号不存在\";\r\n            } else if (IncorrectCredentialsException.class.getName().equals(exception)) {\r\n                msg = \"密码不正确\";\r\n            } else {\r\n                msg = \"else >> \"+exception;\r\n            }\r\n        }\r\n        map.put(\"msg\", msg);\r\n        // 此方法不处理登录成功,由shiro进行处理\r\n        return \"/login\";\r\n    }\r\n\r\n    @GetMapping(\"/logout\")\r\n    public String logout(){\r\n        return \"/login\";\r\n    }\r\n}\r\n```\r\n\r\n为了方便测试，本人插入了几条初始数据，sql如下：\r\n```\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (1, \'add\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (2, \'delete\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (3, \'update\');\r\nINSERT INTO `shiro`.`sys_menu`(`menu_id`, `menu_name`) VALUES (4, \'select\');\r\nINSERT INTO `shiro`.`sys_role`(`role_id`, `role_name`) VALUES (1, \'admin\');\r\nINSERT INTO `shiro`.`sys_role`(`role_id`, `role_name`) VALUES (2, \'user\');\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 1);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 2);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 3);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (1, 4);\r\nINSERT INTO `shiro`.`sys_role_menu`(`role_id`, `menu_id`) VALUES (2, 4);\r\nINSERT INTO `shiro`.`sys_user`(`user_id`, `pass_word`, `user_name`) VALUES (1, \'123\', \'dalaoyang\');\r\nINSERT INTO `shiro`.`sys_user`(`user_id`, `pass_word`, `user_name`) VALUES (2, \'123\', \'xiaoli\');\r\nINSERT INTO `shiro`.`sys_user_role`(`role_id`, `user_id`) VALUES (1, 1);\r\nINSERT INTO `shiro`.`sys_user_role`(`role_id`, `user_id`) VALUES (2, 2);\r\n```\r\n\r\n启动项目，我在这里就不一一截图了，口述一下，访问http://localhost:8888/select由于没有登录的原因，会自动跳转到http://localhost:8888/login，输入错误的用户名和密码会出现对应的提示。输入角色user的用户名xiaoli，密码123。访问http://localhost:8888/select页面会正常跳转，访问http://localhost:8888/delete会拦截到403页面。\r\n\r\n如果使用角色为admin的用户dalaoyang密码123登录，以上请求全可以正常访问。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://dalaoyang.cn](https://www.dalaoyang.cn/)', 'dalaoyang', '2018-05-02', 957, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (50, '递归基础思想', '有个朋友刚刚在学习java，刚学了一个月，他虽然脑袋很大（不是针对所有人，只是针对他），但是说自己总是在解题的时候找不到思路。他在学习时遇到了几道关于递归的小题，今天简单聊一下关于递归的思路。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/50/1)\n\n\n上面是朋友发过来的图片，就这几道题简单谈一下递归从哪里入手。\n\n先介绍一下递归，百度百科是这样解释的：程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。\n\n从上面的话我们可以看出，递归其实就是将大的问题分解成小的问题，并且这个子问题的解决方法和大问题的解决方法一样。  \n\n其中必须满足以下条件：   \n1.必要条件必须要有终止条件\n2.子问题要更接近终止条件\n\n\n以上图第一个例子说明一下：\n\n**编写代码，完成1+2+3+4+...+100输出结果**:\n\n这里以1加到5为例子\n```\npublic static void main(String args[]) {\n        System.out.println(result(5));\n    }\n\n    public static int result(int i){\n        int sum;\n        if (i == 1) return 1;\n        else\n            sum = i + result(i - 1);\n            System.out.println(\"i是：\"+i+\"------sum是：\"+sum);\n        return sum;\n    }\n```\n\n从代码来看是这样一个调用过程：\n```\nresult(5)\n5+result(4)\n5+(4+result(3))\n5+(4+(3+result(2)))\n5+(4+(3+(2+result(1))))\n```\n\n展开成数字来看：\n```\n(5+(4+(3+(2+(1))))）\n(5+(4+(3+(2+1)))）\n(5+(4+(3+3))）\n(5+(4+6)）\n(5+10）\n```\n\n这时我们在回头看递归的满足条件：  \n条件一：终止数字1（✔️）  \n条件二：每次减1来接近终止数字（✔️）', 'dalaoyang', '2018-05-03', 95, 'Y', '1', 'N');
INSERT INTO `article_info` VALUES (51, 'mac安装Elasticsearch', '去官网下载[https://www.elastic.co/downloads/elasticsearch](https://www.elastic.co/downloads/elasticsearch)\r\n\r\n本人使用的是2.3.2版本，我下载的是tar版本的，然后解压。\r\n\r\n进入es的安装目录，\r\n\r\n```\r\ncd elasticsearch-2.3.2\r\n```\r\n\r\n启动es\r\n```\r\nbin/elasticsearch\r\n```\r\n\r\n这时可能会报一个logs文件夹权限问题的错误，由于我直接解决了，没有截图，给logs文件夹赋权限。\r\n```\r\nsudo chown -R dalaoyang logs\r\n```\r\n\r\n重启es\r\n\r\n在页面访问[http://localhost:9200/](http://localhost:9200/)，如下图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/51/1)\r\n\r\n\r\n安装一个可视化插件，elasticsearch-head\r\n\r\n```\r\nsudo bin/plugin install mobz/elasticsearch-head\r\n```\r\n\r\n安装成功后，重启es，访问[http://localhost:9200/_plugin/head/](http://localhost:9200/_plugin/head/) 如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/51/2)', 'dalaoyang', '2018-05-04', 648, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (52, 'SpringBoot整合elasticsearch', '在这一篇文章开始之前，你需要先安装一个ElasticSearch，如果你是mac或者linux可以参考[https://www.jianshu.com/p/e47b451375ea](https://www.jianshu.com/p/e47b451375ea)，如果是windows可以自定百度一下。\r\n\r\n\r\n下面是官方套话介绍elasticsearch：\r\n\r\n**ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\r\n我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。**\r\n\r\n具体elasticsearch相关问题可以去[elastic中文社区](https://elasticsearch.cn/)查看。  \r\n\r\n  \r\n这一篇文章将介绍springboot如何简单整合elasticsearch。\r\n\r\n1.启动elasticsearch。  \r\n2.新建项目，pom文件中加入elasticsearch依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_elasticsearch</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_elasticsearch</name>\r\n    <description>springboot_elasticsearch</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n##es地址\r\nspring.data.elasticsearch.cluster-nodes = 127.0.0.1:9300\r\n```\r\n\r\n新建一个商品实体类GoodsInfo，其中需要注意：   \r\nindexName：索引名称 可以理解为数据库名 必须为小写 不然会报org.elasticsearch.indices.InvalidIndexNameException异常   \r\ntype：类型 可以理解为表名\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.elasticsearch.annotations.Document;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@Document(indexName = \"testgoods\",type = \"goods\")\r\n//indexName索引名称 可以理解为数据库名 必须为小写 不然会报org.elasticsearch.indices.InvalidIndexNameException异常\r\n//type类型 可以理解为表名\r\npublic class GoodsInfo implements Serializable {\r\n    private Long id;\r\n    private String name;\r\n    private String description;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    public GoodsInfo(Long id, String name, String description) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    public GoodsInfo() {\r\n    }\r\n}\r\n```\r\n\r\n创建GoodsRepository，继承ElasticsearchRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.GoodsInfo;\r\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@Component\r\npublic interface GoodsRepository extends ElasticsearchRepository<GoodsInfo,Long> {\r\n}\r\n```\r\n\r\n最后新建一个controller进行测试，其中包含简单的增删改查以及一个搜索，增删改查这里不做解释了。需要注意es的第一页页码是0\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.GoodsInfo;\r\nimport com.dalaoyang.repository.GoodsRepository;\r\nimport org.elasticsearch.index.query.QueryBuilders;\r\nimport org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder;\r\nimport org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;\r\nimport org.springframework.data.elasticsearch.core.query.SearchQuery;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/4\r\n */\r\n@RestController\r\npublic class GoodsController {\r\n\r\n    @Autowired\r\n    private GoodsRepository goodsRepository;\r\n\r\n    //http://localhost:8888/save\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        GoodsInfo goodsInfo = new GoodsInfo(System.currentTimeMillis(),\r\n                \"商品\"+System.currentTimeMillis(),\"这是一个测试商品\");\r\n        goodsRepository.save(goodsInfo);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/delete?id=1525415333329\r\n    @GetMapping(\"delete\")\r\n    public String delete(long id){\r\n        goodsRepository.delete(id);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/update?id=1525417362754&name=修改&description=修改\r\n    @GetMapping(\"update\")\r\n    public String update(long id,String name,String description){\r\n        GoodsInfo goodsInfo = new GoodsInfo(id,\r\n                name,description);\r\n        goodsRepository.save(goodsInfo);\r\n        return \"success\";\r\n    }\r\n\r\n    //http://localhost:8888/getOne?id=1525417362754\r\n    @GetMapping(\"getOne\")\r\n    public GoodsInfo getOne(long id){\r\n        GoodsInfo goodsInfo = goodsRepository.findOne(id);\r\n        return goodsInfo;\r\n    }\r\n\r\n\r\n    //每页数量\r\n    private Integer PAGESIZE=10;\r\n\r\n    //http://localhost:8888/getGoodsList?query=商品\r\n    //http://localhost:8888/getGoodsList?query=商品&pageNumber=1\r\n    //根据关键字\"商品\"去查询列表，name或者description包含的都查询\r\n    @GetMapping(\"getGoodsList\")\r\n    public List<GoodsInfo> getList(Integer pageNumber,String query){\r\n        if(pageNumber==null) pageNumber = 0;\r\n        //es搜索默认第一页页码是0\r\n        SearchQuery searchQuery=getEntitySearchQuery(pageNumber,PAGESIZE,query);\r\n        Page<GoodsInfo> goodsPage = goodsRepository.search(searchQuery);\r\n        return goodsPage.getContent();\r\n    }\r\n\r\n\r\n    private SearchQuery getEntitySearchQuery(int pageNumber, int pageSize, String searchContent) {\r\n        FunctionScoreQueryBuilder functionScoreQueryBuilder = QueryBuilders.functionScoreQuery()\r\n                .add(QueryBuilders.matchPhraseQuery(\"name\", searchContent),\r\n                        ScoreFunctionBuilders.weightFactorFunction(100))\r\n                .add(QueryBuilders.matchPhraseQuery(\"description\", searchContent),\r\n                        ScoreFunctionBuilders.weightFactorFunction(100))\r\n                //设置权重分 求和模式\r\n                .scoreMode(\"sum\")\r\n                //设置权重分最低分\r\n                .setMinScore(10);\r\n\r\n        // 设置分页\r\n        Pageable pageable = new PageRequest(pageNumber, pageSize);\r\n        return new NativeSearchQueryBuilder()\r\n                .withPageable(pageable)\r\n                .withQuery(functionScoreQueryBuilder).build();\r\n    }\r\n\r\n}\r\n```\r\n\r\n启动项目，先调用http://localhost:8888/save方法，插入几条数据，然后去es管理页面[http://localhost:9200/_plugin/head/](http://localhost:9200/_plugin/head/)，如下图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/52/1)\r\n\r\n\r\n访问[http://localhost:8888/getGoodsList?query=商品](http://localhost:8888/getGoodsList?query=商品)，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/52/2)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-04', 897, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (53, 'SpringBoot整合mongoDB', 'MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\r\n\r\n这一片文章介绍一个springboot整合mongodb，如果你了解整合mysql之类的数据库，可以一带而过。\r\n\r\n还是同样的套路，pom文件中加入mongodb依赖，完整pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_mongodb</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_mongodb</name>\r\n    <description>springboot_mongodb</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n配置文件中，配置对应mongodb的数据库信息，这里只配置了数据库地址，端口号，数据库名称，配置如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##mongo配置\r\nspring.data.mongodb.host=127.0.0.1\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=test\r\n```\r\n\r\n\r\n也是一样的创建一个实体类，如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.annotation.Id;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\n\r\npublic class UserInfo {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo(Long id, String username, String password) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n}\r\n```\r\n\r\n创建一个数据操作层，继承MongoRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.repository\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\npublic interface UserRepository extends MongoRepository<UserInfo,Long> {\r\n}\r\n```\r\n\r\n\r\n和往常一样，创建一个controller进行增删改查测试，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/5\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        UserInfo userInfo = new UserInfo(System.currentTimeMillis(),\"用户\"+System.currentTimeMillis(),\"123\");\r\n        userRepository.save(userInfo);\r\n        return \"success\";\r\n    }\r\n\r\n\r\n    @GetMapping(\"getUserList\")\r\n    public List<UserInfo> getUserList(){\r\n        List<UserInfo> userInfoList = userRepository.findAll();\r\n        return userInfoList;\r\n    }\r\n\r\n    @GetMapping(\"delete\")\r\n    public String delete(Long id){\r\n        userRepository.delete(id);\r\n        return \"success\";\r\n    }\r\n\r\n    @GetMapping(\"update\")\r\n    public String update(Long id,String username,String password){\r\n        UserInfo userInfo = new UserInfo(id,username,password);\r\n        userRepository.save(userInfo);\r\n        return \"success\";\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n到这里就结束了，可以启动项目访问[http://localhost:8888/save](http://localhost:8888/save)创建几条数据。\r\n\r\n然后访问[http://localhost:8888/getUserList](http://localhost:8888/getUserList)可以查看刚才创建的数据，如下图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/53/1)\r\n\r\n修改和删除这里就不做测试了，在方法上有对应的测试访问地址。\r\n\r\n这里做一个简单的总结，通过整合几种数据库，包含关系型数据mysql，文件式数据库mongodb，甚至说elasticsearch等等其实步骤都大致如下： \r\n \r\n**1.加入对应依赖   \r\n2.配置文件配置对应数据库信息   \r\n3.数据操作层继承想要的repository**\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-05', 685, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (54, 'SpringBoot使用LomBok', 'Lombok是什么？它是一个能帮我们消除那些必须要写但是重复的代码，比如setter，getter，构造函数之类的方法。\r\n\r\n首先先简单说一下idea安装lombok，有2种方法：\r\n1.直接从[http://plugins.jetbrains.com/](http://plugins.jetbrains.com/)下载，然后放到idea安装文件下面的plugins，然后重启idea   \r\n2.在idea的settings（windows）或者Preferences（mac），下找到plugins菜单，点击Browse repositories，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/1)\r\n\r\n然后搜索lombok，点击右侧下载，下载完成重启即可，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/2)\r\n\r\n新建项目，在pom文件中加入lombok依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_lombok</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_lombok</name>\r\n    <description>springboot_lombok</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.16.20</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n新建一个User类，这个是使用lombok的类，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n\r\n    private Integer id;\r\n    private String name;\r\n    private String password;\r\n}\r\n```\r\n\r\n新建一个UserNoLombok类，这个和原来一样，目的为了对比使用lombok的好处，代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\npublic class UserNoLombok {\r\n    private Integer id;\r\n    private String name;\r\n    private String password;\r\n\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserNoLombok(Integer id, String name, String password) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.password = password;\r\n    }\r\n\r\n\r\n    public UserNoLombok() {\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        UserNoLombok that = (UserNoLombok) o;\r\n        return Objects.equals(id, that.id) &&\r\n                Objects.equals(name, that.name) &&\r\n                Objects.equals(password, that.password);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n\r\n        return Objects.hash(id, name, password);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"UserNoLombok{\" +\r\n                \"id=\" + id +\r\n                \", name=\'\" + name + \'\\\'\' +\r\n                \", password=\'\" + password + \'\\\'\' +\r\n                \'}\';\r\n    }\r\n}\r\n```\r\n\r\n然后新建一个UserController测试，代码如下：\r\n```\r\n\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/5/7\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @GetMapping(\"/testUser\")\r\n    public User getUser(){\r\n        User user = new User();\r\n        user.setId(1);\r\n        user.setName(\"dalaoyang\");\r\n        user.setPassword(\"123\");\r\n        System.out.println(user.toString());\r\n        return user;\r\n    }\r\n}\r\n\r\n```\r\n访问[http://localhost:8080/testUser](http://localhost:8080/testUser)如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/54/3)\r\n\r\nlombok注解简介：\r\n\r\n```\r\n@Data 标签，生成getter/setter toString()等方法 \r\n@NonNull : 让你不在担忧并且爱上NullPointerException \r\n@CleanUp : 自动资源管理：不用再在finally中添加资源的close方法 \r\n@Setter/@Getter : 自动生成set和get方法 \r\n@ToString : 自动生成toString方法 \r\n@EqualsAndHashcode : 从对象的字段中生成hashCode和equals的实现 \r\n@NoArgsConstructor/@RequiredArgsConstructor/@AllArgsConstructor \r\n自动生成构造方法 \r\n@Data : 自动生成set/get方法，toString方法，equals方法，hashCode方法，不带参数的构造方法 \r\n@Value : 用于注解final类 \r\n@Builder : 产生复杂的构建器api类 \r\n@SneakyThrows : 异常处理（谨慎使用） \r\n@Synchronized : 同步方法安全的转化 \r\n@Getter(lazy=true) : \r\n@Log : 支持各种logger对象，使用时用对应的注解，如：@Log4j\r\n```\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.www.dalaoyang.cn/)', 'dalaoyang', '2018-05-07', 787, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (55, 'linux安装nginx', '安装环境\r\n```\r\nyum install gcc\r\n```\r\n\r\n```\r\nyum install pcre-devel\r\n```\r\n\r\n```\r\nyum install zlib zlib-devel\r\n```\r\n\r\n```\r\nyum install openssl openssl-devel\r\n```\r\n\r\n在usr/local目录下新建nginx文件夹\r\n```\r\ncd /usr/local\r\n```\r\n\r\n```\r\nmkdir nginx\r\n```\r\n\r\n进入nginx文件夹\r\n```\r\ncd nginx\r\n```\r\n\r\n下载nginx的tar包\r\n```\r\nwget http://nginx.org/download/nginx-1.13.7.tar.gz\r\n```\r\n\r\n解压tar\r\n```\r\ntar -xvf nginx-1.13.7.tar.g\r\n```\r\n\r\n安装nginx\r\n```\r\n./configure\r\n```\r\n\r\n执行make\r\n```\r\nmake\r\n```\r\n\r\n执行make install\r\n```\r\nmake install\r\n```\r\n\r\n启动nginx\r\n\r\n进入sbin\r\n```\r\ncd sbin\r\n```\r\n\r\n启动\r\n```\r\nsudo ./nginx\r\n```\r\n\r\n查询nginx.conf是否正确\r\n```\r\n/usr/local/nginx/sbin/nginx -t\r\n```', 'dalaoyang', '2018-05-09', 753, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (56, 'linux安装git', '之前用yum安装过git，如下：\n```\nyum -y install git\n```\n\n但是后来发现版本太低了，git1.7.1\n\n选择下载一个安装包的方式安装\n\n安装插件\n```\n　　yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker\n```\n\n删除已有的git\n```\nyum remove git\n```\n前往安装目录\n```\ncd /usr/local/git/\n```\n\n下载git\n```\nwget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz\n```\n\n解压git\n```\ntar -zxvf git-2.8.3.tar.gz\n```\n\n配置git安装路径\n```\n./configure prefix=/usr/local/git/\n```\n\n编译安装\n```\nmake && make install\n```\n打开配置文件\n```\nvi /etc/profile\n```\n\n加入如下配置\n```\nexport PATH=$PATH:/usr/local/git/bin\n```\n使配置生效\n```\nsource /etc/profile\n```\n\n查看git版本\n```\ngit --version\n```\n\n如图\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/56/1)\n\n\n', 'dalaoyang', '2018-05-15', 442, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (57, 'Intellij IDEA更改项目优先编译顺序', '今天启动公司项目突然发现了一个问题，类里面明明有这个方法，但是无论怎样都不编译。（由于公司项目是二次开发，代码都是第三方写的，代码请勿仔细看，怕伤了你的眼睛。）\r\n\r\n如图，找不到setJGMC方法。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/1)\r\n\r\n\r\n但是去对应的类中可以找到这个方法，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/2)\r\n\r\n然后看一下编译后的，又没有这个方法，。。。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/3)\r\n\r\n这时 我想到，是不是某个jar包中含有这个方法，类内调用的是jar包内的方法，果然，被我找到了。项目一直编译的这个jar的方法，项目内重写的这个类没有编译。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/4)\r\n\r\n查看了一下项目的配置，如下，果然优先编译的是jar包，然后是项目内。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/5)\r\n\r\n点击下面的三角，将项目挪到lib上面在编译就可以了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/57/6)\r\n\r\n\r\n然后就不会报之前的错误了。', 'dalaoyang', '2018-05-23', 426, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (58, 'docker部署springboot项目', '>本文介绍一下docker如何部署springboot项目。\n \n## 前提条件：\n1.可以运行jar包的环境\n2.机器上已经安装了docker\n3.准备部署的springboot的jar包\n4.Dockerfile文件\n\n## 准备Dockerfile\n\n前三条都很容准备，创建一个Dockerfile：\n```\nFROM java:8 \nVOLUME /tmp \nADD dalaoyang_mgr.jar /dalaoyang.jar\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/dalaoyang.jar\"]\n```\n\n### 解释一下需要注意的地方\n1.java:8 是使用jdk版本\n2.dalaoyang_mgr.jar是使用jar包名称\n3.ADD dalaoyang_mgr.jar /dalaoyang.jar 拷贝jar到容器\n4.ENTRYPOINT 执行jar文件\n\n## 生成docker镜像\n\n将Dockerfile和jar放在一个文件夹，使用下面命令生成镜像，注意最后的.\n```\ndocker build -t dalaoyang .\n```\n\n注意：dalaoyang是生成的镜像名称。\n\n更多docker build命令可以查看[菜鸟教程](http://www.runoob.com/docker/docker-build-command.html)\n\n查看一下docker镜像\n```\ndocker images\n```\n\n如图，可以看到已经有了一个名称为dalaoyang的镜像\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/58/1)\n\n\n## 运行Docker容器\n\n### 代码如下\n```\ndocker run -d -p 9000:9000 dalaoyang\n```\n\n### 解释一下需要注意的地方\n1.-d 后台运行\n2.-p 9000:9000 将docker容器的9000端口映射到服务器上的9000端口\n\n\n到这里就配置完成了，在浏览器使用：服务器ip:9000就能访问docker容器内部署的springboot项目了。\n\n\n# 个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-24', 839, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (59, 'SpringBoot使用事务', '>事务是很多项目中需要注意的东西，有些场景如果没有加事务控制就会导致一些脏数据进入数据库，本文简单介绍SpringBoot怎样使用事务。\n\n本文使用的是之前整合JPA的文章，具体可以参考 [传送门](https://www.jianshu.com/p/1f67d91543ce)。\n\n无论是配置还是pom文件等等，没有任何改变，改变的是测试的controller上面的两个方法，其中一个方法使用了@Transactional注解来进行事务控制。\ncontroller代码如下：\n```\n@RestController\npublic class HouseController {\n\n    @Autowired\n    private HouseRepository houseRepository;\n\n    @GetMapping(\"/test1\")\n    public String test1(){\n        houseRepository.save(new House(\"house1\", \"100平方米\"));\n        houseRepository.save(new House(\"house2\", \"100平方米\"));\n        houseRepository.save(new House(\"house3\", \"100平方米\"));\n        houseRepository.save(new House(\"house444444444\", \"100平方米\"));\n        houseRepository.save(new House(\"house5\", \"100平方米\"));\n        return \"success\";\n    }\n\n    @GetMapping(\"/test2\")\n    @Transactional\n    public String test2(){\n        houseRepository.save(new House(\"house6\", \"100平方米\"));\n        houseRepository.save(new House(\"house7\", \"100平方米\"));\n        houseRepository.save(new House(\"house8\", \"100平方米\"));\n        houseRepository.save(new House(\"house999999999\", \"100平方米\"));\n        houseRepository.save(new House(\"house10\", \"100平方米\"));\n        return \"success\";\n    }\n}\n```\n\n\ntest1方法没有加入事务，test2方法加入了事务注解。   \n启动项目，浏览器访问[http://localhost:8888/test1](http://localhost:8888/test1)，浏览器如图所示，报错了，因为第四条数据超长了。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/59/1)\n\n查看数据库，可以看到如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/59/2)\n\n从上图可以看出，前三条插入成功了，但是后两条都失败了，这并不是我们想要的结果。通常来讲，我们需要的只是成功的话都插入，失败的话都回滚，这时我们调用[http://localhost:8888/test2](http://localhost:8888/test2)，在次查看数据库，还是之前的三条数据，SpringBoot使用事务建当整合到这里就完成了。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-28', 823, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (60, 'SpringBoot使用缓存', '## 前言\n我们都知道，一个程序的瓶颈通常都在数据库，很多场景需要获取相同的数据。比如网站页面数据等，需要一次次的请求数据库，导致大部分时间都浪费在数据库查询和方法调用上，这时就可以利用到缓存来缓解这个问题。\n\n## 简介\n本文来介绍SpringBoot来简单整合缓存，使用SpringBoot+JPA+mysql来进行数据库操作。整合JPA的文章，具体可以参考 [传送门](https://www.jianshu.com/p/1f67d91543ce)。\n\n## 新建项目\n创建一个项目，pom文件中加入spring-boot-starter-cache依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_cache</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_cache</name>\n    <description>springboot_cache</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-cache</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下，和整合JPA一样，没有做任何修改：\n```\n##端口号\nserver.port=8888\n\n\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n##validate  加载hibernate时，验证创建数据库表结构\n##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。\n##create-drop        加载hibernate时创建，退出是删除表结构\n##update                 加载hibernate自动更新数据库结构\n##validate 启动时验证表的结构，不会创建表\n##none  启动时不做任何操作\nspring.jpa.hibernate.ddl-auto=update\n\n##控制台打印sql\nspring.jpa.show-sql=true\n```\n\n\n实体类代码如下：\n```\npackage com.dalaoyang.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\n@Entity\npublic class House {\n    @Id\n    @GeneratedValue(strategy=GenerationType.AUTO)\n    private int id;\n    @Column(length = 10)\n    private String houseName;\n    private String houseSize;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getHouseName() {\n        return houseName;\n    }\n\n    public void setHouseName(String houseName) {\n        this.houseName = houseName;\n    }\n\n    public String getHouseSize() {\n        return houseSize;\n    }\n\n    public void setHouseSize(String houseSize) {\n        this.houseSize = houseSize;\n    }\n\n    public House(String houseName, String houseSize) {\n        this.houseName = houseName;\n        this.houseSize = houseSize;\n    }\n\n    public House(int id,String houseName, String houseSize) {\n        this.id = id;\n        this.houseName = houseName;\n        this.houseSize = houseSize;\n    }\n\n    public House() {\n    }\n}\n```\n\nRepository如下：\n```\npackage com.dalaoyang.repository;\n\nimport com.dalaoyang.entity.House;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.repository\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\npublic interface HouseRepository extends JpaRepository<House,Integer> {\n}\n```\n\n启动类上加入@EnableCaching开启缓存，完整代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\n\n@SpringBootApplication\n//开启缓存\n@EnableCaching\npublic class SpringbootCacheApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootCacheApplication.class, args);\n	}\n}\n```\n\n\n还是和以往一样，使用Controller做测试，先展示一下代码：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.House;\nimport com.dalaoyang.repository.HouseRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/5/28\n */\n@RestController\npublic class HouseController {\n\n    @Autowired\n    private HouseRepository houseRepository;\n\n    //http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米\n    @GetMapping(\"/saveHouse\")\n    @CachePut(value = \"house\", key = \"#id\")\n    public House saveHouse(Integer id,String houseName,String houseSize){\n        House house = new House(id,houseName, houseSize);\n        houseRepository.save(house);\n        return house;\n    }\n\n    //http://localhost:8888/queryHouse?id=1\n    @GetMapping(\"/queryHouse\")\n    @Cacheable(value = \"house\", key = \"#id\")\n    public House queryHouse(Integer id){\n        House house = houseRepository.findOne(id);\n        return house;\n    }\n\n    //http://localhost:8888/deleteHouse?id=1\n    @GetMapping(\"/deleteHouse\")\n    @CacheEvict(value = \"house\", key = \"#id\")\n    public String deleteHouse(Integer id){\n        houseRepository.delete(id);\n        return \"success\";\n    }\n\n    //http://localhost:8888/deleteCache\n    @GetMapping(\"/deleteCache\")\n    @CacheEvict(value = \"house\", allEntries = true)\n    public void deleteCache() {\n    }\n}\n```\n\n## 解释测试方法\n\n### 1.saveHouse方法\n>方法中使用到了@CachePut注解，这个注解直接将返回值放入缓存中，通常用于保存和修改方法中\n\n### 2.queryHouse方法\n>方法中使用到了@Cacheable注解，这个注解在执行前先查看缓存中是不是已经存在了，如果存在，直接返回。如果不存在，将方法的返回值放入缓存。\n\n### 3.deleteHouse方法\n>方法中使用到了@CacheEvict注解，这个注解在执行方法执行成功后会从缓存中移除\n\n### 4.deleteCache方法\n>这个方法的也是使用的@CacheEvict注解，不同的是使用了allEntries熟悉，默认为false，true的时候移除所有缓存。\n\n## 测试\n\n### 1.首先访问[http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米](http://localhost:8888/saveHouse?id=1&houseName=别墅&houseSize=1220平方米)，然后查看数据库和控制台，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/1)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/2)\n\n### 2.访问[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看页面数据和控制台。因为设置了打印执行jpa查询的话打印sql，看下图控制台没有打印，证明在保存的时候@CachePut注解已经将其放入了缓存中。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/3)\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/4)\n\n### 3.调用清空缓存方法[http://localhost:8888/deleteCache](http://localhost:8888/deleteCache)然后在次访问查询方法[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看控制台如下，可以到清空缓存后，在访问就需要查询数据库。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/5)\n\n### 4.调用删除方法[http://localhost:8888/deleteHouse?id=1](http://localhost:8888/deleteHouse?id=1)，然后在方法查询方法[http://localhost:8888/queryHouse?id=1](http://localhost:8888/queryHouse?id=1)，查看控制台如下，可以到删除缓存后，在访问也查询了数据库。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/60/6)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-05-29', 1057, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (61, 'Intellij IDEA实现SpringBoot项目多端口启动', '## 前言\n\n>有时候使用springboot项目时遇到这样一种情况，用一个项目需要复制很多遍进行测试，除了端口号不同以外，没有任何不同。这时我们强大的Intellij IDEA就能替我们实现。\n\n\n## 实现方法\n\n### 第一种方法\n\n1.点击图中Edit Configurations，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/1)\n\n2.取消选中的Single instance only\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/2)\n\n3.启动项目，demo(9000)，如图。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/3)\n\n4.修改配置文件中的端口号为9001，启动项目，demo(9001)，如图。\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/4)\n\n从下方可以看到demo项目分别以9000和9001启动了。\n\n\n### 第二种方法\n\n1.点击图中Edit Configurations，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/5)\n\n2.点击左上角+号，选择Spring Boot\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/6)\n\n3.点击...位置，如图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/7)\n\n4.选择需要启动的项目，点击ok\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/8)\n\n5.将上方name修改为demo2\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/9)\n\n6.启动demo(9000)，如图\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/10)\n\n7.修改端口为9001，启动demo2，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/61/11)\n\n到这里第二种方法也结束了\n\n## 总结\n\n>两种方法都可以实现想要达到的效果，但是个人觉得第一种相对简单一些。具体怎么使用看个人喜好。\n\n## 个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n', 'dalaoyang', '2018-06-04', 601, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (63, 'SpringBoot整合dubbo', '**Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和Spring框架无缝集成。**\n\n\n以上介绍来源于[百度百科](https://baike.baidu.com/item/Dubbo/18907815?fr=aladdin)，具体dubbo相关可以自行查找资料，本文只是介绍SpringBoot简单整合dubbo。   \n\n## 1.安装zookeeper\n\n### 1.1 去官网下载，本文以3.4.12 版本为例子[http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.12/](http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.12/)\n\n### 1.2 下载之后解压ZooKeeper\n\n### 1.3 进入解压文件夹conf目录\n\n### 1.4 将zoo_sample.cfg修改名称为zoo.cfg\n\n### 1.5 修改内容为如下，注意，本人是将ZooKeeper解压到了e盘，具体\ndataDir和dataDirLog属性可以根据自己情况修改。\n\n```\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=E:\\\\zookeeper\\\\data  \ndataDirLog=E:\\\\zookeeper\\\\log  \n# the port at which the clients will connect\nclientPort=2181\n# the maximum number of client connections.\n# increase this if you need to handle more clients\n#maxClientCnxns=60\n#\n# Be sure to read the maintenance section of the \n# administrator guide before turning on autopurge.\n#\n# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance\n#\n# The number of snapshots to retain in dataDir\n#autopurge.snapRetainCount=3\n# Purge task interval in hours\n# Set to \"0\" to disable auto purge feature\n#autopurge.purgeInterval=1\n\n```\n\n### 1.6 启动zookeeper，进入bin目录，双击zkServer.cmd\n\n## 2 新建项目springboot_dubbo_server，项目中加入dubbo依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_dubbo_server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_dubbo_server</name>\n    <description>springboot_dubbo_server</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.dubbo.springboot</groupId>\n            <artifactId>spring-boot-starter-dubbo</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8880\n\n## Dubbo 服务提供者配置\nspring.dubbo.application.name=dubbo_server\nspring.dubbo.registry.address=zookeeper://39.108.123.128:2181\nspring.dubbo.protocol.name=dubbo\nspring.dubbo.protocol.port=20880\nspring.dubbo.scan=com.dalaoyang.dubbo\n```\n\n定义一个Service Interface：HelloService.java\n```\npackage com.dalaoyang.dubbo;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\npublic interface HelloService {\n    String SayHello(String name);\n}\n```\n\n接口的实现类：HelloServiceImpl.java\n```\npackage com.dalaoyang.dubbo.imp;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.dalaoyang.dubbo.HelloService;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo.imp\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n\n    @Override\n    public String SayHello(String name) {\n        return \"Hello , \"+name;\n    }\n}\n```\n\n到这里dubbo服务提供者已经创建完成。\n\n### 3.新建项目springboot_dubbo_client，pom与提供者一致，代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_dubbo_client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_dubbo_client</name>\n    <description>springboot_dubbo_client</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>io.dubbo.springboot</groupId>\n            <artifactId>spring-boot-starter-dubbo</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n## 端口号\nserver.port=8881\n\n## Dubbo 服务消费者配置\nspring.dubbo.application.name=dubbo_client\nspring.dubbo.registry.address=zookeeper://39.108.123.128:2181\nspring.dubbo.scan=com.dalaoyang.controller\n\n```\n\nHelloService接口如下：\n```\npackage com.dalaoyang.dubbo;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dubbo\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\npublic interface HelloService {\n    String SayHello(String name);\n}\n```\n\n创建一个controller进行测试，注意版本号要与提供者的版本号一致，dubbo扫描包要扫描到我们要使用的类上，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.dalaoyang.dubbo.HelloService;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/6/14\n */\n@RestController\npublic class HelloController {\n\n    @Reference(version = \"1.0.0\")\n    HelloService helloService;\n\n    @GetMapping(\"sayHello\")\n    public String sayHello(String name){\n        return helloService.SayHello(name);\n    }\n}\n```\n\n到这里dubbo服务调用者也创建完成。\n\n分别启动服务提供者项目和服务调用者项目，在浏览器访问[http://localhost:8881/sayHello?name=dalaoyang](http://localhost:8881/sayHello?name=dalaoyang)，如图，证明调用成功。\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-94787e8498ef08a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n更多springboot-dubbo配置可以参考[https://github.com/JeffLi1993/springboot-learning-example/blob/master/springboot-dubbo-server/DubboProperties.md](https://github.com/JeffLi1993/springboot-learning-example/blob/master/springboot-dubbo-server/DubboProperties.md)\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-06-14', 876, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (64, 'EurekaServer高可用', '## 前言\n\n>之前一篇文章文章[《服务注册与发现---eureka》](https://www.jianshu.com/p/d69744d9b935)介绍了单点EurekaServer。但是实际环境中，这种单点的的模式可能会有很多隐形的问题。比如EurekaServer发生宕机，或者某些意外情况发生，很可能影响其他服务之间的调用，严重影响到整个系统的可用性，所以，一般会部署一个高可用的EurekaServer集群。\n\n本文简单介绍EurekaServer高可用简单搭建。\n\n\n## 配置本地环境\n\n由于本地环境是单台电脑来配置高可用，所以需要修改一下电脑的host文件，本文简单说一下mac修改host文件，其他系统电脑可以自行百度一下，都很简单。\n\n### 1.进入/private/etc文件夹内\n### 2.打开host文件\n### 3.文件内加入以下两行\n\n```\n127.0.0.1	server1\n127.0.0.1	server2\n```\n\n本机完整host文件如下：\n```\n##\n# Host Database\n#\n# localhost is used to configure the loopback interface\n# when the system is booting.  Do not change this entry.\n##\n127.0.0.1	localhost\n255.255.255.255	broadcasthost\n::1             localhost\n127.0.0.1	server1\n127.0.0.1	server2\n\n```\n\n## 新建项目\n\n配置好了host文件之后，新建一个项目，与之前新建eurekaserver完全一致，不过配置文件进行了一下简单的修改（只有配置文件进行了修改），先看一下单机模式下的配置：\n```\nserver.port=8761\n\neureka.instance.hostname=localhost\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\n\n##禁止自己向自己注册\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\n```\n\n\n从配置上可以看到，上面最后两行配置是让注册中心不注册自己，而其实eurekaserver就是将自己也当成服务，向其他注册中心注册自己。\n\n新建项目springcloud_eureka_server1（8761），除了配置其余没有任何不同，这里就不一一展示了，配置文件代码如下：\n```\nserver.port=8761\n\neureka.instance.hostname=server1\neureka.client.service-url.defaultZone=http://server2:8762/eureka/\n\nspring.application.name=server1\n```\n\n新建项目springcloud_eureka_server2（8762），配置文件代码如下：\n```\nserver.port=8762\n\neureka.instance.hostname=server2\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\n\nspring.application.name=server2\n```\n\n以上代码不难理解，springcloud_eureka_server1（8761）将自己注册到server2的eureka上，springcloud_eureka_server2（8762）注册到server1的eureka上。\n\n这时查看一下eureka管理页面，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/64/1)\n\n观察页面可以看到server1含有了server2的节点，server2有了server1的节点。\n\n\n## 应用注册到高可用EurekaServer上\n\n修改之前项目springcloud_eureka_client（8761）配置文件如下：\n```\n##端口号\nserver.port=8763\n\nspring.application.name=eureka_client\n\neureka.client.service-url.defaultZone=http://server1:8761/eureka/,http://server2:8762/eureka/\n```\n\n查看一下eureka管理页面，如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/64/2)\n\n此时就算断开server1，因为springcloud_eureka_client（8763）也像server2注册了，因此其他server2上的服务依然可以访问springcloud_eureka_client（8763），从而实现了EurekaServer的高可用。\n\n## 其他测试\n\n我们在做一下修改，springcloud_eureka_client（8763）项目配置文件中只配置一个eurekaserver，代码如下：\n```\n##端口号\nserver.port=8763\n\nspring.application.name=eureka_client\n\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\n```\n\neureka管理页面也是同样的展示了和配置两个服务一样的效果，因为多个eureka之间的数据会同步，但是建议在客户端像第一种方式那样配置。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springcloud_learn.git)\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn/)\n\n', 'dalaoyang', '2018-06-15', 617, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (65, 'SpringBoot使用Mybatis-PageHelper', '## 前言\n\n>之前一篇文章介绍了[《SpringBoot+Mybatis+MySql学习》](https://www.jianshu.com/p/8b545a537fd0)的整合，这一片扩展一下Mybatis的分页插件-Mybatis-PageHelper。\n\n## 新建项目\n\n首先，pom文件中加入pagehelper依赖，完整pom代码如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_mybatis_pagehelper</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_mybatis_pagehelper</name>\n    <description>springboot_mybatis_pagehelper</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n        <!--pagehelper -->\n        <dependency>\n            <groupId>com.github.pagehelper</groupId>\n            <artifactId>pagehelper-spring-boot-starter</artifactId>\n            <version>1.2.5</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件增加PageHelper的配置，由于demo很简单，只用到了分页，所以没有增加其他配置，只设置了分页方言，完整代码如下：\n```\n##端口号\nserver.port=8888\n\n##日志级别\nlogging.level.com.dalaoyang.dao.UserMapper=debug\n\n##数据库url\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=root\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n\n\n#pagehelper分页插件配置\npagehelper.helperDialect=mysql\n\n```\n\n实体类User代码如下：\n```\npackage com.dalaoyang.entity;\n\nimport org.apache.ibatis.type.Alias;\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@Alias(\"user\")\npublic class User {\n\n    private int id;\n    private String user_name;\n    private String user_password;\n\n    public User(String user_name, String user_password) {\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public User(int id, String user_name, String user_password) {\n        this.id = id;\n        this.user_name = user_name;\n        this.user_password = user_password;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getUser_password() {\n        return user_password;\n    }\n\n    public void setUser_password(String user_password) {\n        this.user_password = user_password;\n    }\n}\n\n```\n\n启动类代码如下：\n```\npackage com.dalaoyang;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringbootMybatisPagehelperApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringbootMybatisPagehelperApplication.class, args);\n	}\n}\n```\n\n新建一个UserMapper，之前介绍的整合mybatis是使用的mapper方式，本文选择使用注解方式，代码如下：\n```\npackage com.dalaoyang.dao;\n\nimport com.dalaoyang.entity.User;\nimport com.github.pagehelper.Page;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Select;\n\n\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.dao\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@Mapper\npublic interface UserMapper {\n\n    @Select(\"SELECT * FROM USER\")\n    Page<User> getUserList();\n}\n\n```\n\n还是一如既往的使用controller作为测试，代码如下：\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.dao.UserMapper;\nimport com.dalaoyang.entity.User;\nimport com.github.pagehelper.Page;\nimport com.github.pagehelper.PageHelper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n/**\n * @author dalaoyang\n * @Description\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email 397600342@qq.com\n * @date 2018/6/22\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    UserMapper userMapper;\n\n    //http://localhost:8888/getUserList?pageNum=1&pageSize=2\n    @RequestMapping(\"/getUserList\")\n    public Page<User> getUserList(Integer pageNum, Integer pageSize){\n        PageHelper.startPage(pageNum, pageSize);\n        Page<User>  userList= userMapper.getUserList();\n        return userList;\n    }\n}\n```\n\n到这里项目就完全创建完成了。\n\n## 测试\n\n浏览器访问[http://localhost:8888/getUserList?pageNum=1&pageSize=2](http://localhost:8888/getUserList?pageNum=1&pageSize=2)，结果如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/65/1)\n\n然后查看控制台如下：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/65/2)\n\n可以看到sql已经进行分页了。\n\n然后回头看controller的方法，返回的Page对象中包含了很多关于分页的参数等数据，下面是Page的代码，具体使用可以查看一下：\n```\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n\npackage com.github.pagehelper;\n\nimport java.io.Closeable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Page<E> extends ArrayList<E> implements Closeable {\n    private static final long serialVersionUID = 1L;\n    private int pageNum;\n    private int pageSize;\n    private int startRow;\n    private int endRow;\n    private long total;\n    private int pages;\n    private boolean count;\n    private Boolean reasonable;\n    private Boolean pageSizeZero;\n    private String countColumn;\n    private String orderBy;\n    private boolean orderByOnly;\n\n    public Page() {\n        this.count = true;\n    }\n\n    public Page(int pageNum, int pageSize) {\n        this(pageNum, pageSize, true, (Boolean)null);\n    }\n\n    public Page(int pageNum, int pageSize, boolean count) {\n        this(pageNum, pageSize, count, (Boolean)null);\n    }\n\n    private Page(int pageNum, int pageSize, boolean count, Boolean reasonable) {\n        super(0);\n        this.count = true;\n        if (pageNum == 1 && pageSize == 2147483647) {\n            this.pageSizeZero = true;\n            pageSize = 0;\n        }\n\n        this.pageNum = pageNum;\n        this.pageSize = pageSize;\n        this.count = count;\n        this.calculateStartAndEndRow();\n        this.setReasonable(reasonable);\n    }\n\n    public Page(int[] rowBounds, boolean count) {\n        super(0);\n        this.count = true;\n        if (rowBounds[0] == 0 && rowBounds[1] == 2147483647) {\n            this.pageSizeZero = true;\n            this.pageSize = 0;\n        } else {\n            this.pageSize = rowBounds[1];\n            this.pageNum = rowBounds[1] != 0 ? (int)Math.ceil(((double)rowBounds[0] + (double)rowBounds[1]) / (double)rowBounds[1]) : 0;\n        }\n\n        this.startRow = rowBounds[0];\n        this.count = count;\n        this.endRow = this.startRow + rowBounds[1];\n    }\n\n    public List<E> getResult() {\n        return this;\n    }\n\n    public int getPages() {\n        return this.pages;\n    }\n\n    public Page<E> setPages(int pages) {\n        this.pages = pages;\n        return this;\n    }\n\n    public int getEndRow() {\n        return this.endRow;\n    }\n\n    public Page<E> setEndRow(int endRow) {\n        this.endRow = endRow;\n        return this;\n    }\n\n    public int getPageNum() {\n        return this.pageNum;\n    }\n\n    public Page<E> setPageNum(int pageNum) {\n        this.pageNum = this.reasonable != null && this.reasonable && pageNum <= 0 ? 1 : pageNum;\n        return this;\n    }\n\n    public int getPageSize() {\n        return this.pageSize;\n    }\n\n    public Page<E> setPageSize(int pageSize) {\n        this.pageSize = pageSize;\n        return this;\n    }\n\n    public int getStartRow() {\n        return this.startRow;\n    }\n\n    public Page<E> setStartRow(int startRow) {\n        this.startRow = startRow;\n        return this;\n    }\n\n    public long getTotal() {\n        return this.total;\n    }\n\n    public void setTotal(long total) {\n        this.total = total;\n        if (total == -1L) {\n            this.pages = 1;\n        } else {\n            if (this.pageSize > 0) {\n                this.pages = (int)(total / (long)this.pageSize + (long)(total % (long)this.pageSize == 0L ? 0 : 1));\n            } else {\n                this.pages = 0;\n            }\n\n            if (this.reasonable != null && this.reasonable && this.pageNum > this.pages) {\n                this.pageNum = this.pages;\n                this.calculateStartAndEndRow();\n            }\n\n        }\n    }\n\n    public Boolean getReasonable() {\n        return this.reasonable;\n    }\n\n    public Page<E> setReasonable(Boolean reasonable) {\n        if (reasonable == null) {\n            return this;\n        } else {\n            this.reasonable = reasonable;\n            if (this.reasonable && this.pageNum <= 0) {\n                this.pageNum = 1;\n                this.calculateStartAndEndRow();\n            }\n\n            return this;\n        }\n    }\n\n    public Boolean getPageSizeZero() {\n        return this.pageSizeZero;\n    }\n\n    public Page<E> setPageSizeZero(Boolean pageSizeZero) {\n        if (pageSizeZero != null) {\n            this.pageSizeZero = pageSizeZero;\n        }\n\n        return this;\n    }\n\n    public String getOrderBy() {\n        return this.orderBy;\n    }\n\n    public <E> Page<E> setOrderBy(String orderBy) {\n        this.orderBy = orderBy;\n        return this;\n    }\n\n    public boolean isOrderByOnly() {\n        return this.orderByOnly;\n    }\n\n    public void setOrderByOnly(boolean orderByOnly) {\n        this.orderByOnly = orderByOnly;\n    }\n\n    private void calculateStartAndEndRow() {\n        this.startRow = this.pageNum > 0 ? (this.pageNum - 1) * this.pageSize : 0;\n        this.endRow = this.startRow + this.pageSize * (this.pageNum > 0 ? 1 : 0);\n    }\n\n    public boolean isCount() {\n        return this.count;\n    }\n\n    public Page<E> setCount(boolean count) {\n        this.count = count;\n        return this;\n    }\n\n    public Page<E> pageNum(int pageNum) {\n        this.pageNum = this.reasonable != null && this.reasonable && pageNum <= 0 ? 1 : pageNum;\n        return this;\n    }\n\n    public Page<E> pageSize(int pageSize) {\n        this.pageSize = pageSize;\n        this.calculateStartAndEndRow();\n        return this;\n    }\n\n    public Page<E> count(Boolean count) {\n        this.count = count;\n        return this;\n    }\n\n    public Page<E> reasonable(Boolean reasonable) {\n        this.setReasonable(reasonable);\n        return this;\n    }\n\n    public Page<E> pageSizeZero(Boolean pageSizeZero) {\n        this.setPageSizeZero(pageSizeZero);\n        return this;\n    }\n\n    public Page<E> countColumn(String columnName) {\n        this.countColumn = columnName;\n        return this;\n    }\n\n    public PageInfo<E> toPageInfo() {\n        PageInfo<E> pageInfo = new PageInfo(this);\n        return pageInfo;\n    }\n\n    public PageSerializable<E> toPageSerializable() {\n        PageSerializable<E> serializable = new PageSerializable(this);\n        return serializable;\n    }\n\n    public <E> Page<E> doSelectPage(ISelect select) {\n        select.doSelect();\n        return this;\n    }\n\n    public <E> PageInfo<E> doSelectPageInfo(ISelect select) {\n        select.doSelect();\n        return this.toPageInfo();\n    }\n\n    public <E> PageSerializable<E> doSelectPageSerializable(ISelect select) {\n        select.doSelect();\n        return this.toPageSerializable();\n    }\n\n    public long doCount(ISelect select) {\n        this.pageSizeZero = true;\n        this.pageSize = 0;\n        select.doSelect();\n        return this.total;\n    }\n\n    public String getCountColumn() {\n        return this.countColumn;\n    }\n\n    public void setCountColumn(String countColumn) {\n        this.countColumn = countColumn;\n    }\n\n    public String toString() {\n        return \"Page{count=\" + this.count + \", pageNum=\" + this.pageNum + \", pageSize=\" + this.pageSize + \", startRow=\" + this.startRow + \", endRow=\" + this.endRow + \", total=\" + this.total + \", pages=\" + this.pages + \", reasonable=\" + this.reasonable + \", pageSizeZero=\" + this.pageSizeZero + \'}\' + super.toString();\n    }\n\n    public void close() {\n        PageHelper.clearPage();\n    }\n}\n```\n\n## 其他\n\n关于更多Mybatis-PageHelper配置及介绍可以查看下面网站：\n[https://gitee.com/free/Mybatis_PageHelper](https://gitee.com/free/Mybatis_PageHelper)\n[https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md](https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md)\n\n\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-06-22', 914, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (66, 'SpringBoot整合Mybatis-Plus', '>这篇文章介绍一个SpringBoot整合Mybatis-Plus，提供一个小的Demo供大家参考。\r\n\r\n已经很久没有写文章了，最近家里有点事刚刚处理完，顺便也趁机休息了一段时间。刚回到公司看了一下码云，发现本期码云封面人员就是Mybatis-Plus团队苞米豆的负责人，如下图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/66/1)\r\n\r\n忽然想到，正好之前别人跟我说过怎么不出一个SpringBoot整合Mybatis-Plus的，已经很久的事了，正好想起来，这次就弄一个整合的Demo。\r\n\r\n言归正传，新建一个项目。pom文件中加入Mybatis依赖，完整pom如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot_mybatisplus</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<packaging>jar</packaging>\r\n\r\n	<name>springboot_mybatisplus</name>\r\n	<description>springboot_mybatisplus</description>\r\n\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>1.5.9.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>com.baomidou</groupId>\r\n			<artifactId>mybatisplus-spring-boot-starter</artifactId>\r\n			<version>1.0.5</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.baomidou</groupId>\r\n			<artifactId>mybatis-plus</artifactId>\r\n			<version>2.3</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mybatis.spring.boot</groupId>\r\n			<artifactId>mybatis-spring-boot-starter</artifactId>\r\n			<version>1.3.1</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>mysql</groupId>\r\n			<artifactId>mysql-connector-java</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件配置数据库配置和对应Mybatis-Plus实体信息，配置如下：\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n##数据库url\r\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=root\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n##日志级别\r\nlogging.level.com.dalaoyang.dao.UserMapper=debug\r\n##mybatis-plus mapper xml 文件地址\r\nmybatis-plus.mapper-locations=classpath*:mapper/*Mapper.xml\r\n##mybatis-plus type-aliases 文件地址\r\nmybatis-plus.type-aliases-package=com.dalaoyang.entity\r\n```\r\n\r\n实体类User代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.entity\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\npublic class User {\r\n    private int id;\r\n    private String user_name;\r\n    private String user_password;\r\n\r\n    public User() {\r\n    }\r\n\r\n    public User(String user_name, String user_password) {\r\n        this.user_name = user_name;\r\n        this.user_password = user_password;\r\n    }\r\n\r\n    public User(int id, String user_name, String user_password) {\r\n        this.id = id;\r\n        this.user_name = user_name;\r\n        this.user_password = user_password;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUser_name() {\r\n        return user_name;\r\n    }\r\n\r\n    public void setUser_name(String user_name) {\r\n        this.user_name = user_name;\r\n    }\r\n\r\n    public String getUser_password() {\r\n        return user_password;\r\n    }\r\n\r\n    public void setUser_password(String user_password) {\r\n        this.user_password = user_password;\r\n    }\r\n}\r\n```\r\n\r\n\r\n下面要说的都是需要注意的地方，新增一个MybatisPlus配置类，其中没有做过多的设置，只是设置了一下方言，代码如下：\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.baomidou.mybatisplus.plugins.PaginationInterceptor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.config\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@Configuration\r\npublic class MybatisPlusConfig {\r\n\r\n    @Bean\r\n    public PaginationInterceptor paginationInterceptor(){\r\n        PaginationInterceptor page = new PaginationInterceptor();\r\n        //设置方言类型\r\n        page.setDialectType(\"mysql\");\r\n        return page;\r\n    }\r\n}\r\n```\r\n\r\nUserMapper继承了MybatisPlus的BaseMapper，这里面列举一个普通的查询方法getUserList，完整代码如下：\r\n```\r\npackage com.dalaoyang.dao;\r\n\r\nimport com.baomidou.mybatisplus.mapper.BaseMapper;\r\nimport com.dalaoyang.entity.User;\r\nimport org.apache.ibatis.annotations.Mapper;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.dao\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@Mapper\r\npublic interface UserMapper extends BaseMapper<User> {\r\n    List<User> getUserList();\r\n\r\n}\r\n```\r\n\r\n新建一个UserMapper.xml，里面写getUserList对应sql，代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\">\r\n    <resultMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\r\n    <parameterMap id=\"user\" type=\"com.dalaoyang.entity.User\"/>\r\n\r\n    <select id=\"getUserList\" resultMap=\"user\">\r\n        SELECT  * FROM USER\r\n    </select>\r\n</mapper>\r\n```\r\n\r\n最后和往常一样，新建一个Controller进行测试，完整代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.baomidou.mybatisplus.mapper.EntityWrapper;\r\nimport com.baomidou.mybatisplus.plugins.Page;\r\nimport com.dalaoyang.dao.UserMapper;\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @Description\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/7/20\r\n */\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserMapper userDao;\r\n\r\n    //http://localhost:8888/getUserList\r\n    @GetMapping(\"getUserList\")\r\n    public List<User> getUserList(){\r\n        return userDao.getUserList();\r\n    }\r\n\r\n    //http://localhost:8888/getUserListByName?userName=xiaoli\r\n    //条件查询\r\n    @GetMapping(\"getUserListByName\")\r\n    public List<User> getUserListByName(String userName)\r\n    {\r\n        Map map = new HashMap();\r\n        map.put(\"user_name\", userName);\r\n        return userDao.selectByMap(map);\r\n    }\r\n\r\n    //http://localhost:8888/saveUser?userName=xiaoli&userPassword=111\r\n    //保存用户\r\n    @GetMapping(\"saveUser\")\r\n    public String saveUser(String userName,String userPassword)\r\n    {\r\n        User user = new User(userName,userPassword);\r\n        Integer index = userDao.insert(user);\r\n        if(index>0){\r\n            return \"新增用户成功。\";\r\n        }else{\r\n            return \"新增用户失败。\";\r\n        }\r\n    }\r\n\r\n    //http://localhost:8888/updateUser?id=5&userName=xiaoli&userPassword=111\r\n    //修改用户\r\n    @GetMapping(\"updateUser\")\r\n    public String updateUser(Integer id,String userName,String userPassword)\r\n    {\r\n        User user = new User(id,userName,userPassword);\r\n        Integer index = userDao.updateById(user);\r\n        if(index>0){\r\n            return \"修改用户成功，影响行数\"+index+\"行。\";\r\n        }else{\r\n            return \"修改用户失败，影响行数\"+index+\"行。\";\r\n        }\r\n    }\r\n\r\n\r\n    //http://localhost:8888/getUserById?userId=1\r\n    //根据Id查询User\r\n    @GetMapping(\"getUserById\")\r\n    public User getUserById(Integer userId)\r\n    {\r\n        return userDao.selectById(userId);\r\n    }\r\n\r\n    //http://localhost:8888/getUserListByPage?pageNumber=1&pageSize=2\r\n    //条件分页查询\r\n    @GetMapping(\"getUserListByPage\")\r\n    public List<User> getUserListByPage(Integer pageNumber,Integer pageSize)\r\n    {\r\n        Page<User> page =new Page<>(pageNumber,pageSize);\r\n        EntityWrapper<User> entityWrapper = new EntityWrapper<>();\r\n        entityWrapper.eq(\"user_name\", \"xiaoli\");\r\n        return userDao.selectPage(page,entityWrapper);\r\n    }\r\n\r\n}\r\n\r\n```\r\n**这里对上面代码稍作解释，其中包含了如下几个方法：   \r\n1.getUserList :这是普通的Mybatis查询的方法，没有用到Mybatis-Plus，这里不做过多解释。   \r\n2.getUserListByName：条件查询，根据名称查询用户列表，这里使用到了selectByMap方法，参数需要传一个Map，里面对应写好需要查询的字段名与对应查询值。   \r\n3.saveUser ：保存用户，这里使用的是insert方法，需要传一个实体对象，返回Integer值作为影响行数。      \r\n4.updateUser ：修改用户，这里使用的是updateByIdt方法，需要传一个实体对象，返回Integer值作为影响行数。\r\n5.getUserById ：根据Id查询实体对象，需要传用户Id。    \r\n6.getUserListByPage ：条件分页查询，使用的是selectPage方法，方法需要一个分页对象Page和一个条件对象EntityWrapper。Page放入页码和每页数量，EntityWrapper使用eq方法放入对应字段名和对应查询值。**\r\n\r\n\r\n这里只是举例说明几个方法，其中方法还有很多，更多Mybatis-Plus使用请查看官方文档:[http://baomidou.oschina.io/mybatis-plus-doc/#/?id=%E7%AE%80%E4%BB%8B](http://baomidou.oschina.io/mybatis-plus-doc/#/?id=%E7%AE%80%E4%BB%8B)\r\n\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\r\n\r\n# 关注作者公众号\r\n\r\n![dalaoyang_gongzhonghao.jpg](https://user-gold-cdn.xitu.io/2018/7/20/164b6a1f12fc00b6?w=430&h=430&f=jpeg&s=22599)', 'dalaoyang', '2018-07-20', 1137, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (67, 'SpringBoot使用JdbcTemplate', '## 前言\n>本文是对SpringBoot使用JdbcTemplate操作数据库的一个介绍，，提供一个小的Demo供大家参考。\n\n操作数据库的方式有很多，本文介绍使用SpringBoot结合JdbcTemplate。\n\n## 新建项目\n\n新建一个项目。pom文件中加入Jdbc依赖，完整pom如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot_jdbc</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot_jdbc</name>\n    <description>springboot_jdbc</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n配置文件如下：\n```\n##端口号\nserver.port=8888\n\n##数据库配置\n##数据库地址\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\n##数据库用户名\nspring.datasource.username=root\n##数据库密码\nspring.datasource.password=123456\n##数据库驱动\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n新建一个实体类User，其中需要注意的是，User类实现了RowMapper类，重写了mapRow方法，完整代码如下：\n```\npackage com.dalaoyang.entity;\n\n\nimport org.springframework.jdbc.core.RowMapper;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.entity\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/25\n */\npublic class User implements RowMapper<User> {\n    private int id;\n    private String user_name;\n    private String pass_word;\n\n    public User(int id, String user_name, String pass_word) {\n        this.id = id;\n        this.user_name = user_name;\n        this.pass_word = pass_word;\n    }\n\n    public User() {\n    }\n\n    public User(String user_name, String pass_word) {\n        this.user_name = user_name;\n        this.pass_word = pass_word;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUser_name() {\n        return user_name;\n    }\n\n    public void setUser_name(String user_name) {\n        this.user_name = user_name;\n    }\n\n    public String getPass_word() {\n        return pass_word;\n    }\n\n    public void setPass_word(String pass_word) {\n        this.pass_word = pass_word;\n    }\n\n    @Override\n    public User mapRow(ResultSet resultSet, int i) throws SQLException {\n        User user = new User();\n        user.setId(resultSet.getInt(\"id\"));\n        user.setUser_name(resultSet.getString(\"user_name\"));\n        user.setPass_word(resultSet.getString(\"pass_word\"));\n        return user;\n    }\n}\n```\n**常用CURD操作大致使用以下三个方法:    \n1.execute方法，用于直接执行SQL语句   \n2.update方法，用户新增修改删除操作   \n3.query方法，用于查询方法**\n\n本文和往常一样，用Controller进行测试，注入JdbcTemplate。完整代码如下，下面会对测试方法进行介绍：\n\n```\npackage com.dalaoyang.controller;\n\nimport com.dalaoyang.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/25\n */\n@RestController\npublic class UserController {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    //http://localhost:8888/createTable\n    @GetMapping(\"createTable\")\n    public String createTable(){\n        String sql = \"CREATE TABLE `user` (\\n\" +\n                \"  `id` int(11) NOT NULL AUTO_INCREMENT,\\n\" +\n                \"  `user_name` varchar(255) DEFAULT NULL,\\n\" +\n                \"  `pass_word` varchar(255) DEFAULT NULL,\\n\" +\n                \"  PRIMARY KEY (`id`)\\n\" +\n                \") ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\\n\" +\n                \"\\n\";\n        jdbcTemplate.execute(sql);\n        return \"创建User表成功\";\n    }\n\n    //http://localhost:8888/saveUserSql\n    @GetMapping(\"saveUserSql\")\n    public String saveUserSql(){\n        String sql = \"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (\'dalaoyang\',\'123\')\";\n        int rows= jdbcTemplate.update(sql);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/saveUser?userName=lisi&passWord=111\n    @GetMapping(\"saveUser\")\n    public String saveUser(String userName,String passWord){\n        int rows= jdbcTemplate.update(\"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (?,?)\",userName,passWord);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/updateUserPassword?id=1&passWord=111\n    @GetMapping(\"updateUserPassword\")\n    public String updateUserPassword(int id,String passWord){\n        int rows= jdbcTemplate.update(\"UPDATE USER SET PASS_WORD = ? WHERE ID = ?\",passWord,id);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n    //http://localhost:8888/deleteUserById?id=1\n    @GetMapping(\"deleteUserById\")\n    public String deleteUserById(int id){\n        int rows= jdbcTemplate.update(\"DELETE FROM  USER  WHERE ID = ?\",id);\n        return \"执行成功，影响\"+rows+\"行\";\n    }\n\n\n    //http://localhost:8888/batchSaveUserSql\n    @GetMapping(\"batchSaveUserSql\")\n    public String batchSaveUserSql(){\n        String sql =\n                \"INSERT INTO USER (USER_NAME,PASS_WORD) VALUES (?,?)\" ;\n        List<Object[]> paramList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            String[] arr = new String[2];\n            arr[0] = \"zhangsan\"+i;\n            arr[1] = \"password\"+i;\n            paramList.add(arr);\n        }\n        jdbcTemplate.batchUpdate(sql,paramList);\n        return \"执行成功\";\n    }\n\n    //http://localhost:8888/getUserByUserName?userName=zhangsan0\n    @GetMapping(\"getUserByUserName\")\n    public List getUserByUserName(String userName){\n        String sql = \"SELECT * FROM USER WHERE USER_NAME = ?\";\n        //写法很多种\n        //下面列举两种写法，都可以实现\n        //List<User> list= jdbcTemplate.query(sql,new Object[]{userName}, new BeanPropertyRowMapper(User.class));\n        List<User> list= jdbcTemplate.query(sql,new User(),new Object[]{userName});\n        return list;\n    }\n\n    //http://localhost:8888/getMapById?id=1\n    @GetMapping(\"getMapById\")\n    public Map getMapById(Integer id){\n        String sql = \"SELECT * FROM USER WHERE ID = ?\";\n        Map map= jdbcTemplate.queryForMap(sql,id);\n        return map;\n    }\n\n    //http://localhost:8888/getUserById?id=1\n    @GetMapping(\"getUserById\")\n    public User getUserById(Integer id){\n        String sql = \"SELECT * FROM USER WHERE ID = ?\";\n        User user= jdbcTemplate.queryForObject(sql,new User(),new Object[]{id});\n        return user;\n    }\n\n}\n```\n\n## 测试方法介绍\n\n\n### 1.createTable方法\n使用execute方法创建User表\n### 2.saveUserSql方法\n使用update方法，传入参数sql语句，直接执行插入操作\n### 3.saveUser方法\n使用update方法，传入sql语句和对应字段值，进行插入操作\n### 4.updateUserPassword方法\n使用update方法，传入sql语句和对应字段值，进行修改操作\n### 5.deleteUserById方法\n使用update方法，传入sql语句和对应字段值，进行删除操作\n### 6.batchSaveUserSql方法\n使用batchUpdate方法，传入sql和参数集合，进行批量更新\n### 7.getUserByUserName方法\n使用query方法，传入sql，实体对象，查询参数，这里就用到了实体类重写的mapRow方法\n### 8.getMapById方法\n使用queryForMap方法，传入sql和参数，返回Map\n### 9.getUserById方法\n使用queryForObject方法，传入sql，实体对象，查询参数，返回User实体类，这里也用到了实体类重写的mapRow方法\n\n具体使用方法还有很多，请参考文档:   \n[https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n\n\n## 注意\n\n出现下图错误不要担心，如图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/67/1)\n\n出现这个错误是因为sql在参数问号的时候多写了引号造成的，这也是我在写demo的时候犯下的错误。\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n', 'dalaoyang', '2018-07-25', 671, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (69, 'SpringBoot2使用WebFlux函数式编程', '>本文只是简单使用SpringBoot2使用WebFlux的函数式编程简单使用，后续会继续写关于Webflux相关的文章。\n\n\n最近一直在研究WebFlux，后续会陆续出一些相关的文章。\n\n首先看一下Srping官网上的一张图，对比一下SpringMvc和Spring WebFlux，如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/1)\n\n在查看一下WebFlux的官方文档:[https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux)，WebFlux提供了函数式编程，本文简单介绍一下WebFlux函数式编程简单使用。\n\n## 新建项目\n\n创建一个项目，pom文件中引入webflux依赖，完整pom文件如下：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.dalaoyang</groupId>\n    <artifactId>springboot2_webflux</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <name>springboot2_webflux</name>\n    <description>springboot2_webflux</description>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n\n首先试试引入WebFlux依赖之后，SpringMvc方式是否还能使用，新建一个HelloController，完整代码如下，执行后发现，是可以正常执行访问的，这其实就是我们所说的注解式编程。\n```\npackage com.dalaoyang.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.controller\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"hello\")\n    public String Hello(){\n        return \"Hello this is SpringWebFlux\";\n    }\n\n\n}\n```\n\n结果如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/2)\n\n接下来使用函数式编程，首先查阅一下官方文档，如图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/3)\n\n我们需要创建一个HandlerFunction返回值为Mono，新建一个HiHandler，里面写一个方法Hi，完整代码如下：\n```\npackage com.dalaoyang.handler;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.server.ServerRequest;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.core.publisher.Mono;\n\n\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.handler\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@Component\npublic class HiHandler {\n\n\n    public Mono<ServerResponse> Hi(ServerRequest request) {\n        return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)\n                .body(BodyInserters.fromObject(\"Hi , this is SpringWebFlux\"));\n    }\n}\n```\n\n其中ServerResponse是相应的封装对象，下面是它的源码，其中包含了响应状态，响应头等等，代码如下：\n```\n\n\n\npackage org.springframework.web.reactive.function.server;\n\nimport java.net.URI;\nimport java.time.ZonedDateTime;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport org.reactivestreams.Publisher;\nimport org.springframework.core.ParameterizedTypeReference;\nimport org.springframework.http.CacheControl;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseCookie;\nimport org.springframework.http.codec.HttpMessageWriter;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.reactive.function.BodyInserter;\nimport org.springframework.web.reactive.result.view.ViewResolver;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Mono;\n\npublic interface ServerResponse {\n    HttpStatus statusCode();\n\n    HttpHeaders headers();\n\n    MultiValueMap<String, ResponseCookie> cookies();\n\n    Mono<Void> writeTo(ServerWebExchange var1, ServerResponse.Context var2);\n\n    static ServerResponse.BodyBuilder from(ServerResponse other) {\n        return new DefaultServerResponseBuilder(other);\n    }\n\n    static ServerResponse.BodyBuilder status(HttpStatus status) {\n        return new DefaultServerResponseBuilder(status);\n    }\n\n    static ServerResponse.BodyBuilder status(int status) {\n        return new DefaultServerResponseBuilder(status);\n    }\n\n    static ServerResponse.BodyBuilder ok() {\n        return status(HttpStatus.OK);\n    }\n\n    static ServerResponse.BodyBuilder created(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.CREATED);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder accepted() {\n        return status(HttpStatus.ACCEPTED);\n    }\n\n    static ServerResponse.HeadersBuilder<?> noContent() {\n        return status(HttpStatus.NO_CONTENT);\n    }\n\n    static ServerResponse.BodyBuilder seeOther(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.SEE_OTHER);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder temporaryRedirect(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.TEMPORARY_REDIRECT);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder permanentRedirect(URI location) {\n        ServerResponse.BodyBuilder builder = status(HttpStatus.PERMANENT_REDIRECT);\n        return (ServerResponse.BodyBuilder)builder.location(location);\n    }\n\n    static ServerResponse.BodyBuilder badRequest() {\n        return status(HttpStatus.BAD_REQUEST);\n    }\n\n    static ServerResponse.HeadersBuilder<?> notFound() {\n        return status(HttpStatus.NOT_FOUND);\n    }\n\n    static ServerResponse.BodyBuilder unprocessableEntity() {\n        return status(HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n\n    public interface Context {\n        List<HttpMessageWriter<?>> messageWriters();\n\n        List<ViewResolver> viewResolvers();\n    }\n\n    public interface BodyBuilder extends ServerResponse.HeadersBuilder<ServerResponse.BodyBuilder> {\n        ServerResponse.BodyBuilder contentLength(long var1);\n\n        ServerResponse.BodyBuilder contentType(MediaType var1);\n\n        ServerResponse.BodyBuilder hint(String var1, Object var2);\n\n        <T, P extends Publisher<T>> Mono<ServerResponse> body(P var1, Class<T> var2);\n\n        <T, P extends Publisher<T>> Mono<ServerResponse> body(P var1, ParameterizedTypeReference<T> var2);\n\n        Mono<ServerResponse> syncBody(Object var1);\n\n        Mono<ServerResponse> body(BodyInserter<?, ? super ServerHttpResponse> var1);\n\n        Mono<ServerResponse> render(String var1, Object... var2);\n\n        Mono<ServerResponse> render(String var1, Map<String, ?> var2);\n    }\n\n    public interface HeadersBuilder<B extends ServerResponse.HeadersBuilder<B>> {\n        B header(String var1, String... var2);\n\n        B headers(Consumer<HttpHeaders> var1);\n\n        B cookie(ResponseCookie var1);\n\n        B cookies(Consumer<MultiValueMap<String, ResponseCookie>> var1);\n\n        B allow(HttpMethod... var1);\n\n        B allow(Set<HttpMethod> var1);\n\n        B eTag(String var1);\n\n        B lastModified(ZonedDateTime var1);\n\n        B location(URI var1);\n\n        B cacheControl(CacheControl var1);\n\n        B varyBy(String... var1);\n\n        Mono<ServerResponse> build();\n\n        Mono<ServerResponse> build(Publisher<Void> var1);\n\n        Mono<ServerResponse> build(BiFunction<ServerWebExchange, ServerResponse.Context, Mono<Void>> var1);\n    }\n}\n```\n\n在回过头了看上面官方文档的图片，还需要配置一个路由来类似@RequestMapping的功能，通过RouterFunctions.route(RequestPredicate, HandlerFunction)提供了一个路由器函数默认实现，新建一个HiRouter，代码如下：\n```\npackage com.dalaoyang.router;\n\nimport com.dalaoyang.handler.HiHandler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.reactive.function.server.RequestPredicates;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.RouterFunctions;\nimport org.springframework.web.reactive.function.server.ServerResponse;\n/**\n * @author dalaoyang\n * @project springboot_learn\n * @package com.dalaoyang.router\n * @email yangyang@dalaoyang.cn\n * @date 2018/7/30\n */\n@Configuration\npublic class HiRouter {\n    @Bean\n    public RouterFunction<ServerResponse> routeHi(HiHandler hiHandler) {\n        return RouterFunctions\n                .route(RequestPredicates.GET(\"/hi\")\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\n                        hiHandler::Hi);\n    }\n}\n```\n\n启动项目，通过控制台可以看到，两种方式的映射都被打印出来了，如图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/4)\n\n在浏览器访问，[http://localhost:8080/hi](http://localhost:8080/hi),结果如图所示:\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/69/5)\n\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\n\n\n\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\n\n', 'dalaoyang', '2018-07-31', 822, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (70, 'SpringBoot应用War包形式部署到外部Tomcat', '>这一篇文章介绍SpringBoot应用修改默认打jar形式部署为打war包形式，部署到外部Tomcat。\r\n\r\nSpringBoot应用默认打包成为可执行jar模式让我们感觉到部署的便捷，接下来给大家介绍一下SpringBoot项目打War包形式部署到外部Tomcat。\r\n\r\n# 修改原有项目\r\n\r\n## 1.修改项目\r\n\r\n打开项目，修改pom文件：   \r\n1.项目中加入spring-boot-starter-web（如果是已经加入该依赖的项目可以忽略）和spring-boot-starter-tomcat依赖。\r\n2.packaging由jar修改为war。\r\n3.在build内加入finalName，这个是设置打war包名称，可以不设置使用默认的。\r\n\r\n完整pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_tomcat</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>war</packaging>\r\n\r\n    <name>springboot_tomcat</name>\r\n    <description>springboot_tomcat</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.15.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>springboot_tomcat</finalName>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n\r\n修改启动类，使其继承SpringBootServletInitializer类，重写configure方法，代码如下：\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.builder.SpringApplicationBuilder;\r\nimport org.springframework.boot.web.support.SpringBootServletInitializer;\r\n\r\n@SpringBootApplication\r\npublic class SpringbootTomcatApplication  extends SpringBootServletInitializer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootTomcatApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n        return application.sources(SpringbootTomcatApplication.class);\r\n    }\r\n}\r\n```\r\n\r\n新建一个Controller，作为测试，代码如下:\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @project springboot_learn\r\n * @package com.dalaoyang\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/8/1\r\n */\r\n@RestController\r\npublic class Controller  {\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(){\r\n        return \"Hello , dalaoyang \";\r\n    }\r\n}\r\n```\r\n\r\n\r\n启动项目，本地访问[http://localhost:8080/](http://localhost:8080/),如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/1)\r\n\r\n## 打包部署\r\n\r\n接下来我们只需要将项目打包部署到tomcat测试，本文以Idea打包为例，双击package，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/2)\r\n\r\n观看控制台，等待打包完成，如图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/3)\r\n\r\n将war包复制到tomcat的webapp目录下，运行tomcat，如图所示，tomcat启动成功（注意tomcat端口不要和目前启动端口冲突）。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/4)\r\n\r\n使用浏览器访问[http://localhost:8080/springboot_tomcat/](http://localhost:8080/springboot_tomcat/)，结果如图:\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/5)\r\n\r\n\r\n# 新建项目，直接以War形式。\r\n\r\n## 新建项目\r\n\r\n修改Packaging为War，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/6)\r\n\r\n依赖只加入一个Web依赖，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/70/7)\r\n\r\n一路next到底即可，然后打开项目发现，选择war模式后已经自动为我们集成了spring-boot-starter-tomcat依赖，而且已经为新建了一个ServletInitializer自动继承了SpringBootServletInitializer并且重写了configure，感谢我们强大的Ide，测试下去和上面的情况也是一样可以成功的。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)\r\n\r\n个人网站：[https://www.dalaoyang.cn](https://www.dalaoyang.cn)\r\n\r\n# 关注作者公众号\r\n\r\n![dalaoyang_gongzhonghao.jpg](https://user-gold-cdn.xitu.io/2018/8/1/164f4ef48687b30a?w=430&h=430&f=jpeg&s=22599)', 'dalaoyang', '2018-08-01', 670, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (71, 'SpringBoot使用Jsp', '>本文是简单总结一下SpringBoot使用Jsp的Demo。\r\n\r\n# 前言\r\n\r\n在早期做项目的时候，JSP是我们经常使用的java服务器页面，其实就是一个简化servlet的设计，在本文开始之前，回顾一下jsp的几大对象，如图。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/1)\r\n\r\n而在现在SpringBoot框架流行的时代，SpringBoot推荐的模版引擎也转变为了thymeleaf，本文来介绍一下SpringBoot使用Jsp页面。\r\n\r\n# 新建项目\r\n\r\n创建一个项目springboot_jsp，pom文件中加入tomcat-embed-jasper依赖以及jstl标签库的依赖，完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_jsp</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>war</packaging>\r\n\r\n    <name>springboot_jsp</name>\r\n    <description>springboot_jsp</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.9.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-jasper</artifactId>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>jstl</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n# 创建jsp放置文件夹\r\n\r\n在src/main目录下创建webapp文件夹，为了迎合传统的结构，在webapp下创建WEB-INF文件夹，然后在新建的WEB-INF文件夹内创建jsp文件夹。（具体结构可以自行设计，无需按照这个demo来），目录结构如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/2)\r\n\r\n\r\n# 配置文件\r\n\r\n配置文件内配置刚刚新建的目录，以及jsp文件后缀，配置如下：\r\n```\r\nserver.port=8888\r\n\r\n\r\nspring.mvc.view.prefix=/WEB-INF/jsp/\r\nspring.mvc.view.suffix=.jsp\r\n```\r\n\r\n# 新建Controller\r\n创建一个IndexController，里面写入一个跳转方法，代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\n\r\n/**\r\n * @author dalaoyang\r\n * @project springboot_learn\r\n * @package com.dalaoyang.controller\r\n * @email yangyang@dalaoyang.cn\r\n * @date 2018/8/13\r\n */\r\n@Controller\r\npublic class IndexController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(Model model){\r\n        model.addAttribute(\"name\", \"dalaoyang\");\r\n        return \"index\";\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 创建一个jsp\r\n在src/main/webapp/WEB-INF/jsp下面新建一个index.jsp，代码如下：\r\n```\r\n\r\n<!DOCTYPE html>\r\n\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Hello</title>\r\n</head>\r\n<body>\r\nHello,${name}\r\n</body>\r\n</html>\r\n```\r\n\r\n# 运行测试\r\n启动项目，在浏览器访问[http://localhost:8888/](http://localhost:8888/),显示如下结果：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/71/3)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-08-13', 799, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (72, '使用Nginx部署静态网站', '>这篇文章将介绍如何利用Nginx部署静态网站。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/1)\r\n之前写过2篇有关Nginx的文章，一篇是[《利用nginx，腾讯云免费证书制作https》](https://www.jianshu.com/p/79ab223e5ab2)，另外一篇是[《linux安装nginx》](https://www.jianshu.com/p/eb02b293de25)，如果有需要可以看一下，这一篇文章介绍如何使用Nginx部署静态网站，需要在服务器部署静态网站的同学可以看一下。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# 准备工作\r\n首先我们需要在本地或者服务器上安装Nginx，这时就用到了我之前的文章。\r\nLinux---[《linux安装nginx》](https://www.jianshu.com/p/eb02b293de25)\r\nWindows---官网下载个压缩包解压一下即可[官网传送门](http://nginx.org/en/download.html)\r\n\r\n# 配置Nginx主配置\r\n\r\n在安装目录下的conf目录下可以找到一个nginx.conf文件，打开这个文件。其中需要设置的内容主要就几项，即如下带有注释的地方，nginx.conf完整内容如下：\r\n\r\n```\r\n\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n    sendfile        on;\r\n    keepalive_timeout  65;\r\n    charset utf-8;        # 设置编码格式\r\n    \r\n    server {\r\n    listen 8081;             # 端口号\r\n    server_name _;           # 配置域名信息\r\n    root web/;               # 静态页面根目录\r\n    index index.html;\r\n    }\r\n}\r\n\r\n```\r\n\r\n由于只是做一个简单的映射，所以我将静态页面放到了nginx目录下，即如图位置，默认页面也设置为web目录下index.html文件，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/2)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/3)\r\n\r\nhtml页面为简单测试页面，内容很简单。\r\n\r\nindex.html\r\n```\r\n<html>\r\n\r\n<head>\r\n<title>index</title>\r\n</head>\r\n\r\n<body>\r\n<p>body</p>\r\n<p>title</p>\r\n<a href=\"edit.html\">跳转</a>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\nedit.html\r\n```\r\n<html>\r\n\r\n<head>\r\n<title>edit</title>\r\n</head>\r\n\r\n<body>\r\n<p>body</p>\r\n<p>title</p>\r\n<a href=\"index.html\">跳转</a>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n# 启动Nginx\r\n\r\n打开命令行，进入nginx目录，开启nginx\r\n```\r\nd:\r\n```\r\n```\r\ncd D:\\tool\\nginx-1.15.2\r\n```\r\n```\r\nstart nginx\r\n```\r\n\r\n# 浏览器访问测试\r\n\r\n在浏览器访问[http://localhost:8081/](http://localhost:8081/)，可以看到如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/72/4)\r\n\r\n\r\n# 总结\r\n\r\n到这里本篇文章就算结束了，其实主要Nginx部署静态网站就是将Nginx主配置文件配置好即可，过程很简单。', 'dalaoyang', '2018-08-14', 549, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (73, 'SpringCloud Gateway入门', '>本文是介绍一下SpringCloud Gateway简单路由转发使用。\r\n\r\n\r\n# SpringCloud Gateway简介\r\nSpringCloud是基于Spring Framework 5，Project Reactor和Spring Boot 2.0构建，目标是用于替代zuul。\r\n## 官方文档\r\n\r\n官方文档地址：[https://cloud.spring.io/spring-cloud-gateway/](https://cloud.spring.io/spring-cloud-gateway/)\r\n\r\n在官方文档上是这样介绍Spring Cloud Gateway的：\r\n\r\n**该项目提供了一个用于在Spring MVC之上构建API网关的库。Spring Cloud Gateway旨在提供一种简单而有效的方式来路由到API，并为他们提供横切关注点。）**\r\n\r\n\r\n\r\n# 入门案例\r\n\r\n接下来，介绍一下简单使用SpringCloud Gateway路由功能（本文使用SpringBoot2.0.0.RELEASE和SpringCloud Finchley.RC1版本）。\r\n\r\n## 创建项目\r\n\r\n新建一个项目，项目种加入SpringCloud Gateway依赖，完整pom如下:\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_gateway</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springcloud_gateway</name>\r\n    <description>springcloud_gateway</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.0.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Finchley.RC1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-gateway</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n## SpringBoot主程序\r\n\r\n### 在类中配置路由\r\n\r\n主程序中加入了一种配置路由的方法，利用@Bean的方式自定义RouteLocator。\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.gateway.route.RouteLocator;\r\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\n\r\n\r\n@SpringBootApplication\r\npublic class SpringcloudGatewayApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudGatewayApplication.class, args);\r\n    }\r\n\r\n\r\n\r\n    @Bean\r\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\r\n        return builder.routes()\r\n                .route(r -> r.path(\"/jianshu\")\r\n                        .uri(\"http://www.jianshu.com/u/128b6effde53\")\r\n                ).build();\r\n    }\r\n\r\n}\r\n```\r\n\r\n### 在配置文件中配置：\r\n```\r\nserver:\r\n  port: 8888\r\n\r\nspring:\r\n  application:\r\n    name: gateway-service\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: dalaoyang\r\n        uri: http://www.dalaoyang.cn/\r\n        predicates:\r\n          - Path=/dalaoyang/**\r\n      - id: juejin\r\n        uri: https://juejin.im/user/5aa50b96f265da23866f836e\r\n        predicates:\r\n          - Path=/juejin/**\r\n\r\n```\r\n\r\n\r\n# 运行测试\r\n到这里其实就配置完成了\r\n\r\n\r\n访问[http://localhost:8888/dalaoyang](http://localhost:8888/dalaoyang) 自动跳转到了[我的博客首页](https://www.dalaoyang.cn/)   \r\n\r\n\r\n访问[http://localhost:8888/jianshu](http://localhost:8888/jianshu) 自动跳转到了[我的简书首页](https://www.jianshu.com/u/128b6effde53) \r\n\r\n\r\n访问[http://localhost:8888/juejin](http://localhost:8888/juejin)   自动跳转到了[我的掘金首页](https://juejin.im/user/5aa50b96f265da23866f836e) \r\n \r\n源码下载：[大老杨源码](https://gitee.com/dalaoyang/springcloud_learn)\r\n', 'dalaoyang', '2018-08-24', 789, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (74, 'SpringBoot使用Mybatis-Generator', '>本文介绍如何将Maven和Mybatis-Generator配合使用。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/1)\r\n\r\n# 简介\r\n\r\nMybatis-Generator是Mybatis提供的一个便捷型插件，自动可以为项目生产对应的实体类，Mapper，dao层。  \r\n\r\n官网文档：[http://www.mybatis.org/generator/index.html](http://www.mybatis.org/generator/index.html)\r\n\r\n\r\n# 入门案例\r\n\r\n本文使用SpringBoot结合Mybatis-Generator插件使用，数据库Mysql。\r\n\r\n## 新建项目\r\n新建一个SpringBoot项目。\r\n\r\n### 依赖文件\r\n\r\n在项目pom文件中，引入Mybatis-Generator插件，并且引入Mybatis和Mysql依赖。完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_generator</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_generator</name>\r\n    <description>springboot_generator</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.5.15.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis.spring.boot</groupId>\r\n            <artifactId>mybatis-spring-boot-starter</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.mybatis.generator</groupId>\r\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\r\n                <version>1.3.2</version>\r\n                <executions>\r\n                    <execution>\r\n                        <id>mybatis-generator</id>\r\n                        <phase>deploy</phase>\r\n                        <goals>\r\n                            <goal>generate</goal>\r\n                        </goals>\r\n                    </execution>\r\n                </executions>\r\n                <configuration>\r\n                    <!-- Mybatis-Generator 工具配置文件的位置 -->\r\n                    <configurationFile>src/main/resources/mybatis-generator/generatorConfig.xml</configurationFile>\r\n                    <verbose>true</verbose>\r\n                    <overwrite>true</overwrite>\r\n                </configuration>\r\n                <dependencies>\r\n                    <dependency>\r\n                        <groupId>mysql</groupId>\r\n                        <artifactId>mysql-connector-java</artifactId>\r\n                        <version>5.1.46</version>\r\n                    </dependency>\r\n                    <dependency>\r\n                        <groupId>org.mybatis.generator</groupId>\r\n                        <artifactId>mybatis-generator-core</artifactId>\r\n                        <version>1.3.2</version>\r\n                    </dependency>\r\n                </dependencies>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <classifier>exec</classifier>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n\r\n```\r\n\r\n### 配置Mybatis-Generator配置\r\n在pom文件中配置的Mybatis-Generator 工具配置文件的位置新建一个generatorConfig.xml，（本文案例配置的位置是src/main/resources/mybatis-generator/generatorConfig.xml），配置文件代码如下，具体配置需要自行修改至自己的项目：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE generatorConfiguration\r\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n<!-- 配置生成器 -->\r\n<generatorConfiguration>\r\n    <!--执行generator插件生成文件的命令： call mvn mybatis-generator:generate -e -->\r\n    <!-- 引入配置文件 -->\r\n    <properties resource=\"application.properties\"/>\r\n    <!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->\r\n    <!--<classPathEntry location=\"D:\\generator_mybatis\\mysql-connector-java-5.1.24-bin.jar\" /> -->\r\n\r\n    <!-- 一个数据库一个context -->\r\n    <!--defaultModelType=\"flat\" 大数据字段，不分表 -->\r\n    <context id=\"MysqlTables\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\r\n        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；\r\n        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->\r\n        <property name=\"autoDelimitKeywords\" value=\"true\" />\r\n        <!-- 生成的Java文件的编码 -->\r\n        <property name=\"javaFileEncoding\" value=\"utf-8\" />\r\n        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->\r\n        <property name=\"beginningDelimiter\" value=\"`\" />\r\n        <property name=\"endingDelimiter\" value=\"`\" />\r\n\r\n        <!-- 格式化java代码 -->\r\n        <property name=\"javaFormatter\" value=\"org.mybatis.generator.api.dom.DefaultJavaFormatter\"/>\r\n        <!-- 格式化XML代码 -->\r\n        <property name=\"xmlFormatter\" value=\"org.mybatis.generator.api.dom.DefaultXmlFormatter\"/>\r\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\" />\r\n\r\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\" />\r\n\r\n        <!-- 注释 -->\r\n        <commentGenerator >\r\n            <property name=\"suppressAllComments\" value=\"false\"/><!-- 是否取消注释 -->\r\n            <property name=\"suppressDate\" value=\"true\" /> <!-- 是否生成注释代时间戳-->\r\n        </commentGenerator>\r\n\r\n        <!-- jdbc连接 -->\r\n        <jdbcConnection driverClass=\"${spring.datasource.driver-class-name}\" connectionURL=\"${spring.datasource.url}\" userId=\"${spring.datasource.username}\" password=\"${spring.datasource.password}\" />\r\n        <!-- 类型转换 -->\r\n        <javaTypeResolver>\r\n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->\r\n            <property name=\"forceBigDecimals\" value=\"false\"/>\r\n        </javaTypeResolver>\r\n\r\n        <!-- 生成实体类地址 -->\r\n        <javaModelGenerator targetPackage=\"com.dalaoyang.entity\" targetProject=\"${mybatis.project}\" >\r\n            <property name=\"enableSubPackages\" value=\"false\"/>\r\n            <property name=\"trimStrings\" value=\"true\"/>\r\n        </javaModelGenerator>\r\n        <!-- 生成mapxml文件 -->\r\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"${mybatis.resources}\" >\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </sqlMapGenerator>\r\n        <!-- 生成mapxml对应client，也就是接口dao -->\r\n        <javaClientGenerator targetPackage=\"com.dalaoyang.dao\" targetProject=\"${mybatis.project}\" type=\"XMLMAPPER\" >\r\n            <property name=\"enableSubPackages\" value=\"false\" />\r\n        </javaClientGenerator>\r\n        <!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件 -->\r\n        <table tableName=\"user\" enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\" selectByExampleQueryId=\"true\">\r\n            <property name=\"useActualColumnNames\" value=\"false\" />\r\n            <!-- 数据库表主键 -->\r\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\" />\r\n        </table>\r\n        <table tableName=\"book\" enableCountByExample=\"true\" enableUpdateByExample=\"true\" enableDeleteByExample=\"true\" enableSelectByExample=\"true\" selectByExampleQueryId=\"true\">\r\n            <property name=\"useActualColumnNames\" value=\"false\" />\r\n            <!-- 数据库表主键 -->\r\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\" />\r\n        </table>\r\n    </context>\r\n</generatorConfiguration>\r\n```\r\n\r\n### 配置application.properties\r\n\r\n配置项目的application.properties，其中数据库信息，Mapper地址之前都有过介绍，具体SpringBoot-Mybatis配置可以参考：\r\n[《SpringBoot+Mybatis+MySql学习》](https://www.jianshu.com/p/8b545a537fd0)\r\n\r\n本文配置如下：\r\n```\r\n## mapper xml 文件地址\r\nmybatis.mapper-locations=classpath*:mapper/*Mapper.xml\r\n\r\n##数据库url\r\nspring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8&useSSL=false\r\n##数据库用户名\r\nspring.datasource.username=root\r\n##数据库密码\r\nspring.datasource.password=123456\r\n##数据库驱动\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n\r\n#Mybatis Generator configuration\r\n#dao类和实体类的位置\r\nmybatis.project =src/main/java\r\n#mapper文件的位置\r\nmybatis.resources=src/main/resources\r\n```\r\n\r\n到这里其实配置就完成了，可以体验Mybatis-Generator插件的优点了，在右侧Maven处点击如图所示位置，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/2)\r\n\r\n点击完成后，可以看到Mapper，dao，实体类都已经创建好了，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/3)\r\n\r\n创建完成会给我生成几个默认的建当方法，如UserMapper代码如下：\r\n```\r\npackage com.dalaoyang.dao;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.apache.ibatis.annotations.Mapper;\r\n\r\nimport java.util.List;\r\n\r\npublic interface UserMapper {\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int deleteByPrimaryKey(Long id);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int insert(User record);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    User selectByPrimaryKey(Long id);\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    List<User> selectAll();\r\n\r\n    /**\r\n     * This method was generated by MyBatis Generator.\r\n     * This method corresponds to the database table user\r\n     *\r\n     * @mbggenerated\r\n     */\r\n    int updateByPrimaryKey(User record);\r\n}\r\n```\r\n\r\nUserMapper.xml代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n<mapper namespace=\"com.dalaoyang.dao.UserMapper\" >\r\n  <resultMap id=\"BaseResultMap\" type=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\" />\r\n    <result column=\"user_name\" property=\"userName\" jdbcType=\"VARCHAR\" />\r\n    <result column=\"user_password\" property=\"userPassword\" jdbcType=\"VARCHAR\" />\r\n  </resultMap>\r\n  <delete id=\"deleteByPrimaryKey\" parameterType=\"java.lang.Long\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    delete from user\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </delete>\r\n  <insert id=\"insert\" parameterType=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    <selectKey resultType=\"java.lang.Long\" keyProperty=\"id\" order=\"AFTER\" >\r\n      SELECT LAST_INSERT_ID()\r\n    </selectKey>\r\n    insert into user (user_name, user_password)\r\n    values (#{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR})\r\n  </insert>\r\n  <update id=\"updateByPrimaryKey\" parameterType=\"com.dalaoyang.entity.User\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    update user\r\n    set user_name = #{userName,jdbcType=VARCHAR},\r\n      user_password = #{userPassword,jdbcType=VARCHAR}\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </update>\r\n  <select id=\"selectByPrimaryKey\" resultMap=\"BaseResultMap\" parameterType=\"java.lang.Long\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    select id, user_name, user_password\r\n    from user\r\n    where id = #{id,jdbcType=BIGINT}\r\n  </select>\r\n  <select id=\"selectAll\" resultMap=\"BaseResultMap\" >\r\n    <!--\r\n      WARNING - @mbggenerated\r\n      This element is automatically generated by MyBatis Generator, do not modify.\r\n    -->\r\n    select id, user_name, user_password\r\n    from user\r\n  </select>\r\n</mapper>\r\n```\r\n## 测试使用\r\n\r\n### 新增测试方法\r\n在UserMapper上加入注解@Mapper表明是持久化映射层，启动类上加入注解@RestController进行测试，这里简单调用一个查询所有的方法selectAll，启动类代码如下:\r\n```\r\n@SpringBootApplication\r\n@RestController\r\npublic class SpringbootGeneratorApplication {\r\n\r\n    @Autowired\r\n    private UserMapper userMapper;\r\n\r\n    @GetMapping(\"/findAll\")\r\n    public List<User> findAll(){\r\n        return userMapper.selectAll();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootGeneratorApplication.class, args);\r\n    }\r\n}\r\n```\r\n\r\n### 运行测试\r\n\r\n运行项目，浏览器访问[localhost:8080/findAll](localhost:8080/findAll\r\n)如图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/74/4)\r\n\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-08', 822, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (75, 'SpringBoot使用AOP', '>本文介绍SpringBoot中使用Spring AOP。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/1)\r\n\r\n\r\n# 简介\r\n\r\n## AOP简介\r\nAOP可能对于广大开发者耳熟能详，它是Aspect Oriented Programming的缩写，翻译成中文就是：面向切面编程。这个可能是面试中经常提到的问题，同时它也是Spring框架中一个重大的特性，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果，对于我们开发中最常见的可能就是日志记录，事务处理，异常处理等等。\r\n\r\n# SpringBoot中使用AOP\r\n\r\n接下来介绍SpringBoot项目中如何运用AOP。\r\n\r\n## 新建项目\r\n\r\n新建一个SpringBoot项目，在pom文件中加入AOP依赖，完整代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_aop</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_aop</name>\r\n    <description>springboot_aop</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-aop</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n## 创建切面\r\n\r\n### 一 直接使用切面\r\n\r\n新建一个日志切面类，假设我们需要一个类来打印进入方法或方法执行后需要打印的日志。\r\n\r\n#### 新建一个切面类\r\n\r\n新建类LogAspect，完整代码如下：\r\n```\r\npackage com.dalaoyang.aspect;\r\n\r\nimport org.aspectj.lang.JoinPoint;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.springframework.stereotype.Component;\r\nimport org.aspectj.lang.annotation.*;\r\n\r\n@Aspect\r\n@Component\r\npublic class LogAspect {\r\n    @Pointcut(\"execution(public * com.dalaoyang.controller.*.*(..))\")\r\n    public void LogAspect(){}\r\n\r\n    @Before(\"LogAspect()\")\r\n    public void doBefore(JoinPoint joinPoint){\r\n        System.out.println(\"doBefore\");\r\n    }\r\n\r\n    @After(\"LogAspect()\")\r\n    public void doAfter(JoinPoint joinPoint){\r\n        System.out.println(\"doAfter\");\r\n    }\r\n\r\n    @AfterReturning(\"LogAspect()\")\r\n    public void doAfterReturning(JoinPoint joinPoint){\r\n        System.out.println(\"doAfterReturning\");\r\n    }\r\n\r\n    @AfterThrowing(\"LogAspect()\")\r\n    public void deAfterThrowing(JoinPoint joinPoint){\r\n        System.out.println(\"deAfterThrowing\");\r\n    }\r\n\r\n    @Around(\"LogAspect()\")\r\n    public Object deAround(ProceedingJoinPoint joinPoint) throws Throwable{\r\n        System.out.println(\"deAround\");\r\n        return joinPoint.proceed();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n其中：\r\n* @Aspect 表明是一个切面类\r\n* @Component 将当前类注入到Spring容器内\r\n* @Pointcut 切入点，其中execution用于使用切面的连接点。使用方法：execution(方法修饰符(可选)  返回类型  方法名  参数  异常模式(可选)) ，可以使用通配符匹配字符，*可以匹配任意字符。\r\n* @Before 在方法前执行\r\n* @After 在方法后执行\r\n* @AfterReturning 在方法执行后返回一个结果后执行\r\n* @AfterThrowing 在方法执行过程中抛出异常的时候执行\r\n* @Around 环绕通知，就是可以在执行前后都使用，这个方法参数必须为ProceedingJoinPoint，proceed()方法就是被切面的方法，上面四个方法可以使用JoinPoint，JoinPoint包含了类名，被切面的方法名，参数等信息。\r\n\r\n\r\n### 二 利用自定义注解使用AOP\r\n\r\n#### 新建自定义注解\r\n\r\n新建自定义注解，新建注解与新建接口类似，将interface改为@interface即可。\r\n```\r\npackage com.dalaoyang.annotation;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface DoneTime {\r\n    String param() default \"\";\r\n}\r\n\r\n```\r\n\r\n#### 创建自定义注解对应切面\r\n\r\n创建自定义注解对应切面，与上一中情况的切面类似，这里就不在赘述了，代码如下:\r\n```\r\npackage com.dalaoyang.aspect;\r\n\r\nimport com.dalaoyang.annotation.DoneTime;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.Around;\r\nimport org.aspectj.lang.annotation.Aspect;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Date;\r\n\r\n@Aspect\r\n@Component\r\npublic class DoneTimeAspect {\r\n\r\n    @Around(\"@annotation(doneTime)\")\r\n    public Object around(ProceedingJoinPoint joinPoint, DoneTime doneTime) throws Throwable {\r\n        System.out.println(\"方法开始时间是:\"+new Date());\r\n        Object o = joinPoint.proceed();\r\n        System.out.println(\"方法结束时间是:\"+new Date()) ;\r\n        return o;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n## 创建Controller测试\r\n\r\n创建一个IndexController进行测试，其实就是两个普通的Web请求方法，其中index使用了自定义注解，index2没有使用自定义注解，完整代码如下：\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.annotation.DoneTime;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n\r\n@RestController\r\npublic class IndexController {\r\n\r\n    @GetMapping(\"/index\")\r\n    @DoneTime(param = \"IndexController\")\r\n    public String index(){\r\n        System.out.println(\"方法执行\");\r\n        return \"hello dalaoyang\";\r\n    }\r\n\r\n    @GetMapping(\"/index2\")\r\n    public String index2(){\r\n        System.out.println(\"方法2执行\");\r\n        return \"hello dalaoyang\";\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 运行测试\r\n\r\n启动项目，在浏览器访问[http://localhost:8080/index](http://localhost:8080/index)，控制台如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/2)\r\n\r\n在浏览器访问[http://localhost:8080/index2](http://localhost:8080/index2)，控制台如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/75/3)\r\n\r\n\r\n## 总结\r\n\r\n本文只是简单介绍一下SpringBoot使用Spring AOP，当然它可能还有其他使用方法，具体的情况需要根据我们实际情况来使用。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-09', 992, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (76, 'SpringBoot使用WebFlux响应式编程操作数据库', '>这一篇文章介绍SpringBoot使用WebFlux响应式编程操作MongoDb数据库。\r\n\r\n# 前言\r\n\r\n在之前一篇简单介绍了WebFlux响应式编程的操作，我们在来看一下下图，可以看到，在目前的Spring WebFlux还没有支持类似Mysql这样的关系型数据库，所以本文以MongoDb数据库为例。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/1)\r\n\r\n\r\n# SpringBoot使用WebFlux响应式编程操作数据库\r\n\r\n接下来介绍SpringBoot使用WebFlux响应式编程操作MongoDb数据库。\r\n\r\n\r\n## 新建项目\r\n\r\n### pom文件\r\n\r\n新建项目，在项目中加入webflux依赖和mongodb-reactive依赖，完整pom代码如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_mongodb2</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n\r\n    <name>springboot_mongodb2</name>\r\n    <description>springboot_mongodb2</description>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.5.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-webflux</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.projectreactor</groupId>\r\n            <artifactId>reactor-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n### 配置文件\r\n\r\n配置文件中配置mongodb数据库信息，之前文章有介绍，这里就不介绍了，配置文件代码如下:\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\n\r\n##mongo配置\r\nspring.data.mongodb.host=127.0.0.1\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=test\r\n```\r\n\r\n### 启动类\r\n启动类是默认生成的，没有做任何修改，代码如下：\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class SpringbootMongodb2Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootMongodb2Application.class, args);\r\n    }\r\n}\r\n```\r\n\r\n### 创建实体类\r\n\r\n新建一个实体类UserInfo，代码内容没有什么特殊的，这里就不做介绍了，实体类完整代码如下：\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport org.springframework.data.annotation.Id;\r\n\r\n\r\npublic class UserInfo {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo(Long id, String username, String password) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n\r\n    public UserInfo() {\r\n    }\r\n}\r\n\r\n``` \r\n\r\n\r\n### 数据操作层\r\n新建一个UserRepository，因为是响应式编程所以这里继承ReactiveMongoRepository，代码如下：\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport org.springframework.data.mongodb.repository.ReactiveMongoRepository;\r\n\r\npublic interface UserRepository extends ReactiveMongoRepository<UserInfo,Long> {\r\n}\r\n```\r\n\r\n### handler层\r\n\r\n新建一个UserHandler，其中分别创建了四个方法，分别是：   \r\n\r\n* saveUser:新增方法，利用request.bodyToMono获取POST请求的body对象。\r\n* deleteUser：删除方法，利用request.pathVariable获取请求路径的对应参数ID。\r\n* getUser：获取对象方法，利用request.pathVariable获取请求路径的对应参数ID。\r\n* listUser:获取对象列表方法，这里没有参数。\r\n\r\n完整代码如下：\r\n```\r\npackage com.dalaoyang.handler;\r\n\r\nimport com.dalaoyang.entity.UserInfo;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.reactive.function.server.ServerRequest;\r\nimport org.springframework.web.reactive.function.server.ServerResponse;\r\nimport reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport static org.springframework.http.MediaType.APPLICATION_JSON;\r\n\r\n\r\n@Component\r\npublic class UserHandler {\r\n\r\n    private final UserRepository repository;\r\n\r\n    public UserHandler(UserRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    //http://localhost:8888/saveUser\r\n    public Mono<ServerResponse> saveUser(ServerRequest request) {\r\n        Mono<UserInfo> user = request.bodyToMono(UserInfo.class);\r\n        return ServerResponse.ok().build(repository.insert(user).then());\r\n    }\r\n\r\n    //http://localhost:8888/deleteUser/1\r\n    public Mono<ServerResponse> deleteUser(ServerRequest request) {\r\n        Long userId = Long.valueOf(request.pathVariable(\"id\"));\r\n        return ServerResponse.ok().build(repository.deleteById(userId).then());\r\n    }\r\n\r\n    //http://localhost:8888/user/1\r\n    public Mono<ServerResponse> getUser(ServerRequest request) {\r\n        Long userId = Long.valueOf(request.pathVariable(\"id\"));\r\n        Mono<UserInfo> userInfo = repository.findById(userId);\r\n        return ServerResponse.ok().contentType(APPLICATION_JSON).body(userInfo, UserInfo.class);\r\n    }\r\n\r\n    //http://localhost:8888/listUser\r\n    public Mono<ServerResponse> listUser(ServerRequest request) {\r\n        Flux<UserInfo> userList = repository.findAll();\r\n        return ServerResponse.ok().contentType(APPLICATION_JSON).body(userList, UserInfo.class);\r\n    }\r\n\r\n\r\n}\r\n```\r\n\r\n### 配置路由\r\n\r\n在路由中分别配置刚刚写的4个方法路由跳转，完整代码如下：\r\n```\r\npackage com.dalaoyang.router;\r\n\r\nimport com.dalaoyang.handler.UserHandler;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.reactive.function.server.RequestPredicates;\r\nimport org.springframework.web.reactive.function.server.RouterFunction;\r\nimport org.springframework.web.reactive.function.server.RouterFunctions;\r\nimport org.springframework.web.reactive.function.server.ServerResponse;\r\n\r\n\r\n@Configuration\r\npublic class UserRouter {\r\n\r\n    @Bean\r\n    public RouterFunction<ServerResponse> routeCity(UserHandler userHandler) {\r\n        return RouterFunctions\r\n                .route(RequestPredicates.GET(\"/listUser\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::listUser)\r\n                .andRoute(RequestPredicates.GET(\"/user/{id}\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::getUser)\r\n                .andRoute(RequestPredicates.GET(\"/deleteUser/{id}\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::deleteUser)\r\n                .andRoute(RequestPredicates.POST(\"/saveUser\")\r\n                                .and(RequestPredicates.accept(MediaType.APPLICATION_JSON)),\r\n                        userHandler::saveUser);\r\n    }\r\n}\r\n\r\n```\r\n\r\n到这一步完成，项目已经构建完成。\r\n\r\n## 运行测试\r\n\r\n### 启动Mongodb\r\n\r\n本文就不对如何安装以及启动MongoDb数据库进行介绍了，具体可以查看[菜鸟教程](http://www.runoob.com/mongodb/mongodb-window-install.html)，个人觉得这里已经介绍的很详细了，并且包含了各个系统的操作。\r\n\r\n### 启动项目\r\n\r\n运行刚刚的项目，这里以postman测试为例子，在postman内Post请求保存方法（[http://localhost:8888/saveUser](http://localhost:8888/saveUser)），如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/2)\r\n\r\n\r\n然后在请求查询用户方法（[http://localhost:8888/user/1](http://localhost:8888/user/1)），如图所示，证明刚刚已经保存成功，下方body处为返回数据：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/3)\r\n\r\n我们在多次请求新增用户方法，将Id分别修改为2，3，4，5并执行保存方法，这里就不一一截图，然后方法查询用户列表方法（[http://localhost:8888/listUser](http://localhost:8888/listUser)），如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/4)\r\n\r\n\r\n最后调用删除用户方法（[http://localhost:8888/deleteUser/1](http://localhost:8888/deleteUser/1)），这里以删除ID为1的用户为例，调用后在查看所有类别如图，用户ID为1的已经被删除了：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/76/5)\r\n\r\n\r\n# 总结\r\n\r\nSpringBoot使用WebFlux响应式编程操作Mongodb数据库这里已经简单整合完了，虽然和之前操作数据库有些不同，但是其实大致过程也都相似。\r\n\r\n源码下载 ：[大老杨码云](https://gitee.com/dalaoyang/springboot_learn)', 'dalaoyang', '2018-09-14', 1297, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (77, 'Linux安装RabbitMQ', '>本文介绍Linux安装RabbitMQ简单步骤。\r\n\r\n**本文环境是在腾讯云服务器CentOS7.2搭建的，RabbitMQ 3.6.8， Erlang R16B03-1**\r\n\r\n# 1.安装需要插件\r\n```\r\nyum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel\r\n```\r\n\r\n\r\n# 2.安装erlang\r\n\r\n因为RabbitMQ需要Erlang的环境，所以需要先安装Erlang，CentOS7.2版本\r\n使用yum安装即可\r\n```\r\nyum install erlang\r\n```\r\n\r\n安装完成后可以检测是否安装成功，使用如下命令：\r\n```\r\nerl\r\n```\r\n\r\n如果安装成功，如下图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/77/1)\r\n\r\n进入Erlang后可以使用如下命令退出Erlang：\r\n```\r\nq().\r\n```\r\n\r\n# 3.安装RabbitMQ\r\n首先下载一个RabbitMQ，可以在本地下载上传到服务器，也可以直接下载，命令如下：\r\n```\r\nwget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.8/rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n然后使用如下命令：\r\n```\r\nrpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\r\n```\r\n\r\n```\r\nyum install rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n```\r\nrpm -i --nodeps rabbitmq-server-3.6.8-1.el7.noarch.rpm\r\n```\r\n\r\n启动RabbitMQ\r\n```\r\n/sbin/service rabbitmq-server start\r\n```\r\n\r\n创建用户admin\r\n```\r\nrabbitmqctl add_user admin admin\r\n```\r\n\r\n给用户admin授权\r\n```\r\nrabbitmqctl  set_permissions -p \"/\" admin \'.*\' \'.*\' \'.*\'\r\n```\r\n\r\n给用户admin赋予administrator角色\r\n```\r\nrabbitmqctl set_user_tags admin administrator \r\n```\r\n\r\n开启RabbitMQ控制台\r\n```\r\nrabbitmq-plugins enable rabbitmq_management\r\n```\r\n\r\n# 总结\r\n到这里就安装启动完成了，可以远程访问http://服务器外网ip:15672方法RabbitMQ控制台，记得需要开放服务器15672端口。', 'dalaoyang', '2018-10-14', 422, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (78, 'Linux安装Elasticsearch', '>本文介绍Linux环境如何安装Elasticsearch.\r\n\r\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，elasticsearch-5.4.2。\r\n\r\n# 1 安装JDK\r\n网上教程很多，也可以参考本人教程之前写的[Linux安装JDK](https://www.jianshu.com/p/4418cb3bda31)\r\n\r\n# 2 安装Elasticsearch\r\n\r\n# 2.1 创建elasticsearch目录\r\n``` \r\ncd /usr/local/\r\n```\r\n```\r\nmkdir tool\r\n```\r\n```\r\ncd tool\r\n```\r\n```\r\nmkdir elasticsearch\r\n```\r\n```\r\ncd elasticsearch\r\n```\r\n## 2.1 下载Elasticsearch\r\n### 2.1.1 在刚刚创建好的文件夹内下载Elasticsearch(以下简称es)\r\n```\r\ncurl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.4.2.tar.gz\r\n```\r\n\r\n### 2.1.2 解压es包\r\n```\r\ntar -xvf elasticsearch-5.4.2.tar.gz\r\n```\r\n\r\n### 2.1.3 进入es/bin包\r\n```\r\ncd elasticsearch-5.4.2/bin\r\n```\r\n\r\n### 2.1.4 启动es\r\n```\r\n./elasticsearch\r\n```\r\n\r\n## 2.2 解决问题\r\n\r\n### 2.2.1 问题一\r\n\r\n直接启动，遇到如图问题，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/1)\r\n\r\n这个问题是由于内存分配不够造成的，修改适合本机的内存，修改文件config/jvm.options\r\n```\r\nvi ../config/jvm.options\r\n```\r\n修改如下位置\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/2)\r\n\r\n由于我的服务器内存较小，修改为512m，具体可以根据情况修改，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/3)\r\n\r\n修改后在次启动：\r\n```\r\n./elasticsearch\r\n```\r\n\r\n### 2.2.2 问题二\r\n\r\n出现如下错误：\r\n```\r\norg.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root\r\n```\r\n\r\n如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/4)\r\n\r\n这个问题很明显，不允许使用root用户启动，那么我们新建一个es用户，并赋予权限：\r\n\r\n添加es用户\r\n```\r\nuseradd es\r\n```\r\n\r\n添加es用户密码\r\n```\r\npasswd es\r\n```\r\n\r\n将文件夹elasticsearch-5.4.2赋予es权限\r\n```\r\nchown -R es:es /usr/local/tool/elasticsearch/elasticsearch-5.4.2\r\n```\r\n\r\n切换为es用户\r\n```\r\nsu es\r\n```\r\n\r\n再次启动es\r\n```\r\n./elasticsearch\r\n```\r\n\r\n这次启动成功了，我们在使用一个窗口登录root用户，输入命令：\r\n```\r\ncurl -X GET http://localhost:9200\r\n```\r\n\r\n如图所示，可以成功访问\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/5)\r\n\r\n\r\n### 2.2.3 问题三\r\n在浏览器访问[http://118.24.242.170:9200/](http://118.24.242.170:9200/)拒绝访问（118.24.242.170为服务器ip）\r\n\r\n使用root用户，打开elasticsearch.yml文件，如下：\r\n```\r\nvi /usr/local/tool/elasticsearch/elasticsearch-5.4.2/config/elasticsearch.yml\r\n```\r\n\r\n文件内增加如下代码\r\n```\r\nnetwork.host: 0.0.0.0\r\n```\r\n\r\n使用es用户启动，发现又出现了错误如下，得到错误信息如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/78/6)\r\n\r\n使用root用户打开如下文件：\r\n```\r\nvim /etc/sysctl.conf\r\n```\r\n\r\n添加如下配置：\r\n```\r\nvm.max_map_count = 655360\r\n```\r\n\r\n使配置生效\r\n```\r\n/sbin/sysctl -p\r\n```\r\n\r\n然后使用es用户启动Elasticsearch，这次可以成功启动了，如果需要后台启动的话，在启动命令后加&，如下所示:\r\n```\r\n./elasticsearch &\r\n```\r\n\r\n# 总结\r\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-17', 862, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (79, 'Linux安装Kibana', '>本文介绍Linux环境如何安装Kibana.\r\n\r\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，kibana-5.4.2。\r\n\r\n# 1 安装JDK\r\n网上教程很多，也可以参考本人教程之前写的[Linux安装JDK](https://www.jianshu.com/p/4418cb3bda31)\r\n\r\n# 2 安装Kibana\r\n\r\n## 2.1 下载Kibana\r\n这一步需要下载与Elasticsearch版本相同的kibana，本人是从本地上传到服务器上的，使用的是5.4.2。\r\n\r\n上传命令\r\n```\r\nscp /Users/dalaoyang/downloads/kibana-5.4.2-linux-x86_64.tar.gz root@ip:/usr/local/tool/kibana-5.4.2-linux-x86_64.tar.gz\r\n```\r\n\r\n## 2.2 解压Kibana\r\n在服务器上传目录解压kibana：\r\n```\r\ntar -zxvf kibana-5.4.2-linux-x86_64.tar.gz\r\n```\r\n\r\n## 2.3 修改配置\r\n修改config/kibana.yml文件配置：\r\n```\r\nvim kibana.yml\r\n```\r\n\r\nkibana.yml常见配置项\r\n```\r\n# pingElasticsearch超时时间\r\nelasticsearch.pingTimeout\r\n# 读取Elasticsearch数据超时时间\r\nelasticsearch.requestTimeout  \r\n#Elasticsearch主机地址\r\nelasticsearch.url: \"http://ip:9200\" \r\n# 允许远程访问\r\nserver.host: \"0.0.0.0\" \r\n# Elasticsearch用户名 这里其实就是我在服务器启动Elasticsearch的用户名\r\nelasticsearch.username: \"es\"  \r\n# Elasticsearch鉴权密码 这里其实就是我在服务器启动Elasticsearch的密码\r\nelasticsearch.password: \"es\"  \r\n```\r\n\r\n根据情况增加配置即可，本人测试使用的是如下：\r\n```\r\n#Elasticsearch主机地址\r\nelasticsearch.url: \"http://ip:9200\" \r\n# 允许远程访问\r\nserver.host: \"0.0.0.0\" \r\n# Elasticsearch用户名 这里其实就是我在服务器启动Elasticsearch的用户名\r\nelasticsearch.username: \"es\"  \r\n# Elasticsearch鉴权密码 这里其实就是我在服务器启动Elasticsearch的密码\r\nelasticsearch.password: \"es\"  \r\n```\r\n\r\n## 2.4 启动Kibana\r\n\r\n直接启动，进入bin目录后\r\n```\r\n./kibana\r\n```\r\n\r\n后台启动，进入bin目录后\r\n```\r\nnohup ./kibana &\r\n```\r\n\r\n## 2.5 访问管理页面\r\n\r\n访问http://ip:5601，可以看到如下页面：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/79/1)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/79/2)\r\n\r\n接下来就可以对Kibana进行使用了。\r\n\r\n# 总结\r\n\r\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-19', 502, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (80, 'Linux安装Logstash', '>本文介绍Linux环境如何安装Logstash\n\n本文环境是在腾讯云服务器CentOS7.2搭建的，JDK1.8，Logstash-5.4.2。\n\n## 1.下载Logstash\n官网下载地址：[https://www.elastic.co/downloads/logstash](http://https://www.elastic.co/downloads/logstash)\n\n本人是从本地上传到服务器上的，使用的是5.4.2。\n```\nscp /Users/dalaoyang/downloads/logstash-5.4.2.tar.gz root@ip:/usr/local/tool/logstash-5.4.2.tar.gz\n```\n\n## 2.解压Logstash\n进入上传目录解压Logstash\n```\ntar -zxvf logstash-5.4.2.tar.gz\n```\n\n## 3.测试Logstash\n进入logstash-5.4.2目录\n```\ncd logstash-5.4.2\n```\n这里简单举2个例子测试\n\n### 3.1 简单输出到控制台\n```\nbin/logstash -e \'input { stdin { } } output { stdout {} }\'\n```\n\n如图所示，即为启动成功\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/80/1)\n\n输入dalaoyang,如下所示\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/80/2)\n\n\n### 读取文件输出到Redis\n```\ninput {\n    file {\n        type => \"test_log\"\n        path => [\"/Users/dalaoyang/logs/my.log\"]\n        start_position => \"beginning\"\n        sincedb_path => \"/dev/null\"\n    }\n}\nfilter {\n  if [type] == \'test_log\' {\n     multiline {\n       pattern => \"^%{TIMESTAMP_ISO8601} \"\n       negate => true\n       what => previous\n     }\n  }\n}\noutput {\n    if [type] == \"test_log\" {\n        redis {\n            host => \"ip\"\n            port => \"6379\"\n            data_type => \"list\"\n            key => \"log\"\n            #redis密码\n            password => \"123456\"\n        }\n      #  stdout {codec => rubydebug}\n    }\n}\n```\n\n启动命令 bin/logstash -f 上面配置的文件位置\n比如\n```\nbin/logstash -f logstash.conf\n```\n\n\n安装多行解析插件 logstash-filter-multiline\n```\nlogstash-plugin install logstash-filter-multiline\n```\n\n# 总结\n\n以上全是本人踩坑实践得到的，亲测可用。', 'dalaoyang', '2018-10-19', 684, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (81, 'Vue项目History模式404问题解决', '>本文主要解决Vue项目使用History模式发布到服务器Nginx上刷新页面404问题。（由于每个项目的情况都不尽相同，本方案已经完美解决本在所使用项目，具体情况可能还需要修改。）\r\n\r\n# 1.项目背景分析\r\n\r\n本人是Java后台开发，Vue其实使用也没有多久，只能说简单了解。发现问题的时候其实也一头雾水，第一思想就是百度看别人的思路。\r\n\r\n## 1.1 查看项目打包后文件\r\n\r\n首先看看项目打包后文件内容，看看有没有什么能突破的地方。文件目录如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/81/1)\r\n\r\n打眼一看可以发现，主要的可能就是这个index.html文件，内容如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>系统管理</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"logo.png\">\r\n<link rel=\"shortcut icon\" href=\"logo.png\"></head>\r\n\r\n<body>\r\n  <div id=\"app\"></div>\r\n<script type=\"text/javascript\" src=\"manifest.js?89b5083667173048a500\"></script>\r\n  <script type=\"text/javascript\" src=\"vendor.js?9eae337435ee1b63d5cd\"></script>\r\n  <script type=\"text/javascript\" src=\"index.js?38915745c7ed8b9143db\"></script>\r\n</body>\r\n\r\n</html>\r\n```\r\n\r\n**1.在之前百度的时候看到了一个信息，就是引入js文件使用scr的时候，如果前面带/是绝对路径，在思考是不是这个问题。**\r\n\r\n**2.百度的时候大部分信息都是说修改Nginx配置文件。**\r\n\r\n# 2.问题解决\r\n\r\n既然大致思路都有了，那么就开始尝试去解决一下。\r\n\r\n## 2.1 更改Vue打包配置文件\r\n\r\n修改webpack.config.js文件，这个是Vue-cli打包文件配置，使其打包后让index.html文件引用路径为绝对路径。webpack.config.js内容如下（每个项目打包配置均不同，这个配置仅仅是我使用的项目）：\r\n```\r\nconst resolve = require(\'path\').resolve\r\nconst webpack = require(\'webpack\')\r\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\')\r\nconst url = require(\'url\')\r\nconst publicPath = \'/\'\r\n\r\nmodule.exports = (options = {}) => ({\r\n  entry: {\r\n    vendor: \'./src/vendor\',\r\n    index: \'./src/main.js\'\r\n  },\r\n  output: {\r\n    path: resolve(__dirname, \'dist\'),\r\n    filename: options.dev ? \'[name].js\' : \'[name].js?[chunkhash]\',\r\n    chunkFilename: \'[id].js?[chunkhash]\',\r\n    publicPath: options.dev ? \'/assets/\' : publicPath\r\n  },\r\n  module: {\r\n    rules: [{\r\n        test: /\\.vue$/,\r\n        use: [\'vue-loader\']\r\n      },\r\n      {\r\n        test: /\\.js$/,\r\n        use: [\'babel-loader\'],\r\n        exclude: /node_modules/\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        use: [\'style-loader\', \'css-loader\', \'postcss-loader\']\r\n      },\r\n      {\r\n        test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\r\n        use: [{\r\n          loader: \'url-loader\',\r\n          options: {\r\n            limit: 10000\r\n          }\r\n        }]\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      names: [\'vendor\', \'manifest\']\r\n    }),\r\n    new HtmlWebpackPlugin({\r\n      template: \'src/index.html\',\r\n      favicon: \'src/logo.png\' \r\n    })\r\n  ],\r\n  resolve: {\r\n    alias: {\r\n      \'~\': resolve(__dirname, \'src\')\r\n    },\r\n    extensions: [\'.js\', \'.vue\', \'.json\', \'.css\']\r\n  },\r\n  devServer: {\r\n    host: \'127.0.0.1\',\r\n    port: 8010,\r\n    proxy: {\r\n      \'/api/\': {\r\n        target: \'http://127.0.0.1:8080\',\r\n        changeOrigin: true,\r\n        pathRewrite: {\r\n          \'^/api\': \'\'\r\n        }\r\n      }\r\n    },\r\n    historyApiFallback: {\r\n      index: url.parse(options.dev ? \'/assets/\' : publicPath).pathname\r\n    }\r\n  },\r\n  devtool: options.dev ? \'#eval-source-map\' : \'#source-map\'\r\n})\r\n\r\n```\r\n\r\n再次打包后，查看index.html，内容如下：\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <title>系统管理</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n  <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"logo.png\">\r\n<link rel=\"shortcut icon\" href=\"/logo.png\"></head>\r\n\r\n<body>\r\n  <div id=\"app\"></div>\r\n<script type=\"text/javascript\" src=\"/manifest.js?f7d4b2121bc37e262877\"></script><script type=\"text/javascript\" src=\"/vendor.js?9eae337435ee1b63d5cd\"></script><script type=\"text/javascript\" src=\"/index.js?51954197166dd938b54e\"></script></body>\r\n\r\n</html>\r\n```\r\n\r\n从index.html可以看出已经变成了绝对路径。\r\n\r\n\r\n## 2.2 修改Nginx配置\r\n\r\n修改nginx.conf配置文件，代码如下：\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n\r\n    sendfile        on;\r\n\r\n    keepalive_timeout  65;\r\n\r\n    server {\r\n      listen       80;\r\n      server_name  localhost;\r\n      ## 指向vue打包后文件位置\r\n      root /opt/nginx/dist/;\r\n\r\n      ## 拦截根请求，例如http://localhost\r\n      location / {\r\n            try_files $uri $uri/ /index.html;\r\n      }\r\n\r\n      ## 拦截带有tms-monitor的请求，例如http://localhost/tms-monitor/admin\r\n      location ^~/tms-monitor{\r\n            if (!-e $request_filename) {\r\n                          rewrite ^/(.*) /index.html last;\r\n                          break;\r\n            }\r\n      }\r\n\r\n      #error_page   500 502 503 504  /50x.html;\r\n      location = /50x.html {\r\n          root   html;\r\n      }\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 3.总结\r\n\r\n上述配置完成后，打包Vue项目，重启Nginx再次刷新就不会在有404的现象了。（再次申明：以上只是针对本人所在的项目，不一定使用所有情况。）', 'dalaoyang', '2018-10-30', 386, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (82, 'ELK日志分析方案', '>针对公司项目微服务化，随着项目及服务器的不断增多，决定采用ELK（Elasticsearch+Logstash+Kibana）日志分析平台进行微服务日志分析。\n\n# 1.ELK整体方案\n\n## 1.1 ELK架构图\n\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/82/1)\n\n\n## 1.2 ELK工作流程\n\n1.在微服务服务器上部署Logstash，作为Shipper的角色，对微服务日志文件数据进行数据采集，将采集到的数据输出到Redis消息队列。\n\n2.在另外一台服务器上部署Logstash，作为Indexer的角色，从Redis消息队列中读取数据（可以对数据进行处理），输出到Elasticsearch-Master主节点。\n\n3.Elasticsearch-Master主节点内部与副节点同步数据。（Elasticsearch集群建议3个服务以上奇数）\n\n4.Kibana部署一台服务器内，读取Elasticsearch集群数据，展示Web查询页面，提供数据展示。\n\n\n# 2.消息队列选型\n\n## 2.1 Redis\n在我这个最终方案中，选择了使用Redis作为消息队列进行缓冲，降低Elasticsearch压力，起到削峰作用，主要原因还是由于公司考虑成本问题，日志收集也是只针对我们单个项目组来使用，所以选择了公司现在就已经有的Redis集群进行复用。\n\n## 2.2 Kafka\n最初方案中，在消息队列上选择的是Kafka，毕竟Kafka天生就是做为消息队列的，具体二者的毕竟在这里我就不多说了，百度上一大堆。\n\n\n# 3.安装\n\n这里就不在这里写出来了，提供三个地址仅供参考：\n\n[Linux安装Logstash](https://www.jianshu.com/p/474a83476147)   \n[Linux安装Kibana](https://www.jianshu.com/p/d5fd38bfb0bb)   \n[Linux安装Elasticsearch](https://www.jianshu.com/p/1bf398735dd4)\n\n\n# 4.Logstash配置\n\n## 4.1 log2redis\n\n从日志文件读取到redis\n```\n#从日志文件读取数据\n#file{}\n#type 日志类型\n#path 日志位置\n#            可以直接读取文件（a.log）\n#            可以所有后缀为log的日志（*.log）\n#            读取文件夹下所有文件（路径）\n#start_position 文件读取开始位置 （beginning）\n#sincedb_path 从什么位置读取（设置为/dev/null自动从开始位置读取）\ninput {\n     file {\n        type => \"log\"\n        path => [\"/root/logs/info.log\"]\n        start_position => \"beginning\"\n        sincedb_path => \"/dev/null\"\n     }\n}\n#根据时间戳分隔日志\n#grok 区分日志中得字段\nfilter {\n     multiline {\n       pattern => \"^%{TIMESTAMP_ISO8601} \"\n       negate => true\n       what => previous\n     }\n     #定义数据的格式\n     grok {\n       match => { \"message\" => \"%{DATA:datetime} - %{DATA:logLevel} - %{DATA:serviceName} - %{DATA:ip} - %{DATA:pid} - %{DATA:thread} - %{DATA-msg}\"}\n     }\n}\n#输出数据到Redis\n#host Redis主机地址\n#port Redis端口\n#db Redis数据库编号\n#data_type Redis数据类型\n#key Redis的key\n#password Redis密码\noutput {\n    redis {\n        host => \"ip\"\n        port => \"6379\"\n        db => \"6\"\n        data_type => \"list\"\n        password => \"password\"\n        key => \"test_log\"\n    }\n}\n```\n\n## 4.2 redis2es\n\n从redis读取到es\n```\n#从redis内读取数据\n#host Redis主机ip\n#port Redis端口\n#data_type Redis数据类型\n#batch_count\n#password Redis密码\n#key Redis读取Key\ninput {\n    redis {\n        host => \"ip\"\n        port => \"6379\"\n        db => \"6\"\n        data_type => \"list\"\n        password => \"password\"\n        key => \"test_log\"\n    }\n}\n#数据的输出我们指向了es集群\n#hosts Elasticsearch主机地址\n#index Elasticsearch索引名称\noutput {\n  elasticsearch {\n        hosts => \"ip:9200\"\n        index => \"logs-%{+YYYY.MM.dd}\"\n  }\n}\n```\n\n# 5 其他\n\n其他剩下的就是Es集群和Kibana了，这两个没什么特别值得注意的地方，上网随便搜，一大堆文章。\n\n\n**以上仅仅代表本人项目使用方案，不一定完美适合所有场景，仅供参考。**', 'dalaoyang', '2018-11-01', 810, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (83, 'Jenkins部署码云SpringBoot项目', '>本文介绍jenkins如何从gitee上clone项目，然后使用maven打包并后台启动。\r\n\r\n\r\n\r\n# 1.Jenkins介绍\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/1)\r\n\r\nJenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。 **（以上介绍来源于百度百科）**\r\n\r\n其实通俗来说，Jenkins就是一个自动化部署项目的工具，帮我省去重复的运维工作。\r\n\r\n# 2.环境准备\r\n\r\n本文需要如下几个工具：\r\n\r\n* JDK\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/2)\r\n\r\n* Git\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/3)\r\n\r\n* Maven\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/4)\r\n\r\n以上三种就不在这里介绍安装了，这里我贴出我的环境变量配置仅供参考：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/5)\r\n\r\n* Jenkins\r\n\r\n我的Jenkins是使用如下方式安装:\r\n```\r\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\r\nsudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\r\nsudo yum install jenkins\r\n```\r\n\r\n启动\r\n```\r\nservice jenkins start\r\n```\r\n\r\n然后访问http://${ip}/8080，可以看到jenkins那个小老头，根据自行配置安装插件，其中密码在这里\r\n\r\n```\r\nvi /var/lib/jenkins/secrets/initialAdminPassword\r\n```\r\n\r\n以上都在网上有很多，我在博客中也写过，就不在这里废话太多了。\r\n\r\n# 3.Jenkins工具插件配置\r\n\r\n## 3.1 插件配置\r\n\r\n个人建议，Jenkins第一次进入推荐安装的插件就默认安装就行，省的还需要后续自己安装，当然，如果自己安装的话需要Maven和Git插件。\r\n\r\n## 3.2 工具配置\r\n\r\n* JDK\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/6)\r\n* Git\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/7)\r\n\r\n* Maven\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/8)\r\n\r\n这里就可以用到上面环境准备时需要的截图，这里我也摸索了很久才配置完成。\r\n\r\n# 4.配置项目\r\n\r\n## 4.1 构建自由风格的项目\r\n\r\n新建项目，选择构建自由风格的项目，给项目起个名字，然后点击Ok。\r\n\r\n## 4.2 配置参数化构建过程\r\n\r\n这里我用到了几个参数，因为可能有时需要提前准备好参数在进行构建，如下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/9)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/10)\r\n\r\n* jar_path :本意是准备项目打包后的jar位置，其实这里是Jenkins工作空间\r\n* spring_profile：这个是读取配置文件前缀，比如dev，test，prod\r\n* jar_name：jar包名称\r\n* project_name：项目名称\r\n\r\n\r\n## 4.3 Git配置\r\n\r\n用Git进行将项目Clone下来，配置自己的用户密码，Repository URL配置git地址（这里提供的地址是私密项目，项目没什么特别的，就是简单SpringBoot项目，不用尝试了，用自己项目就可以）\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/11)\r\n\r\n## 4.4 配置Build\r\n\r\n这里选择执行Shell，内容如下：\r\n```\r\nmvn clean install -Dmaven.test.skip=true\r\necho $spring_profile $jar_path $jar_name\r\ncd /usr/local/shell/\r\n./stop.sh $jar_name\r\necho \"Execute shell Finish\"\r\n./startup.sh $spring_profile $jar_path $jar_name $project_name\r\n```\r\n\r\n如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/12)\r\n\r\n在上面执行的Shell里面还用到了两个Shell，分别是stop.sh，实质就是找到jar执行的pid，然后kill，具体内容如下：\r\n```\r\njar_name=${1}\r\necho \"Stopping\" ${jar_name}\r\npid=`ps -ef | grep ${jar_name} | grep -v grep | awk \'{print $2}\'`\r\nif [ -n \"$pid\" ]\r\nthen\r\n   echo \"kill -9 的pid:\" $pid\r\n   kill -9 $pid\r\nfi\r\n```\r\n\r\nstartup.sh内容如下，具体可以根据情况修改:\r\n```\r\nspring_profile=${1}\r\njar_path=${2}\r\njar_name=${3}\r\nproject_name=${4}\r\ncd ${jar_path}/${project_name}/target/\r\necho ${jar_path}/${project_name}/target/\r\necho nohup java -jar ${jar_name} &\r\nBUILD_ID=dontKillMe nohup java -jar ${jar_name} --spring.profiles.active=${spring_profile} &\r\n```\r\n\r\n# 5 测试运行\r\n\r\n## 5.1 运行\r\n\r\n点击运行后，如图所示，刚刚预配置的参数都可以看到并可以修改，这里我们用默认配置好的就可以。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/13)\r\n\r\n然后点击运行就可以，当时遇到了一个插曲，我的Maven是安装成功的，但是Jenkins内无法使用，报错mvn：command not found，这里我解决的方式是将mvn命令也指向/usr/bin/mvn，如下：\r\n```\r\nln -s /usr/local/apache-maven-3.5.4/bin/mvn /usr/bin/mvn\r\n```\r\n\r\n访问效果其实就是我的博客，如图所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/83/14)\r\n\r\n# 6 总结\r\n\r\n总体过程坑其实还是很多的，毕竟没有使用过，但是没有什么特别棘手的问题，总是出现不同的问题，有需要可以与我一起交流学习。', 'dalaoyang', '2018-11-06', 683, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (84, 'Jenkins部署码云SpringBoot项目到远程服务器', '>本文是上一篇文章的后续，上一篇只是利用Jenkins部署项目到本地，并启动，本文是将项目部署到远程服务器并执行。\r\n\r\n\r\n# 1.环境准备\r\n\r\n## 1.1 安装插件\r\n\r\n上一篇文章已经介绍了需要安装的应用及插件，这一篇还需要2个插件，分别是如下插件：\r\n\r\n* 	Git Parameter Plug-In ：这个插件用于获取git上信息，如分支和标签\r\n* 	Publish Over SSH ：这个插件用于将本地文件发送到远程服务器\r\n\r\n\r\n## 1.2 环境配置\r\n\r\n这里需要在 系统管理->系统设置->Publish over SSH配置远程部署的服务器，如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/1)\r\n\r\n其中参数配置如下：\r\n\r\n* Passphrase :远程服务器密码\r\n* Name  :这个就是给远程连接起个名\r\n* Hostname :远程服务器地址\r\n* Username :远程服务器用户名\r\n* Remote Directory :上传文件路径\r\n\r\n都配置完成后可以点击下面Test Configuration进行测试，如果提示Success则证明配置成功。\r\n\r\n# 2.项目配置\r\n\r\n这里大致分为四个部分\r\n\r\n## 2.1 参数\r\n\r\n首先是参数，基本上和上一篇差不多，新增了几个，有一个和之前的不一样，使用的Git Parameter，这里选择的分支（branch），如下图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/2)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/3)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/4)\r\n\r\n## 2.2 Git\r\n\r\ngit没什么好说的，和之前一样，见下图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/5)\r\n## 2.3 Build Environment\r\n\r\n这里配置了要传到对应服务器的东西，以及需要使用的脚本，见下图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/6)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/7)\r\n\r\nExec command脚本代码如下，这里也没什么好说的，进入对应目录，将脚本赋予权限，然后执行。\r\n```\r\ncd ${jar_path}/${project_name}/;\r\nchmod 777 start_${project_name}.sh;\r\n./start_${project_name}.sh ${jar_path} ${jar_name} ${spring_profile} ${check_url} ${project_name} ${jdk_path}\r\n```\r\n## 2.4 Build\r\n\r\n这里就是将项目打包，然后把服务器上shell脚本复制到打包后文件夹，代码如下：\r\n```\r\nmvn clean install -Dmaven.test.skip=true;\r\ncp /usr/local/shell/start_jar.sh start_${project_name}.sh;\r\n```\r\n\r\n如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/8)\r\n\r\n# 3.测试运行\r\n\r\n运行前，展示一下远程上传的脚本，脚本内容并非本人自己写的，借鉴了其他组的脚本：\r\n```\r\n#!/bin/bash\r\n\r\n#export BUILD_ID=dontKillMe这一句很重要，这样指定了，项目启动之后才不会被Jenkins杀掉。\r\nexport BUILD_ID=dontKillMe\r\n\r\njar_path=${1}\r\njar_name=${2}\r\nspring_profile=${3}\r\ncheck_url=${4}\r\nproject_name=${5}\r\njdk_path=${6}\r\n\r\nif  [ ! -n \"${jar_path}\" ] ;then\r\n    echo \"参数 1. jar_path 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${jar_name}\" ] ;then\r\n    echo \"参数 2. jar_name 为空\"\r\n    exit 1\r\nfi\r\n\r\nif  [ ! -n \"${spring_profile}\" ] ;then\r\n    echo \"参数 3. spring_profile 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${check_url}\" ] ;then\r\n    echo \"参数 4. check_url 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${project_name}\" ] ;then\r\n    echo \"参数 5. project_name 为空\"\r\n    exit 1\r\nfi\r\nif  [ ! -n \"${jdk_path}\" ] ;then\r\n    echo \"参数 6. jdk_path 为空\"\r\n    exit 1\r\nfi\r\n\r\n#Jenkins中编译好的jar位置\r\ndeploy_path=${jar_path}/${project_name}/\r\n\r\n#服务检查\r\ncheck_attempts=20\r\ncheck_timeout=6\r\n\r\n#进入工作目录，log会打在该目录下\r\ncd ${deploy_path}\r\n\r\necho \'deploy_path\' ${deploy_path}\r\n#获取运行编译好的进程ID，便于我们在重新部署项目的时候先杀掉以前的进程\r\npid=$(cat ${deploy_path}/pid)\r\n\r\n#杀掉以前可能启动的项目进程\r\nkill -9 ${pid}\r\n\r\n#启动jar，指定SpringBoot的profiles为test，后台启动\r\nnohup ${jdk_path} -jar -Xms256m -Xmx256m -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./logs -Dspring.profiles.active=${spring_profile} ${deploy_path}/${jar_name} >/dev/null &\r\n\r\n#将进程ID存入到pid文件中\r\necho $! > ${deploy_path}/pid\r\n\r\n#服务启动检测\r\nonline=false\r\necho \"检测服务启动状态\"\r\nfor (( i=1; i<=${check_attempts}; i++ ))\r\ndo\r\n  code=`curl -sL --connect-timeout 20 --max-time 30 -w \"%{http_code}\\\\n\" \"${check_url}\" -o /dev/null`\r\n  echo \"服务检测返回结果：$code\"\r\n  if [ \"${code}\" = \"200\" ]; then\r\n    echo \"已检测到服务：${check_url}\"\r\n    sleep 10\r\n    online=true\r\n    break\r\n  else\r\n    echo \"未检测到服务，等待 ${check_timeout} 秒后重试\"\r\n    sleep ${check_timeout}\r\n  fi\r\ndone\r\nif $online; then\r\n  echo \"服务检查结束，服务启动正常\"\r\n  exit 0\r\nelse\r\n  echo \"服务检查结束，服务启动失败\"\r\n  exit 1\r\nfi\r\n\r\n```\r\n\r\n在jenkins部署项目，如下图，对应参数，分支只有一个master。这里的测试地址我选择的是项目首页，如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/9)\r\n\r\n点击Build按钮后，等待处理即可，可能由于两个服务器间传输文件比较慢的原因相对时间不是很快。执行结束后见下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/10)\r\n然后访问[http://47.98.109.195:8888/](http://47.98.109.195:8888/)可以看到下图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/84/11)\r\n\r\n\r\n\r\n# 4.总结\r\n\r\n总体感觉jenkins使用就是一个熟悉了就感觉没那么难了，个人感觉这个工具就是需要慢慢熟悉，一开始是最难入手的。', 'dalaoyang', '2018-11-07', 652, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (85, 'about', '<h1>关于本人</h1>\r\n							<p>90后码农，性别男，爱好小仙女。</p>\r\n							<p>猫奴一枚。同时也是一个养猪↑大户。</p>\r\n							<p>曾经帮一个100斤的仙女成功增重接近30斤。</p>\r\n							<p>家里有一只大肥猫，特别粘人的大肥猫。</p>\r\n							<p>休息有时看看书，有时玩玩吃鸡。</p>\r\n							<p>梦想是写一本书。</p>\r\n							<br/><br/>\r\n\r\n							<h2>已读书籍：</h2>\r\n							<p>《Spring Cloud与Docker微服务架构实战》</p>\r\n							<p>《Spring Cloud微服务实战》</p>\r\n							<p>《深入理解Spring Cloud 与微服务构建》</p>\r\n							<p>《腾讯传》</p>\r\n							<p>《ELK Stack 权威指南》</p>\r\n							<p>《深入实践Spring Boot》</p>\r\n							<p>《SpringBoot揭秘 快速构建微服务体系》</p>\r\n							<p>《RocketMQ实战与源码解析》</p>\r\n							<p>《如何高效学习》</p>\r\n\r\n<p>《SpringCloud微服务全栈分析与案例解析》</p>\r\n<p>《重新定义SpringCloud实战》</p>\r\n     \r\n<p>《Jenkins权威指南》</p>\r\n<p>《Docker技术入门与实践》</p>\r\n<p>《分布式消息中间件实践》</p>\r\n							<br/><br/>\r\n\r\n                                                        <h2>正在阅读书籍：</h2>\r\n                                                        <p>《亿级流量网站架构核心技术》</p>\r\n                                                        <p>《深入理解JAVA虚拟机》</p>\r\n                                                       \r\n                                                        <p>《码出高效》</p>\r\n<p>《深入理解Kafka：核心设计与实践原理》</p>\r\n<p>《RabbitMQ实战指南》</p>\r\n                                                        <br/><br/>\r\n\r\n							<h2>近期钻研重心：</h2>\r\n							<p>Docker</p>\r\n<p>Redis</p><p>RabbitMQ</p><p>RocketMQ</p><p>Kafka</p>\r\n							<br/><br/>\r\n\r\n                                                        <hr>\r\n\r\n							<h2>网站使用技术介绍：</h2>\r\n							<p>SpringBoot 1.5.9</p>\r\n							<p>Mybatis 1.3.1</p>\r\n							<p>Nginx 1.13.7</p>\r\n							<p>Mysql</p>\r\n							<p>Thymeleaf</p>\r\n							<p>Spring Cache</p>\r\n							<p>Bootstrap</p>\r\n							<p>JQuery</p>\r\n\r\n\r\n							<br/><br/>\r\n							<h2>更新历史：</h2>\r\n                                                        <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2019-06-02</p>\r\n							    <p>新增google统计</p>\r\n							    <p>新增sitemap定时任务</p>\r\n							</div>\r\n                                                        <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2019-05-14</p>\r\n							    <p>去掉畅言一切功能，以后在也不用了，恶心。</p>\r\n							    <p>留言改为gitalk。</p>\r\n							</div>\r\n                                                       <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-11-16</p>\r\n							    <p>内部系统优化。</p>\r\n							</div>\r\n                                                       <div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-11-08</p>\r\n							    <p>about页面新增阅读书籍部分。</p>\r\n							</div>\r\n							<div>\r\n							    <p><i class=\"fa fa-clock-o\"></i>2018-05-31</p>\r\n							    <p>删除即时聊天插件。</p>\r\n							</div>\r\n							<div>\r\n								<p><i class=\"fa fa-clock-o\"></i>2018-06-01</p>\r\n								<p>新增缓存。</p>\r\n							</div>\r\n							<div>\r\n								<p><i class=\"fa fa-clock-o\"></i>2018-06-13</p>\r\n								<p>修改文章详情页样式。</p>\r\n							</div>\r\n							<br/><br/>', 'dalaoyang', '2018-11-08', 5, 'Y', '1', 'N');
INSERT INTO `article_info` VALUES (86, 'Linux生成私钥和公钥免密连接', '>本文介绍Linux系统生成私钥和公钥进行免密连接，内容比较简单，阅读需要3分钟。\r\n\r\n\r\n# 1.大致流程\r\n\r\n有时需要从服务器A免密连接到服务器B，这时需要在服务器A生成私钥和公钥，大致过程其实就2步。\r\n\r\n## 1.1 在服务器A生成公钥和私钥\r\n在服务器A上输入如下命令：\r\n```\r\nssh-keygen -t rsa\r\n```\r\n\r\n过程中按三次回车，执行结束如下图:\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/86/1)\r\n\r\n然后我们进入/root/.ssh/文件夹，查看文件夹的内容，如下所示：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/86/2)\r\n\r\n其中 id_rsa为私钥 id_rsa.pub为公钥，接下来打开id_rsa.pub，将内容复制。\r\n## 1.2 在服务器B配置服务器A生成的公钥\r\n\r\n打开服务器B，将刚刚在服务器A内复制的内容追加到/root/.ssh/authorized_keys内，到这里没有特殊情况就配置成功了。\r\n\r\n## 1.3 意外情况\r\n\r\n可能设置完成后还是无法免密登录，那么可以远程连接时加入-vvv在登录时打印日志信息，如下\r\n```\r\nssh root@47.98.109.195 -vvv\r\n```\r\n\r\n在配置的时候遇到过权限不足，在服务器B上将authorized_keys赋予权限\r\n\r\nchmod 700 /root/.ssh/authorized_keys\r\n\r\n# 2 总结\r\n\r\n大致过程很简单，也没遇到什么神奇的坑，主要用于结合jenkins免密登录发布jar。', 'dalaoyang', '2018-11-08', 238, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (87, 'Linux下使用GoAccess监控Nginx访问日志', '>本文介绍Nginx使用GoAccess查看Nginx访问日志。\r\n\r\n最近在看极客时间-《Nginx核心知识一百讲》的视频，了解到GoAccess监控工具，所以最近对这个工具研究了一下，故写此文章。\r\n\r\n# 1.GoAccess简介\r\n\r\nGoAccess是一个开源的实时网络日志分析器和交互式查看器，可以在Linux系统或通过浏览器的终端中运行。它为需要动态可视化服务器报告的系统管理员提供快速且有价值的HTTP统计信息。\r\n\r\n官网地址：[https://goaccess.io/](https://goaccess.io/)\r\n\r\n官网首页：\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/1)\r\n\r\n特征页（使用谷歌浏览器翻译），感觉这里的翻译大致都可以理解，我就不一条一条写出来了。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/2)\r\n\r\n# 2.安装GoAccess\r\n\r\n官方文档下载地址：[https://goaccess.io/download](https://goaccess.io/download)\r\n\r\n如图：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/3)\r\n\r\n首先安装GoAccess依赖，已经安装请忽略。\r\n\r\nncurses-devel：\r\n\r\n```\r\nyum install ncurses-devel\r\n```\r\n\r\ntokyocabinet-devel：\r\n```\r\nyum install tokyocabinet-devel\r\n```\r\n\r\nopenssl-devel：\r\n```\r\nyum install openssl-devel\r\n```\r\n\r\ngeoip-devel：\r\n```\r\nyum install GeoIP-devel.x86_64\r\n```\r\n\r\n然后就跟着官网步骤来就可以了，如下：\r\n下载GoAccess\r\n```\r\nwget https://tar.goaccess.io/goaccess-1.2.tar.gz\r\n```\r\n解压\r\n```\r\ntar -xzvf goaccess-1.2.tar.gz\r\n```\r\n进入目录\r\n```\r\ncd goaccess-1.2 /\r\n```\r\n生成 Makefile，为下一步做准备\r\n```\r\n./configure --enable-utf8 --enable-geoip = legacy\r\n```\r\n编译\r\n```\r\nmake\r\n```\r\n安装\r\n```\r\nmake install\r\n```\r\n\r\n# 3.使用\r\n\r\n这里参考陶辉在课程中使用的命令，如下\r\n```\r\ngoaccess /opt/nginx/logs/access.log -o /opt/nginx/goaccess/report.html --real-time-html --time-format=\'%H:%M:%S\' --date-format=\'%d/%b/%Y\' --log-format=COMBINED \r\n```\r\n\r\n其中/opt/nginx/logs/access.log为Nginx日志位置，/opt/nginx/goaccess/report.html为生成页面位置，COMBINED指定默认文件格式，real-time-html实时html。\r\n\r\n在Nginx中对应server内加入如下配置：\r\n``` \r\nlocation /report.html {\r\n       alias /opt/nginx/goaccess/report.html;\r\n}\r\n```\r\n\r\n重启Nginx，访问localhost:8080/report.html可以看到如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/87/4)\r\n\r\n\r\n# 4.总结\r\n\r\n工具含有的功能很强大，可以结合所在场景进行实时分析。', 'dalaoyang', '2018-11-09', 405, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (88, 'Linux安装RocketMQ', '>本文介绍Linux安装RocketMQ。\r\n\r\n\r\n# 1.RocketMQ简介\r\n\r\nRocketMQ是阿里巴巴中间件开发的分布式消息系统，曾经经历过很多阿里巴巴大型项目的实际检验。在去年已经正式捐献给Apache开源基金会，成为孵化项目。今年正式升级成为了apache的顶级项目。\r\n\r\nRocketMQ官网地址为：[http://rocketmq.apache.org/](http://rocketmq.apache.org/)，感兴趣的可以多多查看官网文档。\r\n\r\n# 2.准备工作\r\n\r\n## 2.1 安装环境\r\n\r\n本文所安装的RocketMQ为4.2.0版本，Linux系统版本为CentOS 7.2，安装目录为/usr/local/software/。\r\n\r\n## 2.2 准备工具\r\n\r\n### 1.Java\r\n\r\nRocketMQ是使用Java开发的，所以需要在Linux系统内安装Java环境。\r\n\r\n### 2.Maven\r\n\r\n项目下载下来之后需要使用Maven编译，所以需要提前安装。\r\n\r\n# 2.安装RocketMQ\r\n\r\n步骤大致分为如下几步：\r\n\r\n## 2.1 下载RocketMQ\r\n\r\n```\r\nwget https://github.com/apache/rocketmq/archive/rocketmq-all-4.2.0.tar.gz\r\n```\r\n\r\n## 2.2 解压文件\r\n\r\n```\r\ntar -zxvf rocketmq-all-4.2.0.tar.gz\r\n```\r\n\r\n## 2.3 编译项目\r\n\r\n```\r\nmvn -Prelease-all -DskipTests clean install -U\r\n```\r\n\r\n## 2.4 进入启动目录\r\n\r\n```\r\ncd /usr/local/software/rocketmq-rocketmq-all-4.2.0/distribution/target/apache-rocketmq/bin\r\n```\r\n\r\n其实这一步可以省略，可以在环境变量配置rocketmq全局变量，编辑/etc/profile加入如下代码：\r\n\r\n```\r\nexport rocketmq=/usr/local/software/rocketmq-rocketmq-all-4.2.0/distribution/target/apache-rocketmq\r\nexport PATH=$PATH:$rocketmq/bin\r\n```\r\n\r\n修改后不要忘记使用如下命令刷新配置：\r\n\r\n```\r\nsource /etc/profile\r\n```\r\n\r\n## 2.5 启动Nameserver，其中/usr/local/logs/rocketmqlogs/mqnamesrv.log为RocketMQ日志文件\r\n\r\n```\r\nnohup sh mqnamesrv >/usr/local/logs/rocketmqlogs/mqnamesrv.log 2>&1 &\r\n```\r\n\r\n## 2.6 启动Broker\r\n\r\n```\r\nnohup sh mqbroker -n localhost:9876 >/usr/local/logs/rocketmqlogs/broker.log 2>&1 &\r\n```\r\n\r\n# 3.安装问题\r\n\r\n在本人安装过程中只遇到了一个问题，就是内存分配不够，修改runserver.sh和runbroker.sh两个文件的如下位置：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/1)\r\n\r\n\r\n# 4.可视化管理页面安装\r\n\r\n可视化页面可以到GitHub上下载，下载完成后进入如图所示位置：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/2)\r\n\r\n使用命令编译，如下\r\n\r\n```\r\nmvn clean package -Dmaven.test.skip=true\r\n```\r\n\r\n然后会生成rocketmq-console-ng-1.0.0.jar，直接运行即可，启动后监控页面如图所示\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/88/3)\r\n\r\n\r\n# 5.总结\r\n\r\n以上安装都是经过本人亲测可用的，安装过程还是比较简单的，没有太多问题。', 'dalaoyang', '2018-12-23', 284, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (89, 'Linux安装Kafka', '>本文介绍Linux安装Kafka。\r\n\r\n\r\n# 1.Kafka简介\r\n\r\nKafka也是开源与Apache开源基金会的项目，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/89/1)\r\n\r\n在百度百科是这样介绍的：\r\n\r\n**Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。**\r\n\r\nKafka官网地址为：[http://kafka.apache.org/](http://kafka.apache.org/)，感兴趣的可以多多查看官网文档。\r\n\r\n# 2.准备工作\r\n\r\n## 2.1 安装环境\r\n\r\n本文所安装的Kafka为2.10版本，Linux系统版本为CentOS 7.2，使用Zookeeper是Kafka自带的，安装目录为/usr/local/software/。\r\n\r\n## 2.2 准备工具\r\n\r\n### 1.Java\r\n\r\nKafka是依赖Java环境运行，所以需要在Linux系统内安装Java环境。\r\n\r\n\r\n# 2.安装Kafka\r\n\r\n步骤大致分为如下几步：\r\n\r\n## 2.1 下载Kafka\r\n\r\n```\r\nwget http://labfile.oss.aliyuncs.com/courses/859/kafka_2.10-0.10.2.1.tgz\r\n```\r\n\r\n## 2.2 解压Kafka\r\n\r\n```\r\ntar -zxvf kafka_2.10-0.10.2.1.tgz \r\n```\r\n\r\n## 2.3 进入配置文件目录\r\n\r\n```\r\ncd /usr/local/software/kafka_2.10-0.10.2.1/config\r\n```\r\n\r\n## 2.4 修改配置文件server.properties，添加下面内容：\r\n\r\n```\r\nbroker.id=0\r\nport=9092 #端口号\r\nhost.name=172.30.0.9 #服务器IP地址，修改为自己的服务器IP\r\nlog.dirs=/usr/local/logs/kafka #日志存放路径，上面创建的目录\r\nzookeeper.connect=localhost:2181 #zookeeper地址和端口，单机配置部署，localhost:2181\r\n```\r\n\r\n## 2.5 编写启动脚本\r\n\r\n```\r\nvi kafkastart.sh\r\n```\r\n\r\n```\r\n#启动zookeeper\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/zookeeper-server-start.sh /usr/local/software/kafka_2.10-0.10.2.1/config/zookeeper.properties &\r\n#等3秒后执行\r\nsleep 3 \r\n#启动kafka\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/kafka-server-start.sh /usr/local/software/kafka_2.10-0.10.2.1/config/server.properties &\r\n```\r\n\r\n## 2.6 编写关闭脚本 \r\n\r\n```\r\nvi kafkastop.sh\r\n```\r\n\r\n```\r\n#关闭zookeeper\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/zookeeper-server-stop.sh /usr/local/software/kafka_2.10-0.10.2.1/config/zookeeper.properties &\r\n#等3秒后执行\r\nsleep 3 \r\n#关闭kafka\r\n/usr/local/software/kafka_2.10-0.10.2.1/bin/kafka-server-stop.sh /usr/local/software/kafka_2.10-0.10.2.1/config/server.properties &\r\n```\r\n\r\n## 2.7 启动脚本，关闭脚本赋予权限\r\n\r\n```\r\nchmod 777 kafkastart.sh\r\n```\r\n\r\n```\r\nchmod 777 kafkastop.sh\r\n```\r\n\r\n# 3.安装问题\r\n\r\n安装Kafka过程中没有遇到太大的问题，一路输入就通过了。\r\n\r\n\r\n# 4.可视化管理页面安装\r\n\r\nkafka官网地址：[https://github.com/linkedin/kafka-monitor](https://github.com/linkedin/kafka-monitor)，运行比较简单，只是一个可执行jar（KafkaOffsetMonitor-assembly-0.2.1.jar）。\r\n\r\n## 4.1 编写启动脚本\r\n\r\n```\r\njava -Xms128M -Xmx128M -Xss1024K -XX:PermSize=128m -XX:MaxPermSize=128m -cp KafkaOffsetMonitor-assembly-0.2.1.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb --zk localhost:2181 --port 8787 --refresh 10.seconds --retain 7.days 1>/usr/local/software/kafka-monitor/stdout.log 2>/usr/local/software/kafka-monitor/stderr.log &\r\n```\r\n\r\n# 5.总结\r\n\r\n以上安装都是经过本人亲测可用的，安装过程还是比较简单。', 'dalaoyang', '2018-12-23', 231, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (90, 'Nginx实现负载均衡', '>本篇文章介绍Nginx实现负载均衡，本文使用Nginx和两个SpringBoot简单Web应用实现。\n\n# 1.准备工作。\n\n结合本文场景，需要安装Nginx和Java环境（运行SpringBoot项目）。\n\n**1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。**\n\n**1.2 由于只是测试，SpringBoot只是映射了根路径，端口分别是10001和10002，分别返回demo1和demo2字符串作为区分。**\n\n# 2.Nginx负载均衡的集中方式介绍\n\n## 2.1 轮询\n\n轮询方式是Nginx负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务Down掉，可以自动剔除，如下配置后轮训10001服务和10002服务。\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001;\n       server    localhost:10002;\n}\n```\n\n## 2.2 权重\n\n指定每个服务的权重比例，weight和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能，如下配置后10002服务的访问比率会是10001服务的二倍。\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.3 iphash\n\n每个请求都根据访问ip的hash结果分配，经过这样的处理，每个访客固定访问一个后端服务，如下配置（ip_hash可以和weight配合使用）。\n\n```\nupstream  dalaoyang-server {\n       ip_hash; \n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.4 最少连接\n\n将请求分配到连接数最少的服务上。\n\n```\nupstream  dalaoyang-server {\n       least_conn;\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n}\n```\n\n## 2.5 fair\n\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\n\n\n```\nupstream  dalaoyang-server {\n       server    localhost:10001 weight=1;\n       server    localhost:10002 weight=2;\n       fair;  \n}\n```\n\n# 3.Nginx配置\n\n\n以轮训为例，如下是nginx.conf完整代码。\n\n```\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n   upstream  dalaoyang-server {\n       server    localhost:10001;\n       server    localhost:10002;\n   }\n\n   server {\n       listen       10000;\n       server_name  localhost;\n\n       location / {\n        proxy_pass http://dalaoyang-server;\n        proxy_redirect default;\n      }\n\n    }\n\n}\n```\n\n# 4.测试\n\n重启nginx，第一次访问[http://localhost:10000](http://localhost:10000)如图所示，\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-d1db4fc6f35b5738?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在次访问如图所示\n\n\n![image](http://upload-images.jianshu.io/upload_images/9953332-2589e3e1aa9412bc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果要修改负载均衡算法修改对应upstream模块即可。', 'dalaoyang', '2018-12-29', 275, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (91, 'Nginx实现动静分离', '>本文利用Nginx实现简单动静分离，本文使用Nginx和一个SpringBoot简单Web应用实现。\r\n\r\n\r\n# 1.准备工作。\r\n\r\n结合本文场景，需要安装Nginx和Java环境（运行SpringBoot项目）。\r\n\r\n1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。\r\n\r\n1.2 本文SpringBoot使用了Thymeleaf模板，项目端口号为8888。\r\n\r\n1.3 在本地/Users/dalaoyang/Downloads/static文件内存放了jquery.js\r\n\r\n# 2.什么是动静分离？\r\n\r\n在弄清动静分离之前，我们要先明白什么是动，什么是静。\r\n\r\n在Web开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指HTML，JavaScript，CSS，img等文件。\r\n\r\n一般来说，都需要将动态资源和静态资源分开，将静态资源部署在Nginx上，当一个请求来的时候，如果是静态资源的请求，就直接到nginx配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。\r\n\r\n# 3.项目配置\r\n\r\n修改SpringBoot应用启动类，做简单跳转，使访问根路径可以跳转到index.html，如下代码所示。\r\n\r\n```\r\n@SpringBootApplication\r\n@Controller\r\npublic class DemoApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(DemoApplication.class, args);\r\n	}\r\n\r\n	@GetMapping(\"/\")\r\n	public String index(){\r\n		return \"index\";\r\n	}\r\n}\r\n```\r\n\r\nindex.html代码如下所示，注意引入jquery.js，在引用成功会使用jquery给div赋值，代码如下所示。\r\n\r\n```\r\n<!DOCTYPE html>\r\n<!--解决th报错 -->\r\n<html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>thymeleaf</title>\r\n</head>\r\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\r\n<body>\r\n<h1>这是一个静态页面</h1>\r\n<div id=\"test_div\"></div>\r\n</body>\r\n\r\n<script type=\"text/javascript\">\r\n    $(\'#test_div\').html(\'引用jquery.js成功\');\r\n</script>\r\n\r\n</html>\r\n\r\n\r\n```\r\n\r\n项目结构如下所示，可以看到没有jquery.js，我们要做的就是使用Nginx来访问jquery.js。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/91/1)\r\n\r\n\r\n# 4.Nginx配置\r\n\r\n修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。\r\n\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n\r\n   server {\r\n       listen       10000;\r\n       server_name  localhost;\r\n      \r\n      #拦截后台请求\r\n      location / {\r\n        proxy_pass http://localhost:8888;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n      }\r\n\r\n      #拦截静态资源\r\n      location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ {\r\n        root /Users/dalaoyang/Downloads/static;\r\n       }\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 5.测试\r\n\r\n启动SpringBoot应用，启动Nginx。\r\n\r\n在浏览器访问[http://localhost:10000/](http://localhost:10000/)，可以看到如下图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/91/2)\r\n\r\n\r\n通过图中红框内容都可以看出来引用静态资源成功了。\r\n\r\n\r\n----------\r\n\r\n', 'dalaoyang', '2018-12-29', 355, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (92, 'Nginx实现URL重写', '>本文利用Nginx实现URL重写，本文使用Nginx与静态页面配合重写URL。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/92/1)\r\n\r\n# 1.准备工作。\r\n\r\n结合本文场景，需要安装Nginx。\r\n\r\n1.1 关于Linux系统安装Nginx可以参考我的文章---([传送门](https://www.dalaoyang.cn/article/55))。\r\n\r\n\r\n\r\n\r\n\r\n# 2.什么是URL重写？\r\n\r\nURL重写是指将一个URL请求重新写成网站可以处理的另一个URL的过程。这样说可能不是很好理解，举个例子来说明一下，在开发中可能经常遇到这样的需求，比如通过浏览器请求的http://localhost:8080/getUser?id=1，但是需要通过SEO优化等等原因，需要把请求的地址重写为http://localhost:8080/getUser/1这样的URL，从而符合需求或者更好的被网站阅读。\r\n\r\n当遇到这种请求的时候，就需要使用到UrlRewrite重写或者使用一些网关路由，如SpringCloud的Gateway，Zuul，又或者是Nginx来实现这个功能。\r\n\r\n本文介绍Nginx实现URL重写。\r\n\r\n# 3.使用介绍\r\n\r\n在Nginx中使用URL重写需要使用到一个指令-----rewrite，其语法如下：\r\n\r\n```\r\nrewrite regex replacement [flag]; \r\n```\r\n\r\n* regex ：可以使用正则或者字符串来表示相匹配的地址。\r\n* replacement：可以表示重定向的地址。\r\n* flag ：flag标志的作用是用于控制当匹配到对应的rewrite规则后是否继续检查后续的rewrite规则。\r\n\r\nflag值为如下四种，分别是：\r\n\r\n* last：停止处理当前的rewrite指令集，而后通过重写后的规则重新发起请求，浏览器地址栏URL地址不变。\r\n* break：和break指令一样，都是停止处理当前上下文中的其他重写模块指令。\r\n* redirect：如果替换字符串不以“ http://”，“ https://”或“ $scheme” 开头，返回带有302代码的临时重定向，浏览器地址会显示跳转后的URL地址。\r\n* permanent：返回301代码的永久重定向，浏览器地址栏会显示跳转后的URL地址。\r\n\r\n例如：\r\n\r\n```\r\nserver {\r\n    ...\r\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\r\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\r\n    return  403;\r\n    ...\r\n}\r\n```\r\n\r\n另外还可以根据if来判断，指令如下：\r\n\r\n```\r\nif (condition) { ... }\r\n```\r\n\r\n其中condition是条件，如果为true，则执行大括号中的内容：\r\n* 使用“ =”和“ !=”运算符比较变量和字符串;\r\n* 使用“ ~”（对于区分大小写的匹配）和“ ~*”（对于不区分大小写的匹配）运算符，将变量与正则表达式进行匹配。正则表达式可以包含可供以后在$1.. $9变量中重用的捕获。负操作符“ !~”和“ !~*”也可用。如果正则表达式包含“ }”或“ ;”字符，则整个表达式应包含在单引号或双引号中。\r\n* 使用“ -f”和“ !-f”运算符检查文件是否存在;\r\n* 使用“ -d”和“ !-d”运算符检查目录是否存在;\r\n* 使用“ -e”和“ !-e”运算符检查文件，目录或符号链接是否存在;\r\n* 使用“ -x”和“ !-x”运算符检查可执行文件。\r\n\r\n例如：\r\n```\r\nif ($http_user_agent ~ MSIE) {\r\n    rewrite ^(.*)$ /msie/$1 break;\r\n}\r\n\r\nif ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {\r\n    set $id $1;\r\n}\r\n\r\nif ($request_method = POST) {\r\n    return 405;\r\n}\r\n\r\nif ($slow) {\r\n    limit_rate 10k;\r\n}\r\n\r\nif ($invalid_referer) {\r\n    return 403;\r\n}\r\n```\r\n\r\n\r\n# 4.Nginx配置\r\n\r\n本文例子只是将请求跳转到本人的博客首页http://www.dalaoyang.cn/，配置如下：\r\n\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n    worker_connections  1024;\r\n}\r\n\r\nhttp {\r\n\r\n   server {\r\n       listen       10000;\r\n       server_name  localhost;\r\n\r\n       #如果host不是dalaoyang.cn，则301到www.dalaoyang.cn中\r\n       if ( $host != \"dalaoyang.cn\" ){\r\n         rewrite ^/(.*)$ https://www.dalaoyang.cn/$1 last;\r\n       }\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 5.测试\r\n\r\n测试就比较简单了，在浏览器访问http://localhost:10000/about，会自动跳转到https://www.dalaoyang.cn/about，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/92/2)\r\n\r\n# 6.总结\r\n\r\n大部分内容都是参考自Nginx官网来学习的，官网的例子都很详细。\r\n\r\n\r\n参考自Nginx官网ngx_http_rewrite_module模块官方API---[传送门](http://nginx.org/en/docs/http/ngx_http_rewrite_module.html)。', 'dalaoyang', '2019-01-14', 279, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (93, 'SpringBoot使用Nacos配置中心', '>本文介绍SpringBoot如何使用阿里巴巴Nacos做配置中心。\r\n\r\n# 1.Nacos简介\r\n\r\nNacos是阿里巴巴集团开源的一个易于使用的平台，专为动态服务发现，配置和服务管理而设计。它可以帮助您轻松构建云本机应用程序和微服务平台。\r\n\r\nNacos基本上支持现在所有类型的服务，例如，Dubbo / gRPC服务，Spring Cloud RESTFul服务或Kubernetes服务。\r\n\r\n尤其是使用Eureka注册中心的，并且担心Eureka闭源的开发者们，可以将注册中心修改为Nacos，本文主要介绍Nacos配置中心的使用。\r\n\r\nNacos官网如下图所示，官网地址[https://nacos.io/zh-cn/](https://nacos.io/zh-cn/)\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/1)\r\n\r\n\r\n# 2.Nacos安装\r\n\r\nNacos安装可以采用如下两种方式：\r\n\r\n* 1.官网下载稳定版本解压使用。\r\n* 2.下载源代码编译使用，目前最新的版本是0.8.0版本。\r\n\r\n本文简单介绍一下第二种方式，到Nacos的稳定版本下载地址[https://github.com/alibaba/nacos/releases](https://github.com/alibaba/nacos/releases)，下载最新版，本文下的是tag.gz文件，下载后解压即安装完成，然后进入解压目录后的bin目录执行如下命令启动Nacos。\r\n\r\n```\r\nsh startup.sh -m standalone\r\n```\r\n\r\n启动可以看到控制台如图所示，端口号是8848（好像是因为珠穆朗玛峰的高度），版本0.8.0等等信息。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/2)\r\n\r\n\r\n# 3.SpringBoot使用Nacos\r\n\r\n接下来，创建项目，项目中加入使用Nacos配置中心的依赖nacos-config-spring-boot-starter，完整pom文件如代码所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.1.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_nacos_config</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_nacos_config</name>\r\n	<description>springboot2_nacos_config</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<!-- https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter -->\r\n		<dependency>\r\n			<groupId>com.alibaba.boot</groupId>\r\n			<artifactId>nacos-config-spring-boot-starter</artifactId>\r\n			<version>0.2.1</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n配置文件中需要配置Nacos服务的地址，如下所示。\r\n\r\n```\r\nspring.application.name=springboot2-nacos-config\r\nnacos.config.server-addr=127.0.0.1:8848\r\n```\r\n\r\n在启动类，加入@NacosPropertySource注解其中包含两个属性，如下：\r\n\r\n* dataId：这个属性是需要在Nacos中配置的Data Id。\r\n* autoRefreshed：为true的话开启自动更新。\r\n\r\n在使用Nacos做配置中心后，需要使用@NacosValue注解获取配置，使用方式与@Value一样，完整启动类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport com.alibaba.nacos.api.config.annotation.NacosValue;\r\nimport com.alibaba.nacos.spring.context.annotation.config.NacosPropertySource;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\n@NacosPropertySource(dataId = \"springboot2-nacos-config\", autoRefreshed = true)\r\n@RestController\r\npublic class Springboot2NacosConfigApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2NacosConfigApplication.class, args);\r\n	}\r\n\r\n	@NacosValue(value = \"${nacos.test.propertie:123}\", autoRefreshed = true)\r\n	private String testProperties;\r\n\r\n	@GetMapping(\"/test\")\r\n	public String test(){\r\n		return testProperties;\r\n	}\r\n}\r\n\r\n```\r\n\r\n由于本文只是简单示例使用Nacos做配置中心，所以将启动类加了一个MVC方法，作为输出配置信息进行测试，这个测试的配置给了一个默认值123，启动项目，访问[http://localhost:8080/test](http://localhost:8080/test)，可以看到如下所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/3)\r\n\r\n\r\n# 4.使用Nacos修改配置\r\n\r\n访问Nacos服务，[http://localhost:8848/nacos/#/login](http://localhost:8848/nacos/#/login)，默认情况用户名密码都是nacos，登录页如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/4)\r\n\r\n登录后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/5)\r\n\r\n接下来点击右侧加号，添加我们刚刚创建的data id 的服务，并将配置由123修改为111，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/6)\r\n\r\n然后点击右下角发布按钮，再次访问[http://localhost:8080/test](http://localhost:8080/test)如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/93/7)\r\n\r\n到这里SpringBoot使用Nacos配置中心就完成了，感兴趣可以查看源码仔细研究。', 'dalaoyang', '2019-01-26', 922, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (94, 'SpringBoot使用Nacos服务发现', '>本文介绍SpringBoot应用使用Nacos服务发现。\r\n\r\n\r\n上一篇文章介绍了SpringBoot使用Nacos做配置中心，本文介绍SpringBoot使用Nacos做服务发现。\r\n\r\n# 1.Eureka闭源\r\n\r\n相信到现在，Eureka 2.0 闭源已经不是什么新鲜事了。在2017-2018年，几乎在国内掀起了一阵SpringCloud的热潮，几乎很大一部分人群随着对SpringBoot的关注，都开始关注起来了SpringCloud。而由于Eureka注册中心的易整合等优点，更是大多数使用SpringCloud的首选注册中心。但是随着Eureka官网的宣告，如下。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/1)\r\n\r\n大致意思就是开源工作已经停止之类的话，这里就不做介绍了，感兴趣可以上Eureka的Github地址上查看[https://github.com/Netflix/eureka/wiki](https://github.com/Netflix/eureka/wiki)。\r\n\r\nNacos也是一个优秀的注册中心，并且由阿里巴巴开源，并且最近的热度很高，已经更新到0.8.0版本了，基本上更新的很频繁，也是一个Eureka闭源后的好的选择。\r\n\r\n\r\n# 2.SpringBoot使用Nacos服务发现\r\n\r\n首先，需要启动Nacos，这里不做过多介绍。\r\n\r\n创建项目，加入Nacos的服务发现的依赖nacos-discovery-spring-boot-starter，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.1.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_nacos_discovery</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_nacos_discovery</name>\r\n	<description>springboot2_nacos_discovery</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-devtools</artifactId>\r\n			<scope>runtime</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<!-- https://mvnrepository.com/artifact/com.alibaba.boot/nacos-config-spring-boot-starter -->\r\n		<dependency>\r\n			<groupId>com.alibaba.boot</groupId>\r\n			<artifactId>nacos-discovery-spring-boot-starter</artifactId>\r\n			<version>0.2.1</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n```\r\n\r\n配置文件配置Nacos服务的地址，如代码清单所示。\r\n\r\n```\r\nserver.port=8080\r\nspring.application.name=springboot2-nacos-discovery\r\nnacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\nSpringBoot使用Nacos服务发现需要想Nacos服务注册，可以选择使用Nacos Api来直接注册，如代码清单所示。\r\n\r\n```\r\n//curl -X PUT \'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=springboot2-nacos-discovery&ip=127.0.0.1&port=8080\'\r\n```\r\n\r\n本文使用注解@PostConstruct，在服务启动后向Nacos服务注册，并且创建方法根据实例名称获取实例，完整启动类如代码清单所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport com.alibaba.nacos.api.annotation.NacosInjected;\r\nimport com.alibaba.nacos.api.exception.NacosException;\r\nimport com.alibaba.nacos.api.naming.NamingService;\r\nimport com.alibaba.nacos.api.naming.pojo.Instance;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport java.net.InetAddress;\r\nimport java.util.List;\r\n\r\nimport static org.springframework.web.bind.annotation.RequestMethod.GET;\r\n\r\n//curl -X PUT \'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=springboot2-nacos-discovery&ip=127.0.0.1&port=8080\'\r\n@SpringBootApplication\r\n@RestController\r\npublic class Springboot2NacosDiscoveryApplication {\r\n\r\n	@NacosInjected\r\n	private NamingService namingService;\r\n\r\n	@Value(\"${server.port}\")\r\n	private int serverPort;\r\n\r\n	@Value(\"${spring.application.name}\")\r\n	private String applicationName;\r\n\r\n	@PostConstruct\r\n	public void registerInstance() throws NacosException{\r\n		namingService.registerInstance(applicationName,\"127.0.0.1\",serverPort);\r\n	}\r\n\r\n	@RequestMapping(value = \"/getInstance\", method = GET)\r\n	@ResponseBody\r\n	public List<Instance> getInstance(@RequestParam String serviceName) throws NacosException {\r\n		return namingService.getAllInstances(serviceName);\r\n	}\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2NacosDiscoveryApplication.class, args);\r\n	}\r\n}\r\n```\r\n\r\n本文用到了两个Nacos的方法，如下：\r\n\r\n* registerInstance：注册实例，有多个方法，本文使用的方法需要传入三个参数，分别是：服务名，ip和端口号。\r\n* getAllInstances：获取实例，传入服务名。\r\n\r\n到这里就配置完成了，启动项目，查看Nacos服务如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/2)\r\n\r\n在浏览器访问[http://localhost:8080/get?serviceName=springboot2-nacos-discovery](http://localhost:8080/get?serviceName=springboot2-nacos-discovery)，如图所示，也可以查询到刚刚注册的实例。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/94/3)\r\n\r\n还有很多Nacos Api供我们使用，可以查看Nacos Api页面：[https://nacos.io/zh-cn/docs/open-API.html](https://nacos.io/zh-cn/docs/open-API.html)', 'dalaoyang', '2019-01-27', 719, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (95, 'SpringBoot使用Sharding-JDBC分库分表', '>本文介绍SpringBoot使用当当Sharding-JDBC进行分库分表。\r\n\r\n# 1.有关Sharding-JDBC\r\n\r\n有关Sharding-JDBC介绍这里就不在多说，之前Sharding-JDBC是当当网自研的关系型数据库的水平扩展框架，现在已经捐献给Apache，具体可以查看Github，地址是：[https://shardingsphere.apache.org/document/current/cn/overview/](https://shardingsphere.apache.org/document/current/cn/overview/)\r\n\r\nshardingsphere文档地址是：[https://shardingsphere.apache.org/document/current/cn/overview/](https://shardingsphere.apache.org/document/current/cn/overview/)。\r\n\r\n目前貌似还不能从Maven仓库下载依赖，需要手动下载源码打包使用，所以本文使用的还是当当网的依赖。\r\n\r\n# 2.本文场景\r\n\r\n## 2.1 数据库\r\n\r\n接下来介绍一下本文的场景，本文是分别创建了2个数据库database0和database1。其中每个数据库都创建了2个数据表，goods_0和goods_1，如图所示。这里蓝色的代表database0中的表，红色的代表database1中的表。绿色goods表是虚拟表（图画的比较丑，审美不好，凑合看吧）。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/1)\r\n\r\n## 2.2 分库\r\n\r\n本文分库样例比较简单，根据数据库表中字段goods_id的大小进行判断，如果goods_id大于20则使用database0，否则使用database1。\r\n\r\n## 2.3 分表\r\n\r\n分样例比较简单，根据数据库表中字段goods_type的数值的奇偶进行判断，奇数使用goods_1表，偶数使用goods_0表。\r\n\r\n## 2.4 代码流程\r\n\r\n流程大致是这样，在应用程序中我们操作虚拟表goods，但是当真正操作数据库的时候，会根据我们的分库分表规则进行匹配然后操作。\r\n\r\n# 3.代码实现\r\n\r\n本文使用SpringBoot2.0.3，SpringData-JPA，Druid连接池，和当当的sharding-jdbc。\r\n\r\n## 3.1 建表SQL\r\n\r\n创建表和数据库的SQL如下所示。\r\n\r\n```\r\nCREATE DATABASE database0;\r\nUSE database0;\r\nDROP TABLE IF EXISTS `goods_0`;\r\nCREATE TABLE `goods_0` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\nDROP TABLE IF EXISTS `goods_1`;\r\nCREATE TABLE `goods_1` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\nCREATE DATABASE database1;\r\nUSE database1;\r\nDROP TABLE IF EXISTS `goods_0`;\r\nCREATE TABLE `goods_0` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\n\r\nDROP TABLE IF EXISTS `goods_1`;\r\nCREATE TABLE `goods_1` (\r\n  `goods_id` bigint(20) NOT NULL,\r\n  `goods_name` varchar(100) COLLATE utf8_bin NOT NULL,\r\n  `goods_type` bigint(20) DEFAULT NULL,\r\n  PRIMARY KEY (`goods_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\r\n```\r\n\r\n## 3.2 依赖文件\r\n\r\n新建项目，加入当当的sharding-jdbc-core依赖和druid连接池，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_shardingjdbc_fkfb</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_shardingjdbc_fkfb</name>\r\n    <description>springboot2_shardingjdbc_fkfb</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!-- lombok -->\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <!-- druid -->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.1.9</version>\r\n        </dependency>\r\n        <!-- sharding-jdbc -->\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>sharding-jdbc-core</artifactId>\r\n            <version>1.5.4</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.3 配置信息\r\n\r\n在配置信息中配置了两个数据库的信息和JPA的简单配置。\r\n\r\n```\r\n##Jpa配置\r\nspring.jpa.database=mysql\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=none\r\n\r\n##数据库配置\r\n##数据库database0地址\r\ndatabase0.url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false\r\n##数据库database0用户名\r\ndatabase0.username=root\r\n##数据库database0密码\r\ndatabase0.password=root\r\n##数据库database0驱动\r\ndatabase0.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database0名称\r\ndatabase0.databaseName=database0\r\n\r\n##数据库database1地址\r\ndatabase1.url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase1.username=root\r\n##数据库database1密码\r\ndatabase1.password=root\r\n##数据库database1驱动\r\ndatabase1.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase1.databaseName=database1\r\n\r\n```\r\n\r\n## 3.4 启动类\r\n\r\n启动类加入了@EnableAutoConfiguration取出数据库自动配置，使用@EnableTransactionManagement开启事务，使用@EnableConfigurationProperties注解加入配置实体，启动类完整代码请入所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\r\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\r\n\r\n@SpringBootApplication\r\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\r\n@EnableTransactionManagement(proxyTargetClass = true)\r\n@EnableConfigurationProperties\r\npublic class Springboot2ShardingjdbcFkfbApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Springboot2ShardingjdbcFkfbApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.5 实体类和数据库操作层\r\n\r\n这里没什么好说的，就是简单的实体和Repository，只不过在Repository内加入between方法和in方法用于测试，代码如下所示。\r\n\r\nGoods实体类。\r\n\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Entity\r\n@Table(name=\"goods\")\r\n@Data\r\npublic class Goods {\r\n    @Id\r\n    private Long goodsId;\r\n\r\n    private String goodsName;\r\n\r\n    private Long goodsType;\r\n}\r\n\r\n```\r\n\r\nGoodsRepository类。\r\n\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.Goods;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\npublic interface GoodsRepository extends JpaRepository<Goods, Long> {\r\n\r\n    List<Goods> findAllByGoodsIdBetween(Long goodsId1,Long goodsId2);\r\n\r\n    List<Goods> findAllByGoodsIdIn(List<Long> goodsIds);\r\n}\r\n```\r\n\r\n## 3.6 数据库配置\r\n\r\n本文使用了两个实体来接收数据库信息，并且创建数据源，也可以采用别的方式。首先看一下Database0Config和Database1Config两个类的代码。\r\n\r\nDatabase0Config类。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database0\")\r\n@Component\r\npublic class Database0Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\nDatabase1Config类。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database1\")\r\n@Component\r\npublic class Database1Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n接下来新建DataSourceConfig用于创建数据源和使用分库分表策略，其中分库分表策略会调用分库算法类和分表算法类，DataSourceConfig类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\n\r\nimport com.dalaoyang.config.DatabaseShardingAlgorithm;\r\nimport com.dalaoyang.config.TableShardingAlgorithm;\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingDataSourceFactory;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.DataSourceRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.rule.TableRule;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.database.DatabaseShardingStrategy;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.table.TableShardingStrategy;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.DefaultKeyGenerator;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.SQLException;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Configuration\r\npublic class DataSourceConfig {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Autowired\r\n    private DatabaseShardingAlgorithm databaseShardingAlgorithm;\r\n\r\n    @Autowired\r\n    private TableShardingAlgorithm tableShardingAlgorithm;\r\n\r\n    @Bean\r\n    public DataSource getDataSource() throws SQLException {\r\n        return buildDataSource();\r\n    }\r\n\r\n    private DataSource buildDataSource() throws SQLException {\r\n        //分库设置\r\n        Map<String, DataSource> dataSourceMap = new HashMap<>(2);\r\n        //添加两个数据库database0和database1\r\n        dataSourceMap.put(database0Config.getDatabaseName(), database0Config.createDataSource());\r\n        dataSourceMap.put(database1Config.getDatabaseName(), database1Config.createDataSource());\r\n        //设置默认数据库\r\n        DataSourceRule dataSourceRule = new DataSourceRule(dataSourceMap, database0Config.getDatabaseName());\r\n\r\n        //分表设置，大致思想就是将查询虚拟表Goods根据一定规则映射到真实表中去\r\n        TableRule orderTableRule = TableRule.builder(\"goods\")\r\n                .actualTables(Arrays.asList(\"goods_0\", \"goods_1\"))\r\n                .dataSourceRule(dataSourceRule)\r\n                .build();\r\n\r\n        //分库分表策略\r\n        ShardingRule shardingRule = ShardingRule.builder()\r\n                .dataSourceRule(dataSourceRule)\r\n                .tableRules(Arrays.asList(orderTableRule))\r\n                .databaseShardingStrategy(new DatabaseShardingStrategy(\"goods_id\", databaseShardingAlgorithm))\r\n                .tableShardingStrategy(new TableShardingStrategy(\"goods_type\", tableShardingAlgorithm)).build();\r\n        DataSource dataSource = ShardingDataSourceFactory.createDataSource(shardingRule);\r\n        return dataSource;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public KeyGenerator keyGenerator() {\r\n        return new DefaultKeyGenerator();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.7 分库分表算法\r\n\r\n由于这里只是简单的分库分表样例，所以分库类这里实现SingleKeyDatabaseShardingAlgorithm类，采用了单分片键数据源分片算法，需要重写三个方法，分别是：\r\n\r\n* doEqualSharding：SQL中==的规则。\r\n* doInSharding：SQL中in的规则。\r\n* doBetweenSharding：SQL中between的规则。\r\n\r\n本文分库规则是基于值大于20则使用database0，其余使用database1，所以简单if，else就搞定了，分库算法类DatabaseShardingAlgorithm代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dalaoyang.database.Database0Config;\r\nimport com.dalaoyang.database.Database1Config;\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingValue;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.database.SingleKeyDatabaseShardingAlgorithm;\r\nimport com.google.common.collect.Range;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashSet;\r\n\r\n/**\r\n * 这里使用的都是单键分片策略\r\n * 示例分库策略是：\r\n * GoodsId<=20使用database0库\r\n * 其余使用database1库\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Component\r\npublic class DatabaseShardingAlgorithm implements SingleKeyDatabaseShardingAlgorithm<Long> {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Override\r\n    public String doEqualSharding(Collection<String> availableTargetNames, ShardingValue<Long> shardingValue) {\r\n        Long value = shardingValue.getValue();\r\n        if (value <= 20L) {\r\n            return database0Config.getDatabaseName();\r\n        } else {\r\n            return database1Config.getDatabaseName();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doInSharding(Collection<String> availableTargetNames, ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\r\n        for (Long value : shardingValue.getValues()) {\r\n            if (value <= 20L) {\r\n                result.add(database0Config.getDatabaseName());\r\n            } else {\r\n                result.add(database1Config.getDatabaseName());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doBetweenSharding(Collection<String> availableTargetNames,\r\n                                                ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(availableTargetNames.size());\r\n        Range<Long> range = shardingValue.getValueRange();\r\n        for (Long value = range.lowerEndpoint(); value <= range.upperEndpoint(); value++) {\r\n            if (value <= 20L) {\r\n                result.add(database0Config.getDatabaseName());\r\n            } else {\r\n                result.add(database1Config.getDatabaseName());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n分表和分库类似，无非就是实现的类不一样，实现了SingleKeyTableShardingAlgorithm类，策略使用值奇偶分表，分表算法类TableShardingAlgorithm如代码清单所示。\r\n\r\n```\r\npackage com.dalaoyang.config;\r\n\r\nimport com.dangdang.ddframe.rdb.sharding.api.ShardingValue;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.table.SingleKeyTableShardingAlgorithm;\r\nimport com.google.common.collect.Range;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Collection;\r\nimport java.util.LinkedHashSet;\r\n\r\n/**\r\n * 这里使用的都是单键分片策略\r\n * 示例分表策略是：\r\n * GoodsType为奇数使用goods_1表\r\n * GoodsType为偶数使用goods_0表\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Component\r\npublic class TableShardingAlgorithm implements SingleKeyTableShardingAlgorithm<Long> {\r\n\r\n    @Override\r\n    public String doEqualSharding(final Collection<String> tableNames, final ShardingValue<Long> shardingValue) {\r\n        for (String each : tableNames) {\r\n            if (each.endsWith(shardingValue.getValue() % 2 + \"\")) {\r\n                return each;\r\n            }\r\n        }\r\n        throw new IllegalArgumentException();\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doInSharding(final Collection<String> tableNames, final ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(tableNames.size());\r\n        for (Long value : shardingValue.getValues()) {\r\n            for (String tableName : tableNames) {\r\n                if (tableName.endsWith(value % 2 + \"\")) {\r\n                    result.add(tableName);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public Collection<String> doBetweenSharding(final Collection<String> tableNames,\r\n                                                final ShardingValue<Long> shardingValue) {\r\n        Collection<String> result = new LinkedHashSet<>(tableNames.size());\r\n        Range<Long> range = shardingValue.getValueRange();\r\n        for (Long i = range.lowerEndpoint(); i <= range.upperEndpoint(); i++) {\r\n            for (String each : tableNames) {\r\n                if (each.endsWith(i % 2 + \"\")) {\r\n                    result.add(each);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n## 3.8 Controller\r\n\r\n接下来创建一个Controller进行测试，保存方法使用了插入40条数据，根据我们的规则，会每个库插入20条，同时我这里还创建了三个查询方法，分别是查询全部，between查询，in查询，还有删除全部方法。Controller类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.Goods;\r\nimport com.dalaoyang.repository.GoodsRepository;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@RestController\r\npublic class GoodsController {\r\n\r\n    @Autowired\r\n    private KeyGenerator keyGenerator;\r\n\r\n    @Autowired\r\n    private GoodsRepository goodsRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public String save(){\r\n        for(int i= 1 ; i <= 40 ; i ++){\r\n            Goods goods = new Goods();\r\n            goods.setGoodsId((long) i);\r\n            goods.setGoodsName( \"shangpin\" + i);\r\n            goods.setGoodsType((long) (i+1));\r\n            goodsRepository.save(goods);\r\n        }\r\n        return \"success\";\r\n    }\r\n\r\n    @GetMapping(\"select\")\r\n    public String select(){\r\n        return goodsRepository.findAll().toString();\r\n    }\r\n\r\n    @GetMapping(\"delete\")\r\n    public void delete(){\r\n         goodsRepository.deleteAll();\r\n    }\r\n\r\n    @GetMapping(\"query1\")\r\n    public Object query1(){\r\n        return goodsRepository.findAllByGoodsIdBetween(10L, 30L);\r\n    }\r\n\r\n    @GetMapping(\"query2\")\r\n    public Object query2(){\r\n        List<Long> goodsIds = new ArrayList<>();\r\n        goodsIds.add(10L);\r\n        goodsIds.add(15L);\r\n        goodsIds.add(20L);\r\n        goodsIds.add(25L);\r\n        return goodsRepository.findAllByGoodsIdIn(goodsIds);\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 4.测试\r\n\r\n启动应用，在浏览器或HTTP请求工具访问[http://localhost:8080/save](http://localhost:8080/save)，如图所示，返回success。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/2)\r\n\r\n接下来在测试一下查询方法，访问[http://localhost:8080/select](http://localhost:8080/select)，如图所示，可以看到插入数据没问题。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/3)\r\n\r\n然后查看一下数据库，首先看database0，如图，每个表都有十条数据，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/4)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/5)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/6)\r\n\r\n接下来看database1，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/7)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/8)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/95/9)\r\n\r\n从上面几张图可以看出分库分表已经按照我们的策略来进行插入，至于其他几个测试这里就不做介绍了，无论是查询和删除都是可以成功的。\r\n\r\n\r\n# 5 源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_fkfb](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_fkfb)', 'dalaoyang', '2019-02-01', 1603, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (96, 'SpringCloud使用Nacos服务发现实现远程调用', '>本文使用SpringCloud结合Nacos服务发现，Feign远程调用做一个简单的Demo。\r\n\r\n\r\n# 1 Nacos\r\n\r\n关于Nacos之前写了两篇文章关于SpringBoot对它的使用，感兴趣可以查看一下。\r\n\r\n[《SpringBoot使用Nacos配置中心》](https://www.dalaoyang.cn/article/93)\r\n\r\n[《SpringBoot使用Nacos服务发现》](https://www.dalaoyang.cn/article/94)\r\n\r\n在SpringBoot使用的时候，需要自行去向Nacos服务注册自己的服务，Nacos也提供了SpringCloud服务发现的依赖，本文结合spring-cloud-starter-alibaba-nacos-discovery进行使用介绍。\r\n\r\n本文使用版本为:\r\n\r\n* SpringCloud Finchley.SR2\r\n* SpringBoot 2.0.3.RELEASE\r\n* spring-cloud-starter-alibaba-nacos-discovery 0.2.1.RELEASE\r\n* spring-cloud-starter-openfeign 2.0.0.RELEASE\r\n\r\n# 2.本文场景\r\n\r\n两个服务，如下：\r\n\r\n* springcloud-nacos-discovery-provider：端口号10000，服务提供者。\r\n* springcloud-nacos-discovery-consumer：端口号10001，服务消费者。\r\n\r\n原理很简单，浏览器访问消费者，消费者调用服务提供者。\r\n\r\n# 3.服务提供者\r\n\r\n\r\n## 3.1 依赖配置\r\n\r\n创建一个项目，项目中加入SpringCloud-Nacos依赖，完整pom如下所示。\r\n\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_nacos_discovery_provider</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_nacos_discory_provider</name>\r\n    <description>springcloud_nacos_discovery_provider</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Finchley.SR2</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.2 启动类\r\n\r\n在启动类加入@SpringBootApplication注解，完整启动类代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class SpringcloudNacosDiscoveryProviderApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudNacosDiscoveryProviderApplication.class, args);\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.3 配置文件\r\n\r\n配置文件中配置Nacos服务地址，当前服务名，这里需要注意一点，使用Ribbon负载均衡的时候服务名中不能使用下划线，不然会找不到服务。\r\n\r\n配置文件如下所示。\r\n\r\n```\r\nserver.port=10000\r\nspring.application.name=springcloud-nacos-discovery-provider\r\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\n## 3.4 提供服务\r\n\r\n创建一个Controller，提供一个方法进行测试，如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/2/4\r\n */\r\n@RestController\r\npublic class TestController {\r\n\r\n    @GetMapping(\"/test/{string}\")\r\n    public String test(@PathVariable String string) {\r\n        return \"Hello Nacos :\" + string;\r\n    }\r\n}\r\n```\r\n\r\n\r\n# 4 服务消费者\r\n\r\n## 4.1 依赖配置\r\n\r\n与服务提供者类似，在服务消费者加入SpringCloud-Nacos依赖和OpenFeign依赖，完整pom入夏所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.0.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springcloud_nacos_discovery_consumer</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springcloud_nacos_discovery_consumer</name>\r\n	<description>springcloud_nacos_discovery_consumer</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n		<spring-cloud.version>Finchley.SR2</spring-cloud.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-openfeign</artifactId>\r\n			<version>2.0.0.RELEASE</version>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.cloud</groupId>\r\n			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\r\n			<version>0.2.1.RELEASE</version>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<dependencyManagement>\r\n		<dependencies>\r\n			<dependency>\r\n				<groupId>org.springframework.cloud</groupId>\r\n				<artifactId>spring-cloud-dependencies</artifactId>\r\n				<version>${spring-cloud.version}</version>\r\n				<type>pom</type>\r\n				<scope>import</scope>\r\n			</dependency>\r\n		</dependencies>\r\n	</dependencyManagement>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 4.2 启动类\r\n\r\n在启动类加入注解@EnableDiscoveryClient并且开启负载均衡，如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\r\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class SpringcloudNacosDiscoveryConsumerApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(SpringcloudNacosDiscoveryConsumerApplication.class, args);\r\n	}\r\n\r\n	@LoadBalanced\r\n	@Bean\r\n	public RestTemplate restTemplate() {\r\n		return new RestTemplate();\r\n	}\r\n\r\n}\r\n\r\n```\r\n\r\n## 4.3 配置文件\r\n\r\n配置文件与提供者一致，只是服务名不同，如下所示。\r\n\r\n```\r\nserver.port=10001\r\nspring.application.name=springcloud-nacos-discovery-consumer\r\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\r\n```\r\n\r\n## 4.4 创建服务调用\r\n\r\n创建一个Controller进行调用服务，如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/2/4\r\n */\r\n@RestController\r\npublic class TestConrtroller {\r\n\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    @GetMapping(\"test/{string}\")\r\n    public String test(@PathVariable String string) {\r\n        return restTemplate.getForObject(\"http://springcloud-nacos-discovery-provider/test/\" + string, String.class);\r\n    }\r\n}\r\n\r\n```\r\n\r\n# 5 测试\r\n\r\n分别启动两个服务，查看Nacos管理页面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/1)\r\n\r\n点击详情可以查看服务的详细信息，如端口号，权重等，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/2)\r\n\r\n接下俩在浏览器访问[http://localhost:10001/test/dalaoyang](http://localhost:10001/test/dalaoyang)，远程调用成功。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/96/3)\r\n\r\n\r\n# 6.源码\r\n\r\n服务提供者：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_provider](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_provider)\r\n\r\n\r\n服务消费者：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_consumer](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_nacos_discovery_consumer)', 'dalaoyang', '2019-02-04', 682, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (97, 'SpringBoot使用Sharding-JDBC读写分离', '>本文介绍SpringBoot使用当当Sharding-JDBC进行读写分离。\r\n\r\n# 1.有关Sharding-JDBC\r\n\r\n本文还是基于当当网Sharding-Jdbc的依赖，与上一篇使用Sharding-Jdbc进行分库分表依赖一致，并且本文大致内容与上一篇文章相似，建议先查看我的另一篇在查看这篇会简单许多，传送门[《SpringBoot使用Sharding-JDBC分库分表》](https://www.dalaoyang.cn/article/95)。\r\n\r\n这里需要特殊介绍的是，使用Sharding-JDBC进行读写分离的时候，只允许设置一个主库，从库的话可以设置多个，访问策略的话从源码上看只有两种轮询（ROUND_ROBIN）和随机（RANDOM）。\r\n\r\n源码代码如下:\r\n\r\n```\r\npackage com.dangdang.ddframe.rdb.sharding.api.strategy.slave;\r\n\r\npublic enum MasterSlaveLoadBalanceStrategyType {\r\n    ROUND_ROBIN(new RoundRobinMasterSlaveLoadBalanceStrategy()),\r\n    RANDOM(new RandomMasterSlaveLoadBalanceStrategy());\r\n\r\n    private final MasterSlaveLoadBalanceStrategy strategy;\r\n\r\n    public static MasterSlaveLoadBalanceStrategyType getDefaultStrategyType() {\r\n        return ROUND_ROBIN;\r\n    }\r\n\r\n    private MasterSlaveLoadBalanceStrategyType(MasterSlaveLoadBalanceStrategy strategy) {\r\n        this.strategy = strategy;\r\n    }\r\n\r\n    public MasterSlaveLoadBalanceStrategy getStrategy() {\r\n        return this.strategy;\r\n    }\r\n}\r\n```\r\n\r\n\r\n# 2.本文场景\r\n\r\n\r\n由于本地环境并没有使用Mysql主从复制，只是创建了三个库，其中database0作为主库，database1和database2作为从库。主库进行增删改操作，从库进行查询操作，如下图为本文数据库的三个表。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/1)\r\n\r\n如上图分别是三个数据库中的user表，其中master-user为database0数据库中的user表，salve-user1为database1中的user表，salve-user2为database2中的user表。\r\n\r\n\r\n# 3.代码实现\r\n\r\n本文使用SpringBoot2.0.3，SpringData-JPA，Druid连接池，和当当的sharding-jdbc。\r\n\r\n## 3.1 建表SQL\r\n\r\n创建表和数据库的SQL如下所示，这里默认在从库内分别插入了一条数据，name值分别存放dalaoyang1和dalaoyang2便于区分。\r\n\r\n```\r\nCREATE DATABASE database0;\r\nUSE database0;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\nCREATE DATABASE database1;\r\nUSE database1;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\nINSERT INTO `database1`.`user`(`id`, `city`, `name`) VALUES (101, \'beijing\', \'dalaoyang1\');\r\n\r\nCREATE DATABASE database2;\r\nUSE database2;\r\nDROP TABLE IF EXISTS `user`;\r\nCREATE TABLE `user`(\r\n	id bigint(64) not null,\r\n	city varchar(20) not null,\r\n	name varchar(20) not null,\r\n	PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\nINSERT INTO `database2`.`user`(`id`, `city`, `name`) VALUES (102, \'beijing\', \'dalaoyang2\');\r\n```\r\n\r\n## 3.2 依赖文件\r\n\r\n新建项目，依赖文件还是当当的sharding-jdbc-core依赖和druid连接池，完整pom文件代码如下所示。\r\n\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_shardingjdbc_dxfl</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_shardingjdbc_dxfl</name>\r\n    <description>springboot2_shardingjdbc_dxfl</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!-- lombok -->\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <optional>true</optional>\r\n        </dependency>\r\n        <!-- druid -->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.1.9</version>\r\n        </dependency>\r\n        <!-- sharding-jdbc -->\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>sharding-jdbc-core</artifactId>\r\n            <version>1.5.4</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n## 3.3 配置信息\r\n\r\n在配置信息中配置了三个数据库的信息和JPA的简单配置。\r\n\r\n\r\n```\r\n##Jpa配置\r\nspring.jpa.database=mysql\r\nspring.jpa.show-sql=true\r\nspring.jpa.hibernate.ddl-auto=none\r\n\r\n##数据库配置\r\n##数据库database0地址\r\ndatabase0.url=jdbc:mysql://localhost:3306/database0?characterEncoding=utf8&useSSL=false\r\n##数据库database0用户名\r\ndatabase0.username=root\r\n##数据库database0密码\r\ndatabase0.password=root\r\n##数据库database0驱动\r\ndatabase0.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database0名称\r\ndatabase0.databaseName=database0\r\n\r\n##数据库database1地址\r\ndatabase1.url=jdbc:mysql://localhost:3306/database1?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase1.username=root\r\n##数据库database1密码\r\ndatabase1.password=root\r\n##数据库database1驱动\r\ndatabase1.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase1.databaseName=database1\r\n\r\n##数据库database2地址\r\ndatabase2.url=jdbc:mysql://localhost:3306/database2?characterEncoding=utf8&useSSL=false\r\n##数据库database1用户名\r\ndatabase2.username=root\r\n##数据库database1密码\r\ndatabase2.password=root\r\n##数据库database1驱动\r\ndatabase2.driverClassName=com.mysql.jdbc.Driver\r\n##数据库database1名称\r\ndatabase2.databaseName=database2\r\n```\r\n\r\n\r\n## 3.4 启动类\r\n\r\n上一篇文章说到在启动类加入了@EnableAutoConfiguration去除数据库自动配置，当时也没太注意，其实可以直接在@SpringBootApplication注解上去除数据库自动配置，剩下的和上一篇一样，使用@EnableTransactionManagement开启事务，使用@EnableConfigurationProperties注解加入配置实体，启动类完整代码如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\r\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\r\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\r\n\r\n@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})\r\n@EnableTransactionManagement(proxyTargetClass = true)\r\n@EnableConfigurationProperties\r\npublic class Springboot2ShardingjdbcDxflApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Springboot2ShardingjdbcDxflApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n## 3.5 实体类和数据库操作层\r\n\r\nUser实体类。\r\n\r\n```\r\npackage com.dalaoyang.entity;\r\n\r\nimport lombok.Data;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Entity\r\n@Table(name=\"user\")\r\n@Data\r\npublic class User {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String city;\r\n\r\n    private String name;\r\n}\r\n\r\n```\r\n\r\nUserRepository类。\r\n\r\n```\r\npackage com.dalaoyang.repository;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface UserRepository extends JpaRepository<User,Long> {\r\n}\r\n\r\n```\r\n\r\n\r\n## 3.6 数据库参数类\r\n\r\n数据库配置类，Database0Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database0\")\r\n@Component\r\npublic class Database0Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n数据库配置类，Database1Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database1\")\r\n@Component\r\npublic class Database1Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n数据库配置类，Database2Config。\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport lombok.Data;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.sql.DataSource;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/30\r\n */\r\n@Data\r\n@ConfigurationProperties(prefix = \"database2\")\r\n@Component\r\npublic class Database2Config {\r\n    private String url;\r\n    private String username;\r\n    private String password;\r\n    private String driverClassName;\r\n    private String databaseName;\r\n\r\n    public DataSource createDataSource() {\r\n        DruidDataSource result = new DruidDataSource();\r\n        result.setDriverClassName(getDriverClassName());\r\n        result.setUrl(getUrl());\r\n        result.setUsername(getUsername());\r\n        result.setPassword(getPassword());\r\n        return result;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n## 3.7 读写分离配置\r\n\r\n创建一个DataSourceConfig类来设置读写分离，这里其实也与分库分表类似，也可以在分库分表的基础上进行读写分离，需要创建一个Map集合来接收从库。在创建数据源时需要传入五个参数，分别是：\r\n\r\n* name：数据源名称\r\n* masterDataSourceName：主库数据源名称\r\n* masterDataSource：主数据源\r\n* slaveDataSourceMap：从数据源集合\r\n* strategyType：访问策略\r\n\r\n当然，也可以使用其他方法创建数据源，本文代码如下：\r\n\r\n```\r\npackage com.dalaoyang.database;\r\n\r\n\r\nimport com.dangdang.ddframe.rdb.sharding.api.MasterSlaveDataSourceFactory;\r\nimport com.dangdang.ddframe.rdb.sharding.api.strategy.slave.MasterSlaveLoadBalanceStrategyType;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.DefaultKeyGenerator;\r\nimport com.dangdang.ddframe.rdb.sharding.keygen.KeyGenerator;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.SQLException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author yangyang\r\n * @date 2019/1/29\r\n */\r\n@Configuration\r\npublic class DataSourceConfig {\r\n\r\n    @Autowired\r\n    private Database0Config database0Config;\r\n\r\n    @Autowired\r\n    private Database1Config database1Config;\r\n\r\n    @Autowired\r\n    private Database2Config database2Config;\r\n\r\n    @Bean\r\n    public DataSource getDataSource() throws SQLException {\r\n        return buildDataSource();\r\n    }\r\n\r\n    private DataSource buildDataSource() throws SQLException {\r\n        //设置从库数据源集合\r\n        Map<String, DataSource> slaveDataSourceMap = new HashMap<>();\r\n        slaveDataSourceMap.put(database1Config.getDatabaseName(), database1Config.createDataSource());\r\n        slaveDataSourceMap.put(database2Config.getDatabaseName(), database2Config.createDataSource());\r\n\r\n        //获取数据源对象\r\n        DataSource dataSource = MasterSlaveDataSourceFactory.createDataSource(\"masterSlave\",database0Config.getDatabaseName()\r\n                ,database0Config.createDataSource(), slaveDataSourceMap, MasterSlaveLoadBalanceStrategyType.getDefaultStrategyType());\r\n        return dataSource;\r\n    }\r\n\r\n\r\n    @Bean\r\n    public KeyGenerator keyGenerator() {\r\n        return new DefaultKeyGenerator();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.8 Controller\r\n\r\nController做为测试类，创建两个方法，save方法和getAll方法，其中：\r\n\r\n* save方法用于测试主库的插入和修改\r\n* getAll方法用于测试读数据\r\n\r\nUserController类如下所示。\r\n\r\n```\r\npackage com.dalaoyang.controller;\r\n\r\nimport com.dalaoyang.entity.User;\r\nimport com.dalaoyang.repository.UserRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @GetMapping(\"save\")\r\n    public void save(){\r\n        User user = new User();\r\n        user.setId(100L);\r\n        user.setName(\"dalaoyang\");\r\n        user.setCity(\"beijing\");\r\n        userRepository.save(user);\r\n    }\r\n\r\n    @GetMapping(\"getAll\")\r\n    public Object getAll(){\r\n        return userRepository.findAll();\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n# 4.测试\r\n\r\n## 4.1 测试主库\r\n\r\n使用postman访问[http://localhost:8080/save](http://localhost:8080/save)，控制台如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/2)\r\n\r\n再次访问，如图。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/3)\r\n\r\n主键冲突了，其实这是由于插入的时候使用的database0，但是查询使用的是database1和database2，但是我在从库内并没有ID是100的数据，所以JPA判定我为插入，但是数据库内缺有这样的数据。\r\n\r\n我们接下来测试一下查询。访问[http://localhost:8080/getAll](http://localhost:8080/getAll)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/4)\r\n\r\n再次访问，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/5)\r\n\r\n证明从库的读取是正常的，接下来修改从库的ID为100。然后访问[http://localhost:8080/save](http://localhost:8080/save)，查看控制台如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/97/6)\r\n\r\n因为存在了ID为100的数据，所以SQL为修改语句。\r\n# 5.源码\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_dxfl](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_shardingjdbc_dxfl)', 'dalaoyang', '2019-02-12', 555, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (98, 'SpringBoot使用ELK日志收集', '>本文介绍SpringBoot应用配合ELK进行日志收集。\r\n\r\n# 1.有关ELK\r\n\r\n## 1.1 简介\r\n在之前写过一篇文章介绍ELK日志收集方案，感兴趣的可以去看一看，点击这里-----> [《ELK日志分析方案》](https://www.dalaoyang.cn/article/82)。\r\n\r\n这里在对ELK做一下简述，ELK是有Elastic公司的三个组件配合进行日志收集，分别是：\r\n\r\n* ElasticSearch:用于存储日志信息。\r\n* Logstash:用于收集、处理和转发日志信息。\r\n* Kibana:提供可搜索的Web可视化界面。\r\n\r\n当然，现在很多都配合着Beats进行使用，这里不做过多描述，感兴趣的可以查看官网，[https://www.elastic.co/cn/products/beats](https://www.elastic.co/cn/products/beats)，这里有很多对Beats的描述。\r\n\r\n## 1.2 安装\r\n\r\n有关ELK安装笔者之前都写过关于Linux环境下的安装，如下：\r\n\r\n* [《Linux安装Elasticsearch》](https://www.dalaoyang.cn/article/78)\r\n* [《Linux安装Logstash》](https://www.dalaoyang.cn/article/80)\r\n* [《Linux安装Kibana》](https://www.dalaoyang.cn/article/79)\r\n\r\n\r\n其他环境安装方式类似，基本上都是下载压缩包解压这一套流程。\r\n\r\n# 2.SpringBoot日志输出到Logstash\r\n\r\n这里以logback日志为例，新建项目，在项目中加入logstash-logback-encoder依赖，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.2.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot_logstash</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot_logstash</name>\r\n    <description>springboot_logstash</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-devtools</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>net.logstash.logback</groupId>\r\n            <artifactId>logstash-logback-encoder</artifactId>\r\n            <version>5.3</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n接下来新建一个logback-spring.xml文件，配置logback日志信息，注意这里配置的destination属性，输出的要和logstash配置的对应上，不然收集不上，内容如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\" />\r\n\r\n    <appender name=\"LOGSTASH\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\r\n        <destination>127.0.0.1:4560</destination>\r\n        <!-- 日志输出编码 -->\r\n        <encoder charset=\"UTF-8\"\r\n                class=\"net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder\">\r\n            <providers>\r\n                <timestamp>\r\n                    <timeZone>UTC</timeZone>\r\n                </timestamp>\r\n                <pattern>\r\n                    <pattern>\r\n                        {\r\n                        \"logLevel\": \"%level\",\r\n                        \"serviceName\": \"${springAppName:-}\",\r\n                        \"pid\": \"${PID:-}\",\r\n                        \"thread\": \"%thread\",\r\n                        \"class\": \"%logger{40}\",\r\n                        \"rest\": \"%message\"\r\n                        }\r\n                    </pattern>\r\n                </pattern>\r\n            </providers>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"LOGSTASH\" />\r\n        <appender-ref ref=\"CONSOLE\" />\r\n    </root>\r\n\r\n</configuration>\r\n\r\n```\r\n\r\n修改启动类，加入一个mvc方法，主要用于输出日志，如下所示。\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@SpringBootApplication\r\n@RestController\r\npublic class SpringbootLogstashApplication {\r\n\r\n    Logger logger = LoggerFactory.getLogger(SpringbootLogstashApplication.class);\r\n\r\n    @GetMapping(\"test\")\r\n    public void test(){\r\n        logger.info(\"测试初始一些日志吧！\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringbootLogstashApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n# 3.Logstash配置\r\n\r\nlogstash配置如下，再次提醒一下，输入要与刚刚配置的对应上，输出为本地es：\r\n\r\n```\r\ninput {\r\n  tcp {\r\n    mode => \"server\"\r\n    host => \"0.0.0.0\"\r\n    port => 4560\r\n    codec => json_lines\r\n  }\r\n}\r\noutput {\r\n  elasticsearch {\r\n    hosts => \"localhost:9200\"\r\n    index => \"springboot-logstash-%{+YYYY.MM.dd}\"\r\n  }\r\n}\r\n```\r\n\r\n# 4.测试\r\n\r\n打开kibana管理页面，添加刚刚创建的索引，如图所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/1)\r\n\r\n然后进入发现页，选择刚刚的索引，如下所示。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/2)\r\n\r\n接下来在浏览器多次访问刚刚在项目中输出日志的方法，查询控制台，如下所示。\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/3)\r\n\r\n然后在进入kibana查看，不光是日志内容，还有自定义的属性也显示出来了。\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/98/4)\r\n\r\n# 5.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot_logstash](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot_logstash)', 'dalaoyang', '2019-03-01', 440, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (99, 'SpringBoot使用Elastic-Job', '>本文介绍SpringBoot整合Elastic-Job分布式调度任务（简单任务）。\r\n\r\n# 1.有关Elastic-Job\r\n\r\nElastic-Job是当当网开源的分布式任务调度解决方案，是业内使用较多的分布式调度解决方案。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/1)\r\n\r\n\r\n这里主要介绍Elastic-Job-Lite，Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供最轻量级的分布式任务的协调服务，外部依赖仅Zookeeper。\r\n\r\n架构图如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/2)\r\n\r\nElastic-Job官网地址：[http://elasticjob.io/index_zh.html](http://elasticjob.io/index_zh.html)   \r\nElastic-Job-Lite官方文档地址：[http://elasticjob.io/docs/elastic-job-lite/00-overview/intro/](http://elasticjob.io/docs/elastic-job-lite/00-overview/intro/)\r\n\r\n\r\n# 2.使用Elastic-Job\r\n\r\n## 2.1 加入依赖\r\n\r\n新建项目，在项目中加入Elastic-Job依赖，完整pom如代码清单所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.0.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_elasticjob</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_elasticjob</name>\r\n    <description>springboot2_elasticjob</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>elastic-job-lite-core</artifactId>\r\n            <version>2.1.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.dangdang</groupId>\r\n            <artifactId>elastic-job-lite-spring</artifactId>\r\n            <version>2.1.5</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 2.2 配置文件\r\n\r\n配置文件中需要配置一下zookeeper地址和namespace名称，注意：这个不是必须要配置的，在文件中直接写死也是可以的，配置文件如下所示。\r\n\r\n```\r\nspring.application.name=springboot2_elasticjob\r\n\r\nregCenter.serverList=localhost:2181\r\nregCenter.namespace=springboot2_elasticjob\r\n```\r\n\r\n## 2.3 配置zookeeper\r\n\r\n接下来需要配置一下zookeeper，创建一个JobRegistryCenterConfig，内容如下：\r\n\r\n```\r\n@Configuration\r\n@ConditionalOnExpression(\"\'${regCenter.serverList}\'.length() > 0\")\r\npublic class JobRegistryCenterConfig {\r\n\r\n    @Bean(initMethod = \"init\")\r\n    public ZookeeperRegistryCenter regCenter(@Value(\"${regCenter.serverList}\") final String serverList,\r\n                                             @Value(\"${regCenter.namespace}\") final String namespace) {\r\n        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList, namespace));\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 2.4 定义Elastic-Job任务\r\n\r\n配置一个简单的任务，这里以在日志中打印一些参数为例，如下所示。\r\n\r\n```\r\npublic class MySimpleJob implements SimpleJob {\r\n    Logger logger = LoggerFactory.getLogger(MySimpleJob.class);\r\n\r\n    @Override\r\n    public void execute(ShardingContext shardingContext) {\r\n        logger.info(String.format(\"Thread ID: %s, 作业分片总数: %s, \" +\r\n                        \"当前分片项: %s.当前参数: %s,\" +\r\n                        \"作业名称: %s.作业自定义参数: %s\"\r\n                ,\r\n                Thread.currentThread().getId(),\r\n                shardingContext.getShardingTotalCount(),\r\n                shardingContext.getShardingItem(),\r\n                shardingContext.getShardingParameter(),\r\n                shardingContext.getJobName(),\r\n                shardingContext.getJobParameter()\r\n        ));\r\n\r\n    }\r\n}\r\n```\r\n\r\n## 2.5 配置任务\r\n\r\n配置任务的时候，这里定义了四个参数，分别是：\r\n\r\n* cron：cron表达式，用于控制作业触发时间。\r\n* shardingTotalCount：作业分片总数\r\n* shardingItemParameters：分片序列号和参数用等号分隔，多个键值对用逗号分隔\r\n分片序列号从0开始，不可大于或等于作业分片总数\r\n如：\r\n0=a,1=b,2=c\r\n* jobParameters：作业自定义参数\r\n作业自定义参数，可通过传递该参数为作业调度的业务方法传参，用于实现带参数的作业\r\n例：每次获取的数据量、作业实例从数据库读取的主键等。\r\n\r\n至于其他参数请参考文档，[http://elasticjob.io/docs/elastic-job-lite/02-guide/config-manual/](http://elasticjob.io/docs/elastic-job-lite/02-guide/config-manual/)\r\n\r\n本文配置如下：\r\n\r\n```\r\n@Configuration\r\npublic class MyJobConfig {\r\n\r\n    private final String cron = \"0/5 * * * * ?\";\r\n    private final int shardingTotalCount = 3;\r\n    private final String shardingItemParameters = \"0=A,1=B,2=C\";\r\n    private final String jobParameters = \"parameter\";\r\n\r\n    @Autowired\r\n    private ZookeeperRegistryCenter regCenter;\r\n\r\n    @Bean\r\n    public SimpleJob stockJob() {\r\n        return new MySimpleJob();\r\n    }\r\n\r\n    @Bean(initMethod = \"init\")\r\n    public JobScheduler simpleJobScheduler(final SimpleJob simpleJob) {\r\n        return new SpringJobScheduler(simpleJob, regCenter, getLiteJobConfiguration(simpleJob.getClass(),\r\n                cron, shardingTotalCount, shardingItemParameters, jobParameters));\r\n    }\r\n\r\n    private LiteJobConfiguration getLiteJobConfiguration(final Class<? extends SimpleJob> jobClass,\r\n                                                         final String cron,\r\n                                                         final int shardingTotalCount,\r\n                                                         final String shardingItemParameters,\r\n                                                         final String jobParameters) {\r\n        // 定义作业核心配置\r\n        JobCoreConfiguration simpleCoreConfig = JobCoreConfiguration.newBuilder(jobClass.getName(), cron, shardingTotalCount).\r\n                shardingItemParameters(shardingItemParameters).jobParameter(jobParameters).build();\r\n        // 定义SIMPLE类型配置\r\n        SimpleJobConfiguration simpleJobConfig = new SimpleJobConfiguration(simpleCoreConfig, jobClass.getCanonicalName());\r\n        // 定义Lite作业根配置\r\n        LiteJobConfiguration simpleJobRootConfig = LiteJobConfiguration.newBuilder(simpleJobConfig).overwrite(true).build();\r\n        return simpleJobRootConfig;\r\n\r\n    }\r\n}\r\n```\r\n\r\n# 3.测试\r\n\r\n启动项目，就可以看到控制台的输出了，如下所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/99/3)\r\n\r\n\r\n# 4.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_elasticjob](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_elasticjob)', 'dalaoyang', '2019-03-05', 256, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (100, 'SpringBoot使用prometheus监控', '>本文介绍SpringBoot如何使用Prometheus配合Grafana监控。\r\n\r\n# 1.关于Prometheus\r\n\r\nPrometheus是一个根据应用的metrics来进行监控的开源工具。相信很多工程都在使用它来进行监控，有关详细介绍可以查看官网：[https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)。\r\n\r\n# 2.有关Grafana\r\n\r\nGrafana是一个开源监控利器，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/1)\r\n\r\n从图中就可以看出来，使用Grafana监控很高大上，提供了很多可视化的图标。\r\n\r\n官网地址：[https://grafana.com/](https://grafana.com/)\r\n\r\n# 3.SpringBoot使用Prometheus\r\n\r\n## 3.1 依赖内容\r\n\r\n在SpringBoot中使用Prometheus其实很简单，不需要配置太多的东西，在pom文件中加入依赖，完整内容如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_prometheus</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_prometheus</name>\r\n	<description>springboot2_prometheus</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-actuator</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>io.micrometer</groupId>\r\n			<artifactId>micrometer-registry-prometheus</artifactId>\r\n			<version>1.1.3</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n```\r\n\r\n## 3.2 配置文件\r\n\r\n配置文件中加入配置，这里就只进行一些简单配置，management.metrics.tags.application属性是本文配合Grafana的Dashboard设置的，如下所示：\r\n\r\n```\r\nspring.application.name=springboot_prometheus\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.metrics.tags.application=${spring.application.name}\r\n```\r\n\r\n## 3.3 设置application\r\n\r\n修改启动类，如下所示.\r\n\r\n```\r\n@SpringBootApplication\r\npublic class Springboot2PrometheusApplication {\r\n\r\n	public static void main(String[] args) {\r\n		SpringApplication.run(Springboot2PrometheusApplication.class, args);\r\n	}\r\n	@Bean\r\n	MeterRegistryCustomizer<MeterRegistry> configurer(\r\n			@Value(\"${spring.application.name}\") String applicationName) {\r\n		return (registry) -> registry.config().commonTags(\"application\", applicationName);\r\n	}\r\n}\r\n```\r\n\r\nSpringBoot项目到这里就配置完成了，启动项目，访问[http://localhost:8080/actuator/prometheus](http://localhost:8080/actuator/prometheus)，如图所示，可以看到一些度量指标。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/2)\r\n\r\n# 4.Prometheus配置\r\n\r\n## 4.1 配置应用\r\n\r\n在prometheus配置监控我们的SpringBoot应用，完整配置如下所示。\r\n\r\n```\r\n# my global config\r\nglobal:\r\n  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\n# Alertmanager configuration\r\nalerting:\r\n  alertmanagers:\r\n  - static_configs:\r\n    - targets:\r\n      # - alertmanager:9093\r\n\r\n# Load rules once and periodically evaluate them according to the global \'evaluation_interval\'.\r\nrule_files:\r\n  # - \"first_rules.yml\"\r\n  # - \"second_rules.yml\"\r\n\r\n# A scrape configuration containing exactly one endpoint to scrape:\r\n# Here it\'s Prometheus itself.\r\nscrape_configs:\r\n  - job_name: \'prometheus\'\r\n    static_configs:\r\n    - targets: [\'127.0.0.1:9090\']\r\n###以下内容为SpringBoot应用配置\r\n  - job_name: \'springboot_prometheus\'\r\n    scrape_interval: 5s\r\n    metrics_path: \'/actuator/prometheus\'\r\n    static_configs:\r\n      - targets: [\'127.0.0.1:8080\']\r\n```\r\n\r\n## 4.2 启动Prometheus\r\n\r\n启动Prometheus，浏览器访问，查看Prometheus页面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/3)\r\n\r\n\r\n点击如图所示位置，可以查看Prometheus监控的应用。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/4)\r\n\r\n列表中UP的页面为存活的实例，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/5)\r\n\r\n也可以查看很多指数，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/6)\r\n\r\n\r\n# 5.Grafana配置\r\n\r\n启动Grafana，配置Prometheus数据源，这里以ID是4701的Doshboard为例（地址：[https://grafana.com/dashboards/4701](https://grafana.com/dashboards/4701)）如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/7)\r\n\r\n在Grafana内点击如图所示import按钮\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/8)\r\n\r\n在如图所示位置填写4701，然后点击load。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/9)\r\n\r\n接下来导入Doshboard。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/10)\r\n\r\n导入后就可以看到我们的SpringBoot项目对应的指标图表了，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/100/11)\r\n\r\n\r\n# 6.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_prometheus](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_prometheus)', 'dalaoyang', '2019-03-07', 827, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (101, 'SpringBoot使用SOFA-Lookout监控', '>本文介绍SpringBoot使用蚂蚁金服SOFA-Lookout配合Prometheus进行监控。\r\n\r\n# 1.SOFA-Lookout介绍\r\n\r\n上一篇已经介绍使用Prometheus进行暴露SpringBoot的一些指标进行监控，[传送门](https://www.dalaoyang.cn/article/100)，这一篇介绍如何使用SOFA-Lookout配合Prometheus。\r\n\r\nSOFA-Lookout是蚂蚁金服开源的一款解决系统的度量和监控问题的轻量级中间件服务。它提供的服务包括：Metrics 的埋点、收集、加工、存储与查询等。\r\n\r\n正如介绍的，SOFA-Lookout提供了一些常用的监控指标，比如JVM线程，JVM类加载，JVM内存，JVM垃圾回收，机器文件系统信息和机器信息。在1.5.0版本之后默认也提供了一些Linux操作系统的信息。具体可以查看：[https://www.sofastack.tech/sofa-lookout/docs/client-ext-metrics](https://www.sofastack.tech/sofa-lookout/docs/client-ext-metrics)\r\n\r\n\r\n# 2.SpringBoot使用SOFA-Lookout\r\n\r\n## 2.1 配置依赖\r\n\r\n新建项目，在项目中加入SOFA依赖，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<parent>\r\n		<groupId>org.springframework.boot</groupId>\r\n		<artifactId>spring-boot-starter-parent</artifactId>\r\n		<version>2.1.3.RELEASE</version>\r\n		<relativePath/> <!-- lookup parent from repository -->\r\n	</parent>\r\n	<groupId>com.dalaoyang</groupId>\r\n	<artifactId>springboot2_sofa_lookout</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>springboot2_sofa_lookout</name>\r\n	<description>springboot2_sofa_lookout</description>\r\n\r\n	<properties>\r\n		<java.version>1.8</java.version>\r\n	</properties>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-web</artifactId>\r\n		</dependency>\r\n\r\n		<dependency>\r\n			<groupId>org.springframework.boot</groupId>\r\n			<artifactId>spring-boot-starter-test</artifactId>\r\n			<scope>test</scope>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.alipay.sofa.lookout</groupId>\r\n			<artifactId>lookout-sofa-boot-starter</artifactId>\r\n			<version>1.5.2</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>com.alipay.sofa.lookout</groupId>\r\n			<artifactId>lookout-reg-prometheus</artifactId>\r\n			<version>1.5.2</version>\r\n		</dependency>\r\n	</dependencies>\r\n\r\n	<build>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.springframework.boot</groupId>\r\n				<artifactId>spring-boot-maven-plugin</artifactId>\r\n			</plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n## 2.2 配置SOFA-Lookout端口\r\n\r\n这里需要配置一个SOFA-Lookout的端口，生产环境使用的话一定要查看这个端口是不是被占用了。配置如下，这里配置的端口是8081。\r\n\r\n```\r\nspring.application.name=springboot2_sofa_lookout\r\ncom.alipay.sofa.lookout.prometheus-exporter-server-port=8081\r\n```\r\n\r\n其实到这里，SpringBoot项目已经配置完成了，当然还可以自定义一些指标，这里不做介绍。\r\n\r\n# 3.Prometheus配置\r\n\r\nPrometheus需要配置一下刚刚SOFA-Lookout的端口，如下：\r\n\r\n```\r\n  - job_name: \'springboot2_sofa_lookout\'\r\n    scrape_interval: 5s\r\n    static_configs:\r\n      - targets: [\'localhost:8081\']\r\n```\r\n\r\n# 4.Grafana\r\n\r\n这里也可以将Prometheus展示给Grafana，我也查询了很多，但是貌似目前Grafana还没有默认推荐的Dashboard，大家可以根据情况自行构建，当然，如果有好的也希望可以推荐一下。\r\n\r\n# 5.测试\r\n\r\n启动SpringBoot应用，控制台如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/1)\r\n\r\n看到红框部分就是启动成功了。接下来查看Prometheus界面，如下。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/2)\r\n\r\n这里Grafana在看一下Grafana界面，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/101/3)\r\n\r\n# 6.源码\r\n\r\n源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_sofa_lookout](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_sofa_lookout)', 'dalaoyang', '2019-03-10', 436, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (102, 'SpringCloud使用Prometheus监控(基于Eureka)', '>本文介绍SpringCloud使用Prometheus，基于Eureka服务发现。\r\n\r\n# 1.Prometheus介绍\r\n\r\n在之前写过两篇有关Prometheus使用的文章，如下：\r\n\r\n[《SpringBoot使用prometheus监控》](https://www.dalaoyang.cn/article/100)   \r\n\r\n[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)\r\n\r\n但是如果使用微服务的话，一个服务一个服务的配置似乎太麻烦，Prometheus提供了很多服务发现的机制去统一配置服务，具体可以查看官网介绍：[https://prometheus.io/docs/prometheus/latest/configuration/configuration/]()\r\n\r\n包含如下这些配置：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/1)\r\n\r\n从图中可以看出，这里提供了Consul的服务发现机制，没有Eureka的服务发现机制。但是如果Eureka想要使用的话可以通过配置一个适配器的方式，使用consul_sd_config配置的方式使用Prometheus服务发现。\r\n\r\n\r\n# 2.Eureka Server\r\n\r\n创建一个Eureka Server，这里使用的Eureka最新版本Greenwich.SR1，也就是现在Idea默认创建的，在配置中加入eureka-consul-adapter依赖，pom文件完整内容如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_prometheus_server</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_prometheus_server</name>\r\n    <description>springcloud_prometheus_server</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>at.twinformatics</groupId>\r\n            <artifactId>eureka-consul-adapter</artifactId>\r\n            <version>1.1.0</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <repositories>\r\n        <repository>\r\n            <id>spring-milestones</id>\r\n            <name>Spring Milestones</name>\r\n            <url>https://repo.spring.io/milestone</url>\r\n        </repository>\r\n    </repositories>\r\n\r\n</project>\r\n```\r\n\r\n这里需要注意一下SpringCloud版本与eureka-consul-adapter的对照，如下所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/2)\r\n\r\n剩下的就是一些简单地配置，如配置文件：\r\n\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n启动类加入注解启动注册中心，如下：\r\n\r\n```\r\n@SpringBootApplication\r\n@EnableEurekaServer //启动服务注册中心\r\npublic class SpringcloudPrometheusServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudPrometheusServerApplication.class, args);\r\n    }\r\n\r\n}\r\n```\r\n\r\n\r\n# 3.Eureka Client\r\n\r\n其实这个也没什么好说的，和普通使用Prometheus一样，当然，也可以使用SOFA-Lookout的模式，这里根据情况自行选择即可，这里以使用micrometer-registry-prometheus依赖为例，完整pom如下所示。\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.3.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_prometheus_client</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_prometheus_client</name>\r\n    <description>springcloud_prometheus_client</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-actuator</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.micrometer</groupId>\r\n            <artifactId>micrometer-registry-prometheus</artifactId>\r\n            <version>1.1.3</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <repositories>\r\n        <repository>\r\n            <id>spring-milestones</id>\r\n            <name>Spring Milestones</name>\r\n            <url>https://repo.spring.io/milestone</url>\r\n        </repository>\r\n    </repositories>\r\n\r\n</project>\r\n```\r\n\r\n配置文件如下，端口号8888，如下：\r\n\r\n```\r\n##端口号\r\nserver.port=8888\r\n\r\nspring.application.name=springboot_prometheus_client\r\n\r\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\r\n\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.metrics.tags.application=${spring.application.name}\r\n\r\n```\r\n\r\n\r\n启动类如下：\r\n\r\n```\r\n@SpringBootApplication\r\npublic class SpringcloudPrometheusClientApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudPrometheusClientApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    MeterRegistryCustomizer<MeterRegistry> configurer(\r\n            @Value(\"${spring.application.name}\") String applicationName) {\r\n        return (registry) -> registry.config().commonTags(\"application\", applicationName);\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 4.Prometheus配置\r\n\r\n在Prometheus中配置eureka地址（server），以及需要收集的服务（services）。\r\n\r\n```\r\n  - job_name: \'consul-prometheus\'\r\n    scheme: http\r\n    metrics_path: \'/actuator/prometheus\'\r\n    consul_sd_configs:\r\n    #consul 地址\r\n      - server: \'127.0.0.1:8761\'\r\n        scheme: http\r\n        services: [SPRINGBOOT_PROMETHEUS_CLIENT]\r\n```\r\n\r\n# 5.测试\r\n\r\n分别启动Eureka-Server和Eureka-Client，首先查看Eureka界面，如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/3)\r\n\r\n\r\n接下来查看一下Prometheus，如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/4)\r\n\r\n\r\n从上图可以看到，服务以及被收集了，接下来查看grafana控制台，如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/102/5)\r\n\r\n\r\n# 6.源码\r\n\r\n源码地址：\r\n\r\nEureka Server : [https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_server](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_server)\r\n\r\nEureka Client : [https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_client](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_prometheus_client)', 'dalaoyang', '2019-03-11', 623, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (103, 'SpringCloud Gateway 测试问题解决', '>本文针对于测试环境SpringCloud Gateway问题解决。\r\n\r\n# 1.背景介绍\r\n\r\n本文遇到的问题都是在测试环境真正遇到的问题，不一定试用于所有人，仅做一次记录，便于遇到同样问题的干掉这些问题。\r\n\r\n使用版本：SpringCloud 2.0.0.RELEASE\r\n\r\n## 1.1 Gateway配置\r\n\r\n之前系统是由阿里云SLB直接分发到几台生产服务器，但是经过研究，决定在中间加一层网关，也就是阿里云SLB分发流量到Gateway到下游服务。但是又由于种种原因，决定使用Host方式进行拦截处理，以下为部分配置代码：\r\n\r\n```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      discovery:\r\n        locator:\r\n          enabled: true\r\n      routes:\r\n        - id: test_client\r\n          uri: lb://TEST-CLIENT\r\n          predicates:\r\n            - Host=www.dalaoyang.cn\r\n          order: 1\r\n          filters:\r\n            - DalaoyangAuth\r\n            \r\n```\r\n\r\n\r\n注意，其中部分内容并非真实环境内容，但是场景绝对真实，如：\r\n\r\n* test_client：routes的ID。\r\n* uri：这里使用的Eureka内的application name\r\n* Host：需要拦截的域名\r\n* filters：域名前缀\r\n\r\n## 1.2 Gateway过滤器\r\n\r\n过滤器内容如下，稍后介绍：\r\n\r\n```\r\n\r\n@Component\r\npublic class DalaoyangAuthFilterFactory  extends AbstractGatewayFilterFactory<Object> {\r\n    private static final Logger logger = LoggerFactory.getLogger(DalaoyangAuthFilterFactory.class);\r\n\r\n    @Override\r\n    public GatewayFilter apply(Object config) {\r\n        return (exchange, chain) -> {\r\n            ServerHttpRequest host = exchange.getRequest().mutate().headers(httpHeaders -> {\r\n                httpHeaders.remove(\"gate_way_auth\");\r\n                httpHeaders.add(\"gate_way_auth\", \"yes\");\r\n            }).build();\r\n            //将现在的request 变成 change对象\r\n            ServerWebExchange build = exchange.mutate().request(host).build();\r\n            return chain.filter(build);\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n## 1.3 下游服务拦截器\r\n\r\n下游服务拦截器大致内容如下，这段代码是原有的代码，这个功能大概就是加载公共的属性basePath，用于加载静态资源，比如前端的jquery.js，根据域名判断，然后选择是加载为http://127.0.0.1:8080/jquery.js还是https://www.dalaoyang.cn/jquery.js这种：\r\n\r\n```\r\npublic class GlobalInterceptorAdapter extends HandlerInterceptorAdapter {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(GlobalInterceptorAdapter.class);\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws\r\n            Exception {\r\n        String scheme = request.getScheme();\r\n        String serverName = request.getServerName();\r\n        int port = request.getServerPort();\r\n        String path = request.getContextPath();\r\n        String basePath = \"\";\r\n        if(serverName.indexOf(\"www.dalaoyang.cn\")!=-1){\r\n        	basePath = \"//\" + serverName + path;\r\n        }else {\r\n        	basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n        }\r\n        if (logger.isDebugEnabled()) {\r\n            logger.debug(basePath);\r\n        }\r\n        request.setAttribute(\"basePath\", basePath);\r\n        return true;\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 1.4 下游服务用户过滤器\r\n\r\n这段代码也是原有的代码，用户Session过滤器，这个完整内容很多，只截取遇到问题的片段，大致内容就是判断用户是否在其他地方登录，如果登录了就弹出的固定的提示页面，内容如下：\r\n\r\n```\r\nString url = null;\r\nApplicationConfig applicationConfig0 = getApplicationConfig();\r\nif(applicationConfig0 != null) {\r\n	String scheme = applicationConfig0.getUrlScheme();\r\n    if(scheme != null) {\r\n	    String requestUrl = request.getRequestURL().toString();\r\n		    if(requestUrl != null && requestUrl.length() > 8) {\r\n				requestUrl = requestUrl.substring(requestUrl.indexOf(\":\"), \r\n										requestUrl.indexOf(\"/\", 8));\r\n				url = scheme + requestUrl;\r\n			}\r\n	}\r\n}\r\nif(url != null) {\r\n	response.sendRedirect(url + request.getContextPath() + \"/session-time-out\");\r\n} else {\r\n	response.sendRedirect(request.getContextPath() + \"/session-time-out\");\r\n}\r\n```\r\n\r\n## 1.5 跳转流程\r\n\r\n跳转如下：\r\n\r\n1.域名指向了Gateway地址。   \r\n2.在浏览器使用域名访问Gateway，被Gateway转发到下游服务，返回对应响应。\r\n\r\n\r\n# 2.问题一 下游服务无法获取域名\r\n\r\n在使用上述配置后，使用request.getServerName()方法已经无法获取到域名了，经过测试，获取到的是服务器的ip地址，导致虽然页面可以正常跳转，但是无法获取到正确的域名，导致静态资源加载有问题。\r\n\r\n在网上请教了很多人，本想看看是不是什么地方没有设置对，但是后台还是采取大多数人的建议，在header中加入一个域名信息，修改后Gateway过滤器如下：\r\n\r\n```\r\n@Component\r\npublic class DalaoyangAuthFilterFactory  extends AbstractGatewayFilterFactory<Object> {\r\n    private static final Logger logger = LoggerFactory.getLogger(DalaoyangAuthFilterFactory.class);\r\n\r\n    @Override\r\n    public GatewayFilter apply(Object config) {\r\n        return (exchange, chain) -> {\r\n            ServerHttpRequest host = exchange.getRequest().mutate().headers(httpHeaders -> {\r\n                httpHeaders.remove(\"gate_way_auth\");\r\n                httpHeaders.add(\"gate_way_auth\", \"yes\");\r\n                \r\n                httpHeaders.add(\"realServerName\",\r\n                exchange.getRequest().getURI().getHost());\r\n                logger.info(\"headers:\" + httpHeaders.toString());\r\n            }).build();\r\n            //将现在的request 变成 change对象\r\n            ServerWebExchange build = exchange.mutate().request(host).build();\r\n            return chain.filter(build);\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n很容易看到，就是如下这句话：\r\n\r\n```\r\nhttpHeaders.add(\"realServerName\",\r\n              exchange.getRequest().getURI().getHost());\r\n```\r\n\r\n下游服务过滤修改为：\r\n\r\n```\r\npublic class GlobalInterceptorAdapter extends HandlerInterceptorAdapter {\r\n    private static Logger logger = LoggerFactory.getLogger(GlobalInterceptorAdapter.class);\r\n    private final String TEST_SERVERNAME = \"www.dalaoyang.cn\";\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws\r\n            Exception {\r\n        String scheme = request.getScheme();\r\n        String serverName = request.getServerName();\r\n        String realServerName = request.getHeader(\"realServerName\");\r\n        int port = request.getServerPort();\r\n        String path = request.getContextPath();\r\n        String basePath = \"\";\r\n        if((!StringUtils.isBlank(realServerName))){\r\n            if(realServerName.contains(TEST_SERVERNAME)){\r\n                basePath = \"//\" + realServerName + path;\r\n            }\r\n        }else {\r\n            basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n        }\r\n        if (logger.isDebugEnabled()) {\r\n            logger.debug(basePath);\r\n        }\r\n        request.setAttribute(\"basePath\", basePath);\r\n        return true;\r\n    }\r\n}\r\n```\r\n\r\n其实大致内容就是，使用如下方式获取域名：\r\n\r\n```\r\nString realServerName = request.getHeader(\"realServerName\");\r\n```\r\n\r\n到此，问题解决了，大部分内容跳转正常。\r\n\r\n# 3.问题二 NPE异常\r\n\r\n部分请求，经过路由访问报如下错误。\r\n\r\n\r\n```\r\n2018-06-20 01:26:04.254 ERROR 1 --- [reactor-http-client-epoll-11] .a.w.r.e.DefaultErrorWebExceptionHandler : Failed to handle request [DELETE http://localhost:8080/entity/5b29ad2cb3cb1f00010a1546]\r\n\r\njava.lang.NullPointerException: null\r\n        at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1011) ~[na:1.8.0_111]\r\n        at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:1006) ~[na:1.8.0_111]\r\n        at org.springframework.cloud.gateway.filter.NettyRoutingFilter.lambda$filter$3(NettyRoutingFilter.java:117) ~[spring-cloud-gateway-core-2.0.0.RELEASE.jar!/:2.0.0.RELEASE]\r\n        at reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:177) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:108) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber.onNext(FluxRetryPredicate.java:81) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:146) ~[reactor-core-3.1.8.RELEASE.jar!/:3.1.8.RELEASE]\r\n        at reactor.ipc.netty.channel.PooledClientContextHandler.fireContextActive(PooledClientContextHandler.java:85) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at reactor.ipc.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:578) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at reactor.ipc.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:136) ~[reactor-netty-0.7.8.RELEASE.jar!/:0.7.8.RELEASE]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:438) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310) ~[netty-codec-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284) ~[netty-codec-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:253) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965) ~[netty-transport-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:808) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:408) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:308) ~[netty-transport-native-epoll-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) ~[netty-common-4.1.25.Final.jar!/:4.1.25.Final]\r\n        at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_111]\r\n```\r\n\r\n遇到问题后，没有很慌，打开了百度查了查（微笑）。百度没让我很失望，基本上没啥答复，然后谷歌了一下，看到了github上的一个issues，大致内容感觉是SpringCloud Gateway 2.0.0.RELEASE版本有些问题，升级一下版本就好了，如图。\r\n\r\nGithub issues地址：\r\n\r\n[https://github.com/spring-cloud/spring-cloud-gateway/issues/429](https://github.com/spring-cloud/spring-cloud-gateway/issues/429)\r\n[https://github.com/spring-cloud/spring-cloud-gateway/issues/374](https://github.com/spring-cloud/spring-cloud-gateway/issues/374)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/103/1)\r\n\r\n说实话，感觉是版本问题，但是又看到了一篇国人的文章，地址是：[http://xiaoqiangge.com/aritcle/1545889008833.html](http://xiaoqiangge.com/aritcle/1545889008833.html)，问题大致类似，加了一下博主的微信，请教了一下，大致了解到了，升级了一下版本，问题解决。\r\n\r\n**感谢小强哥！！！**   \r\n\r\n\r\n# 4.问题三 下游用户过滤器跳转失效\r\n\r\n问题是这样的，刚刚介绍了，用户在其他地方登录会自动跳转至一个界面提示给用户，发现问题是无法跳转。\r\n\r\n查看gateway日志，大概提示了这样一句话，如下：\r\n\r\n```\r\nUnhandled failure: Connection has been closed, response already set (status=302)\r\n```\r\n\r\n从内容大致可以看出，重定向有问题，想到了在用户过滤器中最后的重定向，决定在这里下手，修改后内容如下：\r\n\r\n```\r\nString scheme = request.getScheme();\r\nString serverName = request.getServerName();\r\nString realServerName = request.getHeader(\"realServerName\");\r\nint port = request.getServerPort();\r\nString path = request.getContextPath();\r\nString basePath = \"\";\r\nif((!StringUtils.isEmpty(realServerName))){\r\n        if(realServerName.contains(TEST_SERVERNAME)){\r\n		basePath = \"https://\" + realServerName + path;\r\n	}else {\r\n		basePath = scheme + \"://\" + serverName + \":\" + port + path;\r\n	}\r\nresponse.sendRedirect(basePath + \"/session-time-out\");\r\n```\r\n\r\n问题也解决了，目前还在踩坑测试中，如果大家有类似经验可以一起探讨。', 'dalaoyang', '2019-03-13', 450, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (104, 'SpringCloud使用Sofa-lookout监控(基于Eureka)', '>本文介绍SpringCloud使用Sofa-lookout，基于Eureka服务发现。\r\n\r\n## 1.前景\r\n\r\n本文属于是前几篇文章的后续，其实一开始感觉这个没有什么必要写的，但是最近一个朋友问我关于这个的问题，所以想着还是写一篇基于Eureka监控使用Pormetheus监控Sofa-Lookout监控的文章。\r\n\r\n前几篇文章请看：\r\n\r\n[《SpringBoot使用prometheus监控》](https://www.dalaoyang.cn/article/100)   \r\n\r\n[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)\r\n\r\n[《SpringCloud使用Prometheus监控(基于Eureka)》](https://www.dalaoyang.cn/article/102)\r\n\r\n至于使用consul服务发现监控这里就不介绍了，网上的文章很多，千篇一律。这一篇与上面的这个文章还是有一些不同的，Sofa-Lookout是通过暴露一个端口来进行监控，比较特殊，所以这里给大家借鉴一下。\r\n\r\n## 2.Eureka Server\r\n\r\n本文还是需要在Eureka上面加入eureka-consul-adapter依赖，eureka-consul-adapter项目github地址：\r\n\r\n[https://github.com/twinformatics/eureka-consul-adapter](https://github.com/twinformatics/eureka-consul-adapter)\r\n\r\n这里在介绍一下Eureka Server内容，就是在普通Eureka Server基础上加入上述依赖，完整pom如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_sofalookout_server</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_sofalookout_server</name>\r\n    <description>springcloud_sofalookout_server</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>at.twinformatics</groupId>\r\n            <artifactId>eureka-consul-adapter</artifactId>\r\n            <version>1.1.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件如下：\r\n\r\n```\r\nserver.port=8761\r\n\r\neureka.instance.hostname=localhost\r\neureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/\r\n\r\n##禁止自己向自己注册\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```\r\n\r\n启动类如下：\r\n\r\n```\r\npackage com.dalaoyang;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\r\n\r\n@SpringBootApplication\r\n@EnableEurekaServer //启动服务注册中心\r\npublic class SpringcloudSofalookoutServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringcloudSofalookoutServerApplication.class, args);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n## 3.Eureka Client\r\n\r\n这里有一些是与之前[《SpringBoot使用SOFA-Lookout监控》](https://www.dalaoyang.cn/article/101)文章不同的地方，首先在pom文件中加入sofa依赖：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springcloud_sofalookout_client</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springcloud_sofalookout_client</name>\r\n    <description>springcloud_sofalookout_client</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n        <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.alipay.sofa.lookout</groupId>\r\n            <artifactId>lookout-sofa-boot-starter</artifactId>\r\n            <version>1.5.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.alipay.sofa.lookout</groupId>\r\n            <artifactId>lookout-reg-prometheus</artifactId>\r\n            <version>1.5.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>org.springframework.cloud</groupId>\r\n                <artifactId>spring-cloud-dependencies</artifactId>\r\n                <version>${spring-cloud.version}</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n\r\n配置文件配置如下：\r\n\r\n```\r\n##端口号\r\nserver.port=8888\r\n##服务名称\r\nspring.application.name=springboot_sofalookout_client\r\n##EurekaServer\r\neureka.client.service-url.defaultZone=http://server1:8761/eureka/\r\n\r\ncom.alipay.sofa.lookout.prometheus-exporter-server-port=8081\r\neureka.instance.metadata-map.address=${spring.cloud.client.ip-address}:${com.alipay.sofa.lookout.prometheus-exporter-server-port}\r\n\r\n\r\n\r\n\r\n```\r\n\r\n其中需要解释如下两个参数：\r\n\r\n* com.alipay.sofa.lookout.prometheus-exporter-server-port：sofa-lookout端口\r\n* eureka.instance.metadata-map.address：封装的Eureka元信息，内容是真正sofa-lookout数据的地址，方便稍后prometheus使用，这个属性不是必须要叫这个名字！！！\r\n\r\n## 4.Prometheus\r\n\r\nprometheus配置如下：\r\n\r\n```\r\n# my global config\r\nglobal:\r\n  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\r\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\r\n  # scrape_timeout is set to the global default (10s).\r\n\r\n# Alertmanager configuration\r\nalerting:\r\n  alertmanagers:\r\n  - static_configs:\r\n    - targets:\r\n      # - alertmanager:9093\r\n\r\n# Load rules once and periodically evaluate them according to the global \'evaluation_interval\'.\r\nrule_files:\r\n  # - \"first_rules.yml\"\r\n  # - \"second_rules.yml\"\r\n\r\n# A scrape configuration containing exactly one endpoint to scrape:\r\n# Here it\'s Prometheus itself.\r\nscrape_configs:\r\n  - job_name: \'prometheus\'\r\n    static_configs:\r\n    - targets: [\'127.0.0.1:9090\']\r\n\r\n  - job_name: \'consul-prometheus\'\r\n    consul_sd_configs:\r\n      - server: \'172.16.103.33:8761\'\r\n        services: [SPRINGBOOT_SOFALOOKOUT_CLIENT]\r\n    relabel_configs:\r\n      - source_labels: [\'__meta_consul_metadata_address\']\r\n        target_label:  __address__\r\n\r\n```\r\n\r\n这里有几点需要注意的：\r\n\r\n* 172.16.103.33是我的内网IP，这个不需太多关注。\r\n* relabel_configs标签用于修改一些默认配置，比如本文使用__meta_consul_metadata_address属性替代__address__属性，这里的__meta_consul_metadata_address属性值就是我们在application.properties中的eureka.instance.metadata-map.address属性值，这个是eureka-consul-adapter依赖为我们转换的。\r\n* 上面两个属性怎么获取的？ 接下来告诉你！\r\n\r\n## 5.测试\r\n\r\n分别启动EurekaServer，EurekaClient，prometheus，首先查看Eureka，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/1)\r\n\r\n实例已经注册了，接下来查看prometheus/targets，如图所示。\r\n\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/2)\r\n\r\n从这里可以看到，prometheus已经可以成功收集了，接下来我们查看一下都有哪些属性，鼠标放到对应的labels上，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/3)\r\n\r\n浮框的内容就是对应实例的属性值，可以对应使用。\r\n\r\n接下来查看对应Grafana，也可以查看到对应信息了，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/104/4)\r\n\r\n## 6.源码\r\n\r\nEureka Server源码地址：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_server](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_server)\r\n\r\nEureka Client源码地址：[https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_client](https://gitee.com/dalaoyang/springcloud_learn/tree/master/springcloud_sofalookout_client)', 'dalaoyang', '2019-04-18', 206, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (105, ' 使用JumpServer管理你的服务器', '>本文介绍CentOS 7从安装jumpserver到简单使用jumpserver管理服务器。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/1)\r\n\r\n## 1.Jumpserver介绍\r\n\r\nJumpserver是一款开源的开源的堡垒机，如下图是官网介绍。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/2)\r\n\r\n官网地址：[http://www.jumpserver.org/](http://www.jumpserver.org/)   \r\n官网文档地址：[http://docs.jumpserver.org/zh/docs/index.html](http://docs.jumpserver.org/zh/docs/index.html)   \r\nGithub地址：[https://github.com/jumpserver/jumpserver](https://github.com/jumpserver/jumpserver)\r\n\r\n## 2.安装\r\n\r\n官方文档推荐了很多安装方式，这里由于老杨使用的是使用Docker安装，使用的自己的Redis和Mysql，首先生成随机加密秘钥(SECRET_KEY)，命令如下：\r\n\r\n```\r\nif [ \"$SECRET_KEY\" = \"\" ]; then SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`; echo \"SECRET_KEY=$SECRET_KEY\" >> ~/.bashrc; echo $SECRET_KEY; else echo $SECRET_KEY; fi\r\n```\r\n\r\n然后生成BOOTSTRAP_TOKEN，命令如下：\r\n```\r\nif [ \"$BOOTSTRAP_TOKEN\" = \"\" ]; then BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`; echo \"BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN\" >> ~/.bashrc; echo $BOOTSTRAP_TOKEN; else echo $BOOTSTRAP_TOKEN; fi\r\n```\r\n\r\n这里都是按照官方文档命令来的，然后执行Docker命令(注：需自行安装docker)，如下所示。\r\n\r\n\r\n```\r\ndocker run --name jms_all -d \\\r\n    -v /opt/mysql:/var/lib/mysql \\\r\n    -v /opt/jumpserver:/opt/jumpserver/data/media \\\r\n    -p 80:80 \\\r\n    -p 2222:2222 \\\r\n    -e SECRET_KEY=***\\\r\n    -e BOOTSTRAP_TOKEN=*** \\\r\n    -e DB_HOST=*** \\\r\n    -e DB_PORT=*** \\\r\n    -e DB_USER=*** \\\r\n    -e DB_PASSWORD=*** \\\r\n    -e DB_NAME=*** \\\r\n    -e REDIS_HOST=*** \\\r\n    -e REDIS_PORT=*** \\\r\n    -e REDIS_PASSWORD=*** \\\r\n    jumpserver/jms_all:latest\r\n```\r\n\r\n注意如下参数需自行设置：\r\n\r\n* SECRET_KEY：上述步骤中生成的SECRET_KEY\r\n* BOOTSTRAP_TOKEN：上述步骤中生成的BOOTSTRAP_TOKEN\r\n* DB_HOST：数据库地址\r\n* DB_PORT：数据库端口\r\n* DB_USER：数据库用户名\r\n* DB_PASSWORD：数据库密码\r\n* DB_NAME：数据库名称\r\n* REDIS_HOST：Redis地址\r\n* REDIS_PORT：Redis端口\r\n* REDIS_PASSWORD：Redis密码\r\n\r\n当然，官网也声明了：不建议在生产中使用, 因为所有软件都打包到一个Docker中了, 不是Docker最佳实践\r\n\r\n采用其他方法可以参考文档，地址：[http://docs.jumpserver.org/zh/docs/step_by_step.html](http://docs.jumpserver.org/zh/docs/step_by_step.html)\r\n\r\n**这里还有一点，80端口和2222端口不要被占用了！！！**\r\n\r\n## 3.配置\r\n\r\n如果安装没有问题的话，访问对应安装服务器ip地址如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/3)\r\n\r\n\r\n**ps:默认用户名密码都是admin，可以自行修改**\r\n\r\n登录后，如图所示，个人还是很喜欢这个设计风格的。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/4)\r\n\r\n首先在进入**资产管理-管理用户**，如图。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/5)\r\n\r\n介绍一下，这个管理用的意义个人理解就是访问你服务器的账号，点击创建管理用户按钮，进入如图页面\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/6)\r\n\r\n填写如下内容：\r\n\r\n* 名称:这个自行设置。\r\n* 用户名：访问服务器的用户名，比如你远程服务器的用户名root\r\n* 密码：访问服务器的密码\r\n* 私钥：访问服务器的私钥文件\r\n* 备注：备注信息。\r\n\r\n都填写完成后保存即可。\r\n\r\n\r\n接下来需要创建系统用户，何为系统用户呢，官方文档给出了如下解释，\r\n\r\n>系统用户是 Jumpserver跳转登录资产时使用的用户，可以理解为登录资产用户，如 web, sa, dba(ssh web@some-host), 而不是使用某个用户的用户名跳转登录服务器(ssh xiaoming@some-host); 简单来说是 用户使用自己的用户名登录Jumpserver, Jumpserver使用系统用户登录资产。 系统用户创建时，如果选择了自动推送 Jumpserver会使用ansible自动推送系统用户到资产中，如果资产(交换机、windows)不支持ansible, 请手动填写账号密码。目前还不支持Windows的自动推送\r\n\r\n填写内容这里就不介绍了，没什么特别的，根据需要自行设置即可。\r\n\r\n接下来我们回到**资产管理-资产列表**，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/7)\r\n\r\n点击创建资产，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/8)\r\n\r\n其中填写如下必填项:\r\n\r\n* 主机名：自定义即可\r\n* IP：服务器IP\r\n* 协议：根据情况选择\r\n* 端口：根据情况设置\r\n* 系统平台：根据情况选择\r\n* 管理用户：选择刚刚新建的管理用户\r\n\r\n配置完成后保存即可。\r\n\r\n\r\n在下图位置可以查看硬件信息，测试连接等等。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/9)\r\n\r\n接下来进入**权限管理-资产授权   **，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/10)\r\n\r\n点击创建授权规则按钮，进入如图页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/11)\r\n\r\n这里需要填写如下几项信息：\r\n\r\n* 名称：自己设置\r\n* 用户：设置权限用户\r\n* 用户组：设置权限用户组，这两个很好理解，就是给谁授权，或者给哪个组的用户授权\r\n* 资产：哪些服务器\r\n* 节点：类似资产组的概念\r\n* 系统用户：使用刚刚设置的系统用户\r\n\r\n填写完成后点击提交即可。\r\n\r\n## 4.连接使用\r\n\r\n这里我使用的是SecureCRT，新建一个Session Wizard，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/12)\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/13)\r\n\r\n然后选择刚刚创建的Session Wizard，输入密码，进入如图页面。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/14)\r\n\r\n然后输入ID进入对应服务器，比如这里输入3，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/105/15)\r\n\r\n\r\n接下来的操作就是正常操作服务器了。\r\n\r\n## 5.总结\r\n\r\n个人感觉jumpserver适合将多个平台的服务器整合到一起，然后分配权限使用，如果就一两个的话就没必要搞了，当然，也可以根据个人喜好玩玩。', 'dalaoyang', '2019-04-19', 222, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (106, 'SpringBoot使用Graylog日志收集', '>本文介绍SpringBoot如何使用Graylog日志收集。\r\n\r\n## 1.Graylog介绍\r\n\r\nGraylog是一个生产级别的日志收集系统，集成Mongo和Elasticsearch进行日志收集。其中Mongo用于存储Graylog的元数据信息和配置信息，ElasticSearch用于存储数据。\r\n\r\n架构图如下：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/1)\r\n\r\n生产环境配置图如下：\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/2)\r\n\r\n\r\n## 2.安装Graylog\r\n\r\n在官方文档上推荐了很多种安装的方式，这里以docker-compose的方式为例，进行安装Graylog，mongo，elasticsearch。\r\n\r\ndocker-compose.yml内容如下（这里是在官网的基础上改了一下）：\r\n\r\n```\r\nversion: \'2\'\r\nservices:\r\n  # MongoDB: https://hub.docker.com/_/mongo/\r\n  mongodb:\r\n    image: mongo:3\r\n  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.6/docker.html\r\n  elasticsearch:\r\n    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6.1\r\n    environment:\r\n      - http.host=0.0.0.0\r\n      - transport.host=localhost\r\n      - network.host=0.0.0.0\r\n      - \"ES_JAVA_OPTS=-Xms256m -Xmx256m\"\r\n    ulimits:\r\n      memlock:\r\n        soft: -1\r\n        hard: -1\r\n    mem_limit: 512m\r\n  # Graylog: https://hub.docker.com/r/graylog/graylog/\r\n  graylog:\r\n    image: graylog/graylog:3.0\r\n    environment:\r\n      # CHANGE ME (must be at least 16 characters)!\r\n      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper\r\n      # Password: admin\r\n      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\r\n      - GRAYLOG_HTTP_EXTERNAL_URI=http://106.13.35.42:9000/\r\n    links:\r\n      - mongodb:mongo\r\n      - elasticsearch\r\n    depends_on:\r\n      - mongodb\r\n      - elasticsearch\r\n    ports:\r\n      # Graylog web interface and REST API\r\n      - 9000:9000\r\n      # Syslog TCP\r\n      - 1514:1514\r\n      # Syslog UDP\r\n      - 1514:1514/udp\r\n      # GELF TCP\r\n      - 12201:12201\r\n      # GELF UDP\r\n      - 12201:12201/udp\r\n```\r\n\r\n其中106.13.35.42是我的外网ip，本地服务使用127.0.0.1即可。\r\n\r\n其他方式可以查看官方文档，[https://docs.graylog.org/en/3.0/pages/installation.html](https://docs.graylog.org/en/3.0/pages/installation.html)\r\n\r\n\r\n## 3.配置Graylog\r\n\r\n在浏览器访问http://ip:9000，如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/3)\r\n\r\n这里默认用户名密码都是admin，进入后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/4)\r\n\r\n选择System按钮中的input，录入一个输入源，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/5)\r\n\r\n这里以GELF UDP为例，在图中位置选择GELF UDP，选择完成后点击Launch new input，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/6)\r\n\r\n在Node处选择自己安装的，剩下的就根据需要填写即可，如图\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/7)\r\n\r\n保存完成后如图，到这里就已经配置完成了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/8)\r\n\r\n\r\n## 4.SpringBoot日志输出到Graylog\r\n\r\n这里分别举例Logback日志和Log4j2日志。\r\n\r\n### 4.1 Logback日志\r\n\r\n\r\n这里使用的logback-gelf向Graylog输出日志，在github上有对logback-gelf的详细使用介绍，这里只是简单举例。Github地址：[https://github.com/osiegmar/logback-gelf](https://github.com/osiegmar/logback-gelf)。\r\n\r\n\r\n新建项目，加入logback-gelf依赖，pom文件如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_graylog</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_graylog</name>\r\n    <description>springboot2_graylog</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>de.siegmar</groupId>\r\n            <artifactId>logback-gelf</artifactId>\r\n            <version>2.0.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n\r\n```\r\n\r\n加入logback日志配置，新建logback-spring.xml，内容如下:\r\n\r\n```\r\n<configuration>\r\n\r\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\r\n    <conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\r\n    <conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\r\n    <property name=\"CONSOLE_LOG_PATTERN\" value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\r\n\r\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder>\r\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\r\n            <charset>UTF-8</charset>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <appender name=\"GELF\" class=\"de.siegmar.logbackgelf.GelfUdpAppender\">\r\n        <graylogHost>106.13.35.42</graylogHost>\r\n        <graylogPort>12201</graylogPort>\r\n    </appender>\r\n\r\n    <!-- 控制台输出日志级别 -->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"GELF\" />\r\n        <appender-ref ref=\"STDOUT\" />\r\n    </root>\r\n\r\n\r\n</configuration>\r\n\r\n```\r\n\r\n启动项目，当前项目端口是8081，查看Graylog控制台如图：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/9)\r\n\r\n\r\n### 4.2 Log4j2日志\r\n\r\nlog4j2日志使用的是log4j2-gelf依赖，github上面也有对应的介绍，pom文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.4.RELEASE</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.dalaoyang</groupId>\r\n    <artifactId>springboot2_graylog_log4j</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>springboot2_graylog_log4j</name>\r\n    <description>springboot2_graylog_log4j</description>\r\n\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n            <exclusions>\r\n                <exclusion>\r\n                    <artifactId>spring-boot-starter-logging</artifactId>\r\n                    <groupId>org.springframework.boot</groupId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-log4j2</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.graylog2.log4j2</groupId>\r\n            <artifactId>log4j2-gelf</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```\r\n\r\n创建log4j2-spring.xml进行配置输出日志信息，如下：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"OFF\" packages=\"org.graylog2.log4j2\">\r\n    <Properties>\r\n        <Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss:SSS} - %-5level  - %pid - %t - %c{1.}:%L - %m%n</Property>\r\n    </Properties>\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\r\n            <ThresholdFilter level=\"trace\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\r\n            <PatternLayout pattern=\"${LOG_PATTERN}\"/>\r\n        </Console>\r\n        <GELF name=\"gelfAppender\" server=\"106.13.35.42\" port=\"12201\" hostName=\"appserver01.example.com\">\r\n            <PatternLayout pattern=\"%logger{36} - %msg%n\"/>\r\n            <Filters>\r\n                <Filter type=\"MarkerFilter\" marker=\"FLOW\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <Filter type=\"MarkerFilter\" marker=\"EXCEPTION\" onMatch=\"DENY\" onMismatch=\"ACCEPT\"/>\r\n            </Filters>\r\n            <!-- Additional fields -->\r\n            <KeyValuePair key=\"foo\" value=\"bar\"/>\r\n            <KeyValuePair key=\"jvm\" value=\"${java:vm}\"/>\r\n        </GELF>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"info\">\r\n            <AppenderRef ref=\"gelfAppender\"/>\r\n            <AppenderRef ref=\"Console\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```\r\n\r\n这个项目使用的端口号是8888，可以在日志中清晰的看到。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/106/10)\r\n\r\n\r\n## 5. ELK vs Graylog\r\n\r\n这里仅以日志收集为例，简单说一下二者之间的选择，我个人的建议就是取决于现有技术栈，比如现在就有现成的Mongodb，那么选择Graylog可以节省不少成本，ELK类似，不要盲目的追求技术而选择。\r\n\r\n## 6. 源码\r\n\r\nspringboot2_graylog源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog)\r\n\r\nspringboot2_graylog_log4j源码地址：[https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog_log4j](https://gitee.com/dalaoyang/springboot_learn/tree/master/springboot2_graylog_log4j)', 'dalaoyang', '2019-04-22', 381, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (107, '使用阿里云OSS上传文件', '>本文介绍如何利用Java API操作阿里云OSS对象存储。\r\n\r\n## 1.控制台操作\r\n\r\n首先介绍一下阿里云OSS对象存储的一些基本概念。\r\n\r\n### 1.1 进入对象存储界面\r\n\r\n登录阿里云账号，进入对象存储界面，如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/1)\r\n\r\n进入后如图所示。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/2)\r\n\r\n### 1.2 OSS基本概念\r\n\r\n这里不过多介绍如何在阿里云上传下载文件，这些操作基本上点一点都能找到。\r\n\r\n#### 1.2.1 Bucket\r\n\r\nBucket实质就是阿里云OSS对象存储的一个存储空间，按照计算机理解的话可以理解为一个磁盘（不知道这样比喻是否恰当）。\r\n\r\n创建桶的过程很简单，如图所示，填写对应内容即可。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/3)\r\n\r\n这里需要注意，不同分区的Endpoint是不同的，Endpoint在后续API使用过程中会用到。至于存储类型和读写权限相关设置，都结合自身情况来使用，这里以标准存储和私有权限为例进行介绍。\r\n\r\n#### 1.2.2 AccessKey\r\n\r\nAccessKey是访问阿里云API的秘钥，这里也需要提前创建一份，创建后我们需要记住自己的AccessKey ID和Access Key Secret，如果忘记可以在如图位置查询。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/4)\r\n\r\n\r\n\r\n## 2 API使用\r\n\r\n### 2.1 API地址\r\n\r\n一般使用对象存储无非就是上传和下载文件，完整API地址如下：\r\n\r\n[https://help.aliyun.com/document_detail/32015.html?spm=5176.8466032.bucket-object.1.33ac1450TuX65y](https://help.aliyun.com/document_detail/32015.html?spm=5176.8466032.bucket-object.1.33ac1450TuX65y)\r\n\r\n\r\n### 2.2 API使用准备\r\n\r\nJava使用很简单，直接在Maven中引用依赖，如下：\r\n\r\n```\r\n<dependency>\r\n    <groupId>com.aliyun.oss</groupId>\r\n    <artifactId>aliyun-sdk-oss</artifactId>\r\n    <version>2.8.3</version>\r\n</dependency>\r\n```\r\n\r\n### 2.3 构建OSSClient实例\r\n\r\n这里就需要用到我们上面提到的endpoint和AccessKey，构建实例内容如下所示。\r\n\r\n```\r\n// Endpoint以杭州为例，其它Region请按实际情况填写。\r\nString endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n// 使用刚刚创建的accessKeyId和accessKeySecret\r\nString accessKeyId = \"<yourAccessKeyId>\";\r\nString accessKeySecret = \"<yourAccessKeySecret>\";\r\n\r\n// 创建OSSClient实例。\r\nOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n//todo 对OSS进行操作\r\n\r\n// 关闭OSSClient。\r\nossClient.shutdown();\r\n```\r\n\r\n### 2.4 上传文件\r\n\r\n上传文件常用的方式大致为两种，一种是返回可以查看文件的地址，另外一种是通过地址可以直接下载文件。\r\n\r\n#### 2.4.1 上传文件，返回可以预览图片的地址\r\n\r\n上传文件有一些需要注意的地方：\r\n\r\n* 1.文件名不要重复，不然会覆盖。\r\n* 2.建议将不同日期的文件分别创建一个文件夹方便区分。\r\n\r\n这里先以上传本地桌面的一个图片为例，上传后在Bucket内自动创建日期格式yyyyMMdd的文件夹存放文件，文件名按照当前时间戳加随机数的形式拼接，由于返回的URL是带有签名信息的，所以这里暂时设置过期时间为一小时，如果需要可以将时间加长。\r\n\r\n完整内容如下所示：\r\n\r\n```\r\npackage com.dalaoyang.upload;\r\n\r\nimport com.aliyun.oss.OSSClient;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.security.SecureRandom;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class AliyunUpload {\r\n\r\n    public static void main(String[] args) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n        String accessKeyId = \"LTAIRr3alAhROGTA\";\r\n        String accessKeySecret = \"******\";\r\n        String fileName = \"/Users/dalaoyang/Desktop/aliyun.jpeg\";\r\n        String bucketName = \"dalaoyang-test\";\r\n        // 获取文件的后缀名\r\n        String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\r\n        // 生成上传文件名\r\n        String finalFileName = System.currentTimeMillis() + \"\" + new SecureRandom().nextInt(0x0400) + suffixName;\r\n        String objectName = sdf.format(new Date()) + \"/\" + finalFileName;\r\n        File file = new File(fileName);\r\n        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n        ossClient.putObject(bucketName, objectName, file);\r\n        // 设置URL过期时间为1小时。\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600 * 1000);\r\n        // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。\r\n        URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);\r\n        ossClient.shutdown();\r\n        System.out.println(url.toString());\r\n    }\r\n}\r\n\r\n```\r\n\r\n返回地址格式如下：\r\n\r\n```\r\nhttp://dalaoyang-test.oss-cn-beijing.aliyuncs.com/20190518/1558155342968407.jpeg?Expires=1558158948&OSSAccessKeyId=LTAIRr3alAhROGTA&Signature=%2BIjVpD%2BTWrRmSt4kU7axo6Cnqbw%3D\r\n```\r\n\r\n浏览器访问如图所示：\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/5)\r\n\r\n在阿里云OSS中查看如图所示，可以看到文件夹也对应的创建了。\r\n\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/107/6)\r\n\r\n\r\n#### 2.4.2 上传文件，返回可以直接下载图片的地址\r\n\r\n这个和上面其实类似，如果需要返回可以直接下载的地址的话，只要设置一下文件的contentDisposition为attachment;即可，完整内容如下：\r\n\r\n```\r\npackage com.dalaoyang.upload;\r\n\r\nimport com.aliyun.oss.OSSClient;\r\nimport com.aliyun.oss.model.ObjectMetadata;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.security.SecureRandom;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class AliyunUpload {\r\n\r\n    public static void main(String[] args) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\r\n        String endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\r\n        String accessKeyId = \"LTAIRr3alAhROGTA\";\r\n        String accessKeySecret = \"******\";\r\n        String fileName = \"/Users/dalaoyang/Desktop/WechatIMG4.png\";\r\n        String bucketName = \"dalaoyang-test\";\r\n        // 获取文件的后缀名\r\n        String suffixName = fileName.substring(fileName.lastIndexOf(\".\"));\r\n        // 生成上传文件名\r\n        String finalFileName = System.currentTimeMillis() + \"\" + new SecureRandom().nextInt(0x0400) + suffixName;\r\n        String objectName = sdf.format(new Date()) + \"/\" + finalFileName;\r\n        File file = new File(fileName);\r\n\r\n        ObjectMetadata meta = new ObjectMetadata();\r\n        meta.setContentDisposition(\"attachment;\");\r\n        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\r\n\r\n        ossClient.putObject(bucketName, objectName, file, meta);\r\n        // 设置URL过期时间为1小时。\r\n        Date expiration = new Date(System.currentTimeMillis() + 3600 * 1000);\r\n        // 生成以GET方法访问的签名URL，访客可以直接通过浏览器访问相关内容。\r\n        URL url = ossClient.generatePresignedUrl(bucketName, objectName, expiration);\r\n        ossClient.shutdown();\r\n        System.out.println(url.toString());\r\n    }\r\n}\r\n\r\n```\r\n\r\n这次返回的地址在浏览器访问直接下载下来了文件。\r\n\r\n\r\n## 3 小结\r\n\r\n对于阿里云OSS操作还是有很多玩法的，比如上传下载带进度条，分段上传等等，需要的话可以根据场景去玩。', 'dalaoyang', '2019-05-18', 163, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (108, '使用logstash同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用logstash同步mysql数据库信息到ElasticSearch.\r\n\r\n## 1.准备工作\r\n\r\n### 1.1 安装JDK\r\n\r\n网上文章比较多，可以参考：[https://www.dalaoyang.cn/article/16](https://www.dalaoyang.cn/article/16)。\r\n\r\n### 1.2 安装Logstash\r\n\r\n我使用了5.x版本和6.x版本，可以参考：[https://www.dalaoyang.cn/article/80](https://www.dalaoyang.cn/article/80)。\r\n\r\n**7.x版本未尝试！！！**\r\n\r\n### 1.3 安装ruby\r\n\r\n安装过程可以参考：[https://blog.csdn.net/qq_26440803/article/details/82717244](https://blog.csdn.net/qq_26440803/article/details/82717244)，已经非常详细了。\r\n\r\n### 1.4 安装gem\r\n\r\n安装\r\n\r\n```\r\nyum install gem\r\n```\r\n\r\ngem源修改\r\n\r\n```\r\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\r\n```\r\n\r\n### 1.5 修改logstash中的Gemfile和Gemfile.jruby-1.9.lock文件\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/1.jpg)\r\n\r\n修改上图中Gemfile文件红框位置为\r\n\r\n```\r\nsource \"https://gems.ruby-china.com/\"\r\n```\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/2.png)\r\n\r\n修改上图中Gemfile.jruby-1.9.lock文件(**其他版本logstash可能不叫这个名字，但是名字类似**)红框位置为\r\n\r\n```\r\nremote: https://gems.ruby-china.com/\r\n```\r\n\r\n### 1.6 安装bundler\r\n\r\n安装\r\n```\r\ngem install bundler\r\n```\r\n\r\n### 1.7 安装logstash-input-jdbc插件\r\n\r\n安装\r\n\r\n```\r\nbin/logstash-plugin  install logstash-input-jdbc\r\n```\r\n\r\n### 1.8 准备mysql-connector-java-x.x.x.jar\r\n\r\n需要准备一个mysql-connector-java-x.x.x.jar对应版本的jar，这里使用的是mysql-connector-java-5.1.6.jar。\r\n\r\n这个可以去官网下载：[https://dev.mysql.com/downloads/connector/j/5.1.html](https://dev.mysql.com/downloads/connector/j/5.1.html)\r\n\r\n## 2.配置logstash\r\n\r\n创建mysql-es.conf配置文件，名称可以自定，这里数据表以我博客友情链接表为例，内容如下：\r\n\r\n```\r\ninput {\r\n  jdbc {\r\n    # 驱动包位置\r\n    jdbc_driver_library => \"/usr/local/logstash/logstash-5.6.16/mysql-connector-java-5.1.6.jar\"\r\n    # 驱动\r\n    jdbc_driver_class => \"com.mysql.jdbc.Driver\"\r\n    # 数据库地址\r\n    jdbc_connection_string => \"jdbc:mysql://ip:3306/dalaoyang\"\r\n    # 数据库连接用户名\r\n    jdbc_user => \"root\"\r\n    # 数据库连接用户密码\r\n    jdbc_password => \"password\"\r\n    # 执行sql语句文件位置\r\n    # statement_filepath => \"filename.sql\"\r\n    # 执行sql\r\n    statement => \"SELECT * from link_info\"\r\n    # 是否分页\r\n    jdbc_paging_enabled => \"true\"\r\n    # 分页数量\r\n    jdbc_page_size => \"50000\"\r\n    type => \"jdbc\"\r\n    tracking_column => \"update_date\"\r\n    use_column_value => false\r\n    # 执行任务时间间隔，各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新\r\n    schedule => \"* * * * *\"\r\n  }\r\n}\r\n \r\n \r\noutput {\r\n  elasticsearch {\r\n        hosts => \"ip:端口\"\r\n        index => \"test-mysql\"\r\n        # 数据库中的id\r\n        document_id => \"%{link_id}\"\r\n  }\r\n}\r\n```\r\n\r\n## 3.启动logstash\r\n\r\n执行命令启动\r\n```\r\nbin/logstash  -f mysql-es.conf\r\n```\r\n\r\n启动后可以看到如图所示\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/3.jpg)\r\n\r\n## 4.查看ElasticSearch\r\n\r\n在ElasticSearch-head中可以看到对应mysql中的数据，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/108/4.jpg)\r\n\r\n## 5.总结\r\n\r\n总的来说过程还是很简单的，没有遇到太大的问题，这只是mysql同步es的一种方式，还有很多方式可以使用。', 'dalaoyang', '2019-06-11', 84, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (109, '使用go-mysql-elasticsearch同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用go-mysql-elasticsearch同步mysql数据库信息到ElasticSearch。\r\n\r\n\r\n## 1.go-mysql-elasticsearch简介\r\n\r\ngo-mysql-elasticsearch是一个将MySQL数据自动同步到Elasticsearch的服务。\r\n\r\n它首先使用mysqldump获取原始数据，然后用binlog增量地同步数据。\r\n\r\ngithub地址：[https://github.com/siddontang/go-mysql-elasticsearch](https://github.com/siddontang/go-mysql-elasticsearch)\r\n\r\n**这里有几点注意事项：**\r\n\r\n* 1.Mysql的binlog必须是ROW模式，不然启动会报错。\r\n* 2.连接Mysql的用户权限需要大一些。\r\n\r\n## 2.安装\r\n\r\n### 2.1 安装go\r\n\r\n安装go\r\n```\r\nyum install -y go\r\n```\r\n\r\n安装godep\r\n```\r\ngo get github.com/tools/godep\r\n```\r\n\r\n下载go-mysql-elastisearch插件\r\n```\r\ngo get github.com/siddontang/go-mysql-elasticsearch\r\n```\r\n\r\n进入对应目录，比如我使用的如下目录/root/go/src/github.com/siddontang/go-mysql-elasticsearch\r\n\r\n```\r\ncd /root/go/src/github.com/siddontang/go-mysql-elasticsearch\r\n```\r\n\r\n编译\r\n```\r\nmake\r\n```\r\n\r\n### 2.2 Mysql开启binlog\r\n\r\n接下来需要在mysql中开启binlog，首先查询一下是否开启了binlog。\r\n\r\n进入mysql\r\n```\r\nmysql -uroot -p\r\n```\r\n\r\n输入密码，然后输入如下命令查看binlog开启状态\r\n```\r\nshow variables like \'%log_bin%\';\r\n```\r\n\r\n如图所示，ON为开启了，如果没有开启的话为OFF。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/1.jpg)\r\n\r\n\r\n如果没有开启的话，需要在my.cnf配置中添加如下配置(其中server-id可以根据情况设置，这里设置为1，log-bin为日志位置，一定要给日志写的权限，不然会报错，binlog_format为模式，这里必须为ROW)：\r\n\r\n```\r\nserver-id=1\r\nlog-bin=/usr/local/mysql-log/mysql-bin.log\r\nbinlog_format=\"ROW\"\r\n```\r\n\r\n设置完成后重启mysql.\r\n\r\n```\r\nservice mysqld restart\r\n```\r\n\r\n如图重启成功，如果失败可以查看一下错误日志，这里不做过多介绍。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/2.jpg)\r\n\r\n## 3.配置go-mysql-elasticsearch\r\n\r\n需要配置一下go-mysql-elasticsearch，样例在：[https://github.com/siddontang/go-mysql-elasticsearch/blob/master/etc/river.toml](https://github.com/siddontang/go-mysql-elasticsearch/blob/master/etc/river.toml)\r\n\r\n\r\n本文测试的配置文件内容如下：\r\n\r\n```\r\n# MySQL 配置：地址，用户名，密码\r\nmy_addr = \"ip:3306\"     \r\nmy_user = \"root\"\r\nmy_pass = \"***\"\r\n\r\n# Elasticsearch地址\r\nes_addr = \"ip:端口\"\r\n    \r\n# 存储数据的位置\r\ndata_dir = \"./var\"\r\n    \r\n# Inner Http status address\r\nstat_addr = \"127.0.0.1:12800\"\r\n    \r\n# pseudo server id like a slave\r\nserver_id = 1001\r\n    \r\n# mysql or mariadb\r\nflavor = \"mysql\"\r\n    \r\n# mysql备份文件，如果不设置或设置为空，则跳过\r\n# mysqldump = \"mysqldump\"\r\n    \r\n# minimal items to be inserted in one bulk\r\nbulk_size = 128\r\n    \r\n# force flush the pending requests if we don\'t have enough items >= bulk_size\r\nflush_bulk_time = \"200ms\"\r\n    \r\n# Ignore table without primary key\r\nskip_no_pk_table = false\r\n    \r\n# MySQL数据源，schema：数据库，tables：表\r\n[[source]]\r\nschema = \"test\"\r\ntables = [\"link_info\"]\r\n\r\n[[rule]]\r\nschema = \"test\"\r\ntable = \"link_info\"\r\nindex = \"test_mysql2\"\r\ntype = \"link_info\"\r\n\r\n```\r\n\r\n## 4.运行go-mysql-elasticsearch\r\n\r\n配置完成后，运行go-mysql-elasticsearch\r\n\r\n```\r\nbin/go-mysql-elasticsearch -config=river.toml\r\n```\r\n\r\n如图所示运行成功。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/3.png)\r\n\r\n## 5.检验\r\n\r\n查看es-head，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/4.jpg)\r\n\r\n数据都存在，然后修改id为5的数据，查看go-mysql-elasticsearch控制台，果然监听到了变化，如图\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/5.jpg)\r\n\r\n在次查看es-head，如图，数据也变化了。\r\n\r\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/109/6.jpg)\r\n\r\n## 6.总结\r\n\r\n由于没上过生产，所以只对我个人测试使用进行评价，安装上和数据同步感觉很友好，因为结合binlog的原因，可以实现同步增删改。对于网上说的日志很少和不成熟等说法，这里不评价。', 'dalaoyang', '2019-06-13', 101, 'Y', '1', 'Y');
INSERT INTO `article_info` VALUES (110, '使用canal增量同步mysql数据库信息到ElasticSearch', '>本文介绍如何使用canal增量同步mysql数据库信息到ElasticSearch。（注意：是增量！！！）\n\n## 1.简介\n\n### 1.1 canal介绍\n\nCanal是一个基于MySQL二进制日志的高性能数据同步系统。Canal广泛用于阿里巴巴集团（包括[https://www.taobao.com](https://www.taobao.com)），以提供可靠的低延迟增量数据管道，github地址：[https://github.com/alibaba/canal](https://github.com/alibaba/canal)\n\nCanal Server能够解析MySQL binlog并订阅数据更改，而Canal Client可以实现将更改广播到任何地方，例如数据库和Apache Kafka。\n\n它具有以下功能：\n\n1. 支持所有平台。\n2. 支持由Prometheus提供支持的细粒度系统监控。\n3. 支持通过不同方式解析和订阅MySQL binlog，例如通过GTID。\n4. 支持高性能，实时数据同步。（详见Performance）\n5. Canal Server和Canal Client都支持HA / Scalability，由Apache ZooKeeper提供支持\n6. Docker支持。\n\n缺点：\n\n不支持全量更新，只支持增量更新。\n\n完整wiki地址：[https://github.com/alibaba/canal/wiki](https://github.com/alibaba/canal/wiki)\n\n### 1.2 运作原理\n\n原理很简单：\n\n1. Canal模拟MySQL的slave的交互协议，伪装成mysql slave，并将转发协议发送到MySQL Master服务器。\n2. MySQL Master接收到转储请求并开始将二进制日志推送到slave（即canal）。\n3. Canal将二进制日志对象解析为自己的数据类型（原始字节流）\n\n\n如图所示：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/1.jpeg)\n\n### 1.3 同步es\n\n在同步数据到es的时候需要使用适配器：canal adapter。目前最新版本1.1.3，下载地址：[https://github.com/alibaba/canal/releases](https://github.com/alibaba/canal/releases)。\n\n**目前es貌似支持6.x版本，不支持7.x版本！！！**\n\n\n## 2.准备工作\n### 2.1 es和jdk\n\n安装es可以参考：[https://www.dalaoyang.cn/article/78](https://www.dalaoyang.cn/article/78)\n\n安装jdk可以参考：[https://www.dalaoyang.cn/article/16](https://www.dalaoyang.cn/article/16)\n\n### 2.2 安装canal server\n\n下载canal.deployer-1.1.3.tar.gz\n\n```\nwget https://github.com/alibaba/canal/releases/download/canal-1.1.3/canal.deployer-1.1.3.tar.gz\n```\n\n解压文件\n\n```\ntar -zxvf canal.deployer-1.1.3.tar.gz\n```\n\n进入解压后的文件夹\n\n```\ncd canal.deployer-1.1.3\n```\n\n修改conf/example/instance.properties文件，主要注意以下几处：\n\n* canal.instance.master.address：数据库地址，例如127.0.0.1:3306\n* canal.instance.dbUsername：数据库用户\n* canal.instance.dbPassword：数据库密码\n\n完整内容如下：\n```\n#################################################\n## mysql serverId , v1.0.26+ will autoGen\n# canal.instance.mysql.slaveId=0\n\n# enable gtid use true/false\ncanal.instance.gtidon=false\n\n# position info\ncanal.instance.master.address=127.0.0.1:3306\ncanal.instance.master.journal.name=\ncanal.instance.master.position=\ncanal.instance.master.timestamp=\ncanal.instance.master.gtid=\n\n# rds oss binlog\ncanal.instance.rds.accesskey=\ncanal.instance.rds.secretkey=\ncanal.instance.rds.instanceId=\n\n# table meta tsdb info\ncanal.instance.tsdb.enable=true\n#canal.instance.tsdb.url=\n#canal.instance.tsdb.dbUsername=\n#canal.instance.tsdb.dbPassword=\n\n#canal.instance.standby.address =\n#canal.instance.standby.journal.name =\n#canal.instance.standby.position =\n#canal.instance.standby.timestamp =\n#canal.instance.standby.gtid=\n\n# username/password\ncanal.instance.dbUsername=root\ncanal.instance.dbPassword=12345678\ncanal.instance.connectionCharset = UTF-8\n# enable druid Decrypt database password\ncanal.instance.enableDruid=false\n#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==\n\n# table regex\ncanal.instance.filter.regex=.*\\\\..*\n# table black regex\ncanal.instance.filter.black.regex=\n\n# mq config\n#canal.mq.topic=example\n# dynamic topic route by schema or table regex\n#canal.mq.dynamicTopic=mytest1.user,mytest2\\\\..*,.*\\\\..*\n#canal.mq.partition=0\n# hash partition config\n#canal.mq.partitionsNum=3\n#canal.mq.partitionHash=test.table:id^name,.*\\\\..*\n#################################################\n\n```\n\n回到canal.deployer-1.1.3目录下，启动canal：\n\n```\nsh bin/startup.sh\n```\n\n查看日志：\n\n```\nvi logs/canal/canal.log\n```\n\n 查看具体instance日志：\n \n```\n vi logs/example/example.log\n```\n\n关闭命令\n\n```\nsh bin/stop.sh\n```\n\n### 2.3 安装canal-adapter\n\n下载canal.adapter-1.1.3.tar.gz\n\n```\nwget https://github.com/alibaba/canal/releases/download/canal-1.1.3/canal.adapter-1.1.3.tar.gz\n```\n\n解压\n\n```\ntar -zxvf canal.adapter-1.1.3.tar.gz\n```\n\n进入解压后的文件夹\n\n```\ncd canal.adapter-1.1.3\n```\n\n修改conf/application.yml文件，主要注意如下内容，由于是yml文件，注意我这里说明的属性名称：\n\n* server.port:canal-adapter端口号\n* canal.conf.canalServerHost:canal-server地址和ip\n* canal.conf.srcDataSources.defaultDS.url:数据库地址\n* canal.conf.srcDataSources.defaultDS.username:数据库用户名\n* canal.conf.srcDataSources.defaultDS.password:数据库密码\n* canal.conf.canalAdapters.groups.outerAdapters.hosts:es主机地址,tcp端口\n\n完整内容如下：\n```\nserver:\n  port: 8081\nspring:\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n    default-property-inclusion: non_null\n\n\ncanal.conf:\n  mode: tcp\n  canalServerHost: 127.0.0.1:11111\n  batchSize: 500\n  syncBatchSize: 1000\n  retries: 0\n  timeout:\n  accessKey:\n  secretKey:\n  srcDataSources:\n    defaultDS:\n      url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true\n      username: root\n      password: 12345678\n  canalAdapters:\n  - instance: example\n    groups:\n    - groupId: g1\n      outerAdapters:\n      - name: es\n        hosts: 127.0.0.1:9300\n        properties:\n         cluster.name: elasticsearch\n```\n\n\n另外需要配置conf/es/*.yml文件，adapter将会自动加载conf / es下的所有.yml结尾的配置文件。在介绍配置前，需要先介绍一下本案例使用的表结构，如下：\n\n```\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL,\n  `name` varchar(200) NOT NULL,\n  `address` varchar(1000) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n需要手动去es中创建索引，比如这里使用es-head创建，如下图：\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/2.jpg)\n\ntest索引结构如下：\n```\n{\n    \"mappings\":{\n        \"_doc\":{\n            \"properties\":{\n                \"name\":{\n                    \"type\":\"text\"\n                },\n                \"address\":{\n                    \"type\":\"text\"\n                }\n            }\n        }\n    }\n}\n```\n\n接下来创建test.yml（文件名随意），内容很好理解_index为索引名称，sql为对应语句，内容如下：\n\n```\ndataSourceKey: defaultDS\ndestination: example\ngroupId:\nesMapping:\n  _index: test\n  _type: _doc\n  _id: _id\n  upsert: true\n  sql: \"select a.id as _id,a.name,a.address from test a\"\n  commitBatch: 3000\n```\n\n\n配置完成后，回到canal-adapter根目录，执行命令启动\n\n```\nbin/startup.sh\n```\n\n查看日志\n\n```\nvi logs/adapter/adapter.log\n```\n\n关闭canal-adapter命令\n\n```\nbin/stop.sh\n```\n\n## 3.测试\n\n都启动成功后，先查看一下es-head，如图，现在是没有任何数据的。\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/3.jpg)\n\n\n接下来，我们在数据库中插入一条数据进行测试，语句如下：\n\n```\nINSERT INTO `test`.`test`(`id`, `name`, `address`) VALUES (7, \'北京\', \'北京市朝阳区\');\n```\n\n然后在看一下es-head，如下\n\n![](https://dalaoyang-prod.oss-cn-beijing.aliyuncs.com/dalaoyang.cn/article/110/4.jpg)\n\n\n接下来看一下日志，如下：\n\n```\n2019-06-22 17:54:15.385 [pool-2-thread-1] DEBUG c.a.otter.canal.client.adapter.es.service.ESSyncService - DML: {\"data\":[{\"id\":7,\"name\":\"北京\",\"address\":\"北京市朝阳区\"}],\"database\":\"test\",\"destination\":\"example\",\"es\":1561197255000,\"groupId\":null,\"isDdl\":false,\"old\":null,\"pkNames\":[\"id\"],\"sql\":\"\",\"table\":\"test\",\"ts\":1561197255384,\"type\":\"INSERT\"} \nAffected indexes: test \n```\n\n小知识点：上面介绍的查看日志的方法可能不是很好用，推荐使用如下语法，比如查看日志最后200行：\n\n```\ntail -200f logs/adapter/adapter.log\n```\n\n\n## 4.总结\n\n1.全量更新不能实现，但是增删改都是可以的。\n2.一定要提前创建好索引。\n3.es配置的是tcp端口，比如默认的9300', 'dalaoyang', '2019-06-22', 52, 'Y', '1', 'Y');
COMMIT;

-- ----------------------------
-- Table structure for article_tag
-- ----------------------------
DROP TABLE IF EXISTS `article_tag`;
CREATE TABLE `article_tag` (
  `ARTICLE_ID` int(11) NOT NULL COMMENT '文章id',
  `TAG_ID` int(11) NOT NULL COMMENT '标签id',
  PRIMARY KEY (`ARTICLE_ID`,`TAG_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_tag
-- ----------------------------
BEGIN;
INSERT INTO `article_tag` VALUES (1, 1);
INSERT INTO `article_tag` VALUES (1, 10);
INSERT INTO `article_tag` VALUES (2, 1);
INSERT INTO `article_tag` VALUES (3, 1);
INSERT INTO `article_tag` VALUES (4, 1);
INSERT INTO `article_tag` VALUES (5, 9);
INSERT INTO `article_tag` VALUES (6, 1);
INSERT INTO `article_tag` VALUES (7, 2);
INSERT INTO `article_tag` VALUES (7, 24);
INSERT INTO `article_tag` VALUES (8, 5);
INSERT INTO `article_tag` VALUES (9, 10);
INSERT INTO `article_tag` VALUES (10, 1);
INSERT INTO `article_tag` VALUES (11, 1);
INSERT INTO `article_tag` VALUES (11, 7);
INSERT INTO `article_tag` VALUES (11, 8);
INSERT INTO `article_tag` VALUES (12, 4);
INSERT INTO `article_tag` VALUES (12, 7);
INSERT INTO `article_tag` VALUES (13, 1);
INSERT INTO `article_tag` VALUES (14, 2);
INSERT INTO `article_tag` VALUES (15, 3);
INSERT INTO `article_tag` VALUES (16, 4);
INSERT INTO `article_tag` VALUES (17, 1);
INSERT INTO `article_tag` VALUES (17, 11);
INSERT INTO `article_tag` VALUES (18, 1);
INSERT INTO `article_tag` VALUES (18, 6);
INSERT INTO `article_tag` VALUES (19, 1);
INSERT INTO `article_tag` VALUES (20, 1);
INSERT INTO `article_tag` VALUES (21, 1);
INSERT INTO `article_tag` VALUES (22, 1);
INSERT INTO `article_tag` VALUES (23, 1);
INSERT INTO `article_tag` VALUES (24, 1);
INSERT INTO `article_tag` VALUES (25, 1);
INSERT INTO `article_tag` VALUES (26, 1);
INSERT INTO `article_tag` VALUES (26, 6);
INSERT INTO `article_tag` VALUES (26, 12);
INSERT INTO `article_tag` VALUES (27, 1);
INSERT INTO `article_tag` VALUES (28, 4);
INSERT INTO `article_tag` VALUES (28, 13);
INSERT INTO `article_tag` VALUES (29, 4);
INSERT INTO `article_tag` VALUES (29, 14);
INSERT INTO `article_tag` VALUES (30, 4);
INSERT INTO `article_tag` VALUES (30, 15);
INSERT INTO `article_tag` VALUES (31, 4);
INSERT INTO `article_tag` VALUES (31, 9);
INSERT INTO `article_tag` VALUES (32, 1);
INSERT INTO `article_tag` VALUES (32, 16);
INSERT INTO `article_tag` VALUES (33, 1);
INSERT INTO `article_tag` VALUES (34, 2);
INSERT INTO `article_tag` VALUES (35, 4);
INSERT INTO `article_tag` VALUES (35, 16);
INSERT INTO `article_tag` VALUES (36, 2);
INSERT INTO `article_tag` VALUES (37, 2);
INSERT INTO `article_tag` VALUES (38, 2);
INSERT INTO `article_tag` VALUES (39, 2);
INSERT INTO `article_tag` VALUES (40, 2);
INSERT INTO `article_tag` VALUES (41, 1);
INSERT INTO `article_tag` VALUES (42, 2);
INSERT INTO `article_tag` VALUES (43, 1);
INSERT INTO `article_tag` VALUES (45, 1);
INSERT INTO `article_tag` VALUES (46, 1);
INSERT INTO `article_tag` VALUES (47, 1);
INSERT INTO `article_tag` VALUES (48, 1);
INSERT INTO `article_tag` VALUES (49, 1);
INSERT INTO `article_tag` VALUES (49, 19);
INSERT INTO `article_tag` VALUES (50, 5);
INSERT INTO `article_tag` VALUES (51, 4);
INSERT INTO `article_tag` VALUES (51, 17);
INSERT INTO `article_tag` VALUES (52, 1);
INSERT INTO `article_tag` VALUES (52, 17);
INSERT INTO `article_tag` VALUES (53, 1);
INSERT INTO `article_tag` VALUES (53, 18);
INSERT INTO `article_tag` VALUES (54, 1);
INSERT INTO `article_tag` VALUES (55, 3);
INSERT INTO `article_tag` VALUES (55, 4);
INSERT INTO `article_tag` VALUES (56, 4);
INSERT INTO `article_tag` VALUES (56, 20);
INSERT INTO `article_tag` VALUES (57, 10);
INSERT INTO `article_tag` VALUES (58, 1);
INSERT INTO `article_tag` VALUES (58, 13);
INSERT INTO `article_tag` VALUES (59, 1);
INSERT INTO `article_tag` VALUES (60, 1);
INSERT INTO `article_tag` VALUES (61, 1);
INSERT INTO `article_tag` VALUES (61, 10);
INSERT INTO `article_tag` VALUES (63, 1);
INSERT INTO `article_tag` VALUES (63, 22);
INSERT INTO `article_tag` VALUES (63, 23);
INSERT INTO `article_tag` VALUES (64, 2);
INSERT INTO `article_tag` VALUES (64, 24);
INSERT INTO `article_tag` VALUES (64, 25);
INSERT INTO `article_tag` VALUES (65, 1);
INSERT INTO `article_tag` VALUES (65, 11);
INSERT INTO `article_tag` VALUES (66, 1);
INSERT INTO `article_tag` VALUES (66, 11);
INSERT INTO `article_tag` VALUES (67, 1);
INSERT INTO `article_tag` VALUES (67, 26);
INSERT INTO `article_tag` VALUES (67, 27);
INSERT INTO `article_tag` VALUES (68, 1);
INSERT INTO `article_tag` VALUES (69, 1);
INSERT INTO `article_tag` VALUES (69, 28);
INSERT INTO `article_tag` VALUES (70, 1);
INSERT INTO `article_tag` VALUES (70, 14);
INSERT INTO `article_tag` VALUES (71, 1);
INSERT INTO `article_tag` VALUES (71, 29);
INSERT INTO `article_tag` VALUES (72, 3);
INSERT INTO `article_tag` VALUES (73, 2);
INSERT INTO `article_tag` VALUES (73, 30);
INSERT INTO `article_tag` VALUES (74, 1);
INSERT INTO `article_tag` VALUES (74, 31);
INSERT INTO `article_tag` VALUES (75, 1);
INSERT INTO `article_tag` VALUES (75, 32);
INSERT INTO `article_tag` VALUES (76, 1);
INSERT INTO `article_tag` VALUES (76, 18);
INSERT INTO `article_tag` VALUES (76, 28);
INSERT INTO `article_tag` VALUES (77, 4);
INSERT INTO `article_tag` VALUES (77, 33);
INSERT INTO `article_tag` VALUES (78, 4);
INSERT INTO `article_tag` VALUES (78, 17);
INSERT INTO `article_tag` VALUES (78, 36);
INSERT INTO `article_tag` VALUES (79, 34);
INSERT INTO `article_tag` VALUES (79, 36);
INSERT INTO `article_tag` VALUES (80, 35);
INSERT INTO `article_tag` VALUES (80, 36);
INSERT INTO `article_tag` VALUES (81, 3);
INSERT INTO `article_tag` VALUES (81, 37);
INSERT INTO `article_tag` VALUES (82, 16);
INSERT INTO `article_tag` VALUES (82, 17);
INSERT INTO `article_tag` VALUES (82, 34);
INSERT INTO `article_tag` VALUES (82, 35);
INSERT INTO `article_tag` VALUES (82, 36);
INSERT INTO `article_tag` VALUES (83, 1);
INSERT INTO `article_tag` VALUES (83, 9);
INSERT INTO `article_tag` VALUES (83, 15);
INSERT INTO `article_tag` VALUES (83, 20);
INSERT INTO `article_tag` VALUES (84, 1);
INSERT INTO `article_tag` VALUES (84, 9);
INSERT INTO `article_tag` VALUES (84, 15);
INSERT INTO `article_tag` VALUES (84, 20);
INSERT INTO `article_tag` VALUES (85, 5);
INSERT INTO `article_tag` VALUES (86, 4);
INSERT INTO `article_tag` VALUES (87, 4);
INSERT INTO `article_tag` VALUES (87, 38);
INSERT INTO `article_tag` VALUES (88, 4);
INSERT INTO `article_tag` VALUES (88, 39);
INSERT INTO `article_tag` VALUES (89, 4);
INSERT INTO `article_tag` VALUES (89, 40);
INSERT INTO `article_tag` VALUES (90, 3);
INSERT INTO `article_tag` VALUES (91, 3);
INSERT INTO `article_tag` VALUES (92, 3);
INSERT INTO `article_tag` VALUES (93, 1);
INSERT INTO `article_tag` VALUES (93, 41);
INSERT INTO `article_tag` VALUES (94, 1);
INSERT INTO `article_tag` VALUES (94, 41);
INSERT INTO `article_tag` VALUES (95, 1);
INSERT INTO `article_tag` VALUES (95, 42);
INSERT INTO `article_tag` VALUES (96, 2);
INSERT INTO `article_tag` VALUES (96, 41);
INSERT INTO `article_tag` VALUES (97, 1);
INSERT INTO `article_tag` VALUES (97, 42);
INSERT INTO `article_tag` VALUES (98, 1);
INSERT INTO `article_tag` VALUES (98, 36);
INSERT INTO `article_tag` VALUES (99, 43);
INSERT INTO `article_tag` VALUES (99, 44);
INSERT INTO `article_tag` VALUES (100, 1);
INSERT INTO `article_tag` VALUES (100, 45);
INSERT INTO `article_tag` VALUES (101, 1);
INSERT INTO `article_tag` VALUES (101, 46);
INSERT INTO `article_tag` VALUES (102, 1);
INSERT INTO `article_tag` VALUES (102, 2);
INSERT INTO `article_tag` VALUES (102, 45);
INSERT INTO `article_tag` VALUES (103, 2);
INSERT INTO `article_tag` VALUES (103, 30);
INSERT INTO `article_tag` VALUES (104, 2);
INSERT INTO `article_tag` VALUES (104, 45);
INSERT INTO `article_tag` VALUES (104, 46);
INSERT INTO `article_tag` VALUES (105, 4);
INSERT INTO `article_tag` VALUES (105, 47);
INSERT INTO `article_tag` VALUES (106, 1);
INSERT INTO `article_tag` VALUES (106, 48);
INSERT INTO `article_tag` VALUES (107, 5);
INSERT INTO `article_tag` VALUES (108, 7);
INSERT INTO `article_tag` VALUES (108, 17);
INSERT INTO `article_tag` VALUES (108, 35);
INSERT INTO `article_tag` VALUES (109, 7);
INSERT INTO `article_tag` VALUES (109, 17);
INSERT INTO `article_tag` VALUES (109, 49);
INSERT INTO `article_tag` VALUES (110, 5);
INSERT INTO `article_tag` VALUES (110, 7);
INSERT INTO `article_tag` VALUES (110, 17);
INSERT INTO `article_tag` VALUES (110, 50);
COMMIT;

-- ----------------------------
-- Table structure for link_info
-- ----------------------------
DROP TABLE IF EXISTS `link_info`;
CREATE TABLE `link_info` (
  `LINK_ID` int(11) NOT NULL AUTO_INCREMENT,
  `LINK_NAME` varchar(100) DEFAULT NULL COMMENT '链接名称',
  `LINK_URL` varchar(500) DEFAULT NULL COMMENT '链接地址',
  `REMARK` text COMMENT '备注',
  PRIMARY KEY (`LINK_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of link_info
-- ----------------------------
BEGIN;
INSERT INTO `link_info` VALUES (5, '13 Blog', 'http://blog.hanshuai.xin', '13 Blog');
INSERT INTO `link_info` VALUES (6, 'SAn Blog', 'https://sanii.cn', 'SAn Blog');
INSERT INTO `link_info` VALUES (7, '这个冬天不太冷', 'http://www.lrshuai.top', '一个很帅很帅的大叔写的技术干货文章');
INSERT INTO `link_info` VALUES (8, '张亚东博客', 'https://www.zhyd.me', '一个程序员的个人博客，心之所向，无所不能');
INSERT INTO `link_info` VALUES (9, '农码一生为了谁', 'https://www.nmyswls.com/', '农码一生为了谁 - MyStory个人博客');
INSERT INTO `link_info` VALUES (10, 'IT人故事会', 'http://idig8.com', '二线人的故事人生技术人的学习天堂');
INSERT INTO `link_info` VALUES (11, 'i蝸居年華_谢谢谢', 'https://www.xiefayang.com/', 'i蝸居年華_谢谢谢');
INSERT INTO `link_info` VALUES (12, '波博客 - boblog.com', 'http://www.boblog.com/', '波博客 - boblog.com');
COMMIT;

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `ID` int(50) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `USERNAME` varchar(100) DEFAULT NULL COMMENT '用户名',
  `PASSWORD` varchar(100) DEFAULT NULL COMMENT '密码',
  `TRUENAME` varchar(100) DEFAULT NULL COMMENT '真实姓名',
  `EMAIL` varchar(100) DEFAULT NULL COMMENT '邮箱',
  `PHONE` varchar(11) DEFAULT NULL COMMENT '手机号',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
BEGIN;
INSERT INTO `sys_user` VALUES (1, 'admin', 'zzz111', 'admin', 'admin@dalaoyang.cn', '18888888888');
INSERT INTO `sys_user` VALUES (2, 'dalaoyang', 'dalaoyang', 'dalaoyang', 'yangyang@dalaoyang.cn', '18640027340');
COMMIT;

-- ----------------------------
-- Table structure for tag_info
-- ----------------------------
DROP TABLE IF EXISTS `tag_info`;
CREATE TABLE `tag_info` (
  `TAG_ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '标签主键id',
  `TAG_NAME` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`TAG_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tag_info
-- ----------------------------
BEGIN;
INSERT INTO `tag_info` VALUES (1, 'SPRINGBOOT');
INSERT INTO `tag_info` VALUES (2, 'SPRINGCLOUD');
INSERT INTO `tag_info` VALUES (3, 'NGINX');
INSERT INTO `tag_info` VALUES (4, 'LINUX');
INSERT INTO `tag_info` VALUES (5, 'JAVA');
INSERT INTO `tag_info` VALUES (6, 'JPA');
INSERT INTO `tag_info` VALUES (7, 'MYSQL');
INSERT INTO `tag_info` VALUES (8, 'SQLSERVER');
INSERT INTO `tag_info` VALUES (9, 'MAVEN');
INSERT INTO `tag_info` VALUES (10, 'INTELLIJIDEA');
INSERT INTO `tag_info` VALUES (11, 'MYBATIS');
INSERT INTO `tag_info` VALUES (12, 'DRUID');
INSERT INTO `tag_info` VALUES (13, 'DOCKER');
INSERT INTO `tag_info` VALUES (14, 'TOMCAT');
INSERT INTO `tag_info` VALUES (15, 'JENKINS');
INSERT INTO `tag_info` VALUES (16, 'REDIS');
INSERT INTO `tag_info` VALUES (17, 'ELASTICSEARCH');
INSERT INTO `tag_info` VALUES (18, 'MONGODB');
INSERT INTO `tag_info` VALUES (19, 'SHIRO');
INSERT INTO `tag_info` VALUES (20, 'GIT');
INSERT INTO `tag_info` VALUES (22, 'DUBBO');
INSERT INTO `tag_info` VALUES (23, 'RPC');
INSERT INTO `tag_info` VALUES (24, 'EUREKA');
INSERT INTO `tag_info` VALUES (25, '高可用');
INSERT INTO `tag_info` VALUES (26, 'JDBC');
INSERT INTO `tag_info` VALUES (27, 'JDBCTEMPLATE');
INSERT INTO `tag_info` VALUES (28, 'WEBFLUX');
INSERT INTO `tag_info` VALUES (29, 'JSP');
INSERT INTO `tag_info` VALUES (30, 'GATEWAY');
INSERT INTO `tag_info` VALUES (31, 'MYBATIS-GERERATOR');
INSERT INTO `tag_info` VALUES (32, 'AOP');
INSERT INTO `tag_info` VALUES (33, 'RABBITMQ');
INSERT INTO `tag_info` VALUES (34, 'KIBANA');
INSERT INTO `tag_info` VALUES (35, 'LOGSTASH');
INSERT INTO `tag_info` VALUES (36, 'ELK');
INSERT INTO `tag_info` VALUES (37, 'VUE');
INSERT INTO `tag_info` VALUES (38, 'GOACCESS');
INSERT INTO `tag_info` VALUES (39, 'ROCKETMQ');
INSERT INTO `tag_info` VALUES (40, 'KAFKA');
INSERT INTO `tag_info` VALUES (41, 'NACOS');
INSERT INTO `tag_info` VALUES (42, 'SHARDING-JDBC');
INSERT INTO `tag_info` VALUES (43, 'DALAOYANG');
INSERT INTO `tag_info` VALUES (44, 'ELASTIC-JOB');
INSERT INTO `tag_info` VALUES (45, 'PROMETHEUS');
INSERT INTO `tag_info` VALUES (46, 'SOFA-LOOKOUT');
INSERT INTO `tag_info` VALUES (47, 'JUMPSERVER');
INSERT INTO `tag_info` VALUES (48, 'GRAYLOG');
INSERT INTO `tag_info` VALUES (49, 'GO');
INSERT INTO `tag_info` VALUES (50, 'CANAL');
COMMIT;

-- ----------------------------
-- Table structure for website_access_info
-- ----------------------------
DROP TABLE IF EXISTS `website_access_info`;
CREATE TABLE `website_access_info` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `ACCESS_DATE` date DEFAULT NULL COMMENT '访问日期',
  `ACCESS_COUNT` int(11) DEFAULT NULL COMMENT '访问数量',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=230 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of website_access_info
-- ----------------------------
BEGIN;
INSERT INTO `website_access_info` VALUES (1, '2018-12-15', 301);
INSERT INTO `website_access_info` VALUES (2, '2018-12-16', 268);
INSERT INTO `website_access_info` VALUES (3, '2018-12-17', 491);
INSERT INTO `website_access_info` VALUES (4, '2018-12-18', 415);
INSERT INTO `website_access_info` VALUES (5, '2018-12-19', 597);
INSERT INTO `website_access_info` VALUES (6, '2018-12-20', 506);
INSERT INTO `website_access_info` VALUES (7, '2018-12-21', 585);
INSERT INTO `website_access_info` VALUES (8, '2018-12-22', 382);
INSERT INTO `website_access_info` VALUES (9, '2018-12-23', 379);
INSERT INTO `website_access_info` VALUES (10, '2018-12-24', 466);
INSERT INTO `website_access_info` VALUES (11, '2018-12-25', 555);
INSERT INTO `website_access_info` VALUES (12, '2018-12-26', 461);
INSERT INTO `website_access_info` VALUES (13, '2018-12-27', 498);
INSERT INTO `website_access_info` VALUES (14, '2018-12-28', 579);
INSERT INTO `website_access_info` VALUES (15, '2018-12-29', 381);
INSERT INTO `website_access_info` VALUES (16, '2018-12-30', 383);
INSERT INTO `website_access_info` VALUES (17, '2018-12-31', 498);
INSERT INTO `website_access_info` VALUES (18, '2019-01-01', 220);
INSERT INTO `website_access_info` VALUES (19, '2019-01-02', 528);
INSERT INTO `website_access_info` VALUES (20, '2019-01-03', 470);
INSERT INTO `website_access_info` VALUES (21, '2019-01-04', 389);
INSERT INTO `website_access_info` VALUES (22, '2019-01-05', 455);
INSERT INTO `website_access_info` VALUES (23, '2019-01-06', 351);
INSERT INTO `website_access_info` VALUES (24, '2019-01-07', 398);
INSERT INTO `website_access_info` VALUES (25, '2019-01-08', 838);
INSERT INTO `website_access_info` VALUES (26, '2019-01-09', 383);
INSERT INTO `website_access_info` VALUES (27, '2019-01-10', 358);
INSERT INTO `website_access_info` VALUES (28, '2019-01-11', 391);
INSERT INTO `website_access_info` VALUES (29, '2019-01-12', 352);
INSERT INTO `website_access_info` VALUES (30, '2019-01-13', 292);
INSERT INTO `website_access_info` VALUES (31, '2019-01-14', 522);
INSERT INTO `website_access_info` VALUES (32, '2019-01-15', 450);
INSERT INTO `website_access_info` VALUES (33, '2019-01-16', 414);
INSERT INTO `website_access_info` VALUES (34, '2019-01-17', 408);
INSERT INTO `website_access_info` VALUES (35, '2019-01-18', 536);
INSERT INTO `website_access_info` VALUES (36, '2019-01-19', 438);
INSERT INTO `website_access_info` VALUES (37, '2019-01-20', 387);
INSERT INTO `website_access_info` VALUES (38, '2019-01-21', 315);
INSERT INTO `website_access_info` VALUES (39, '2019-01-22', 352);
INSERT INTO `website_access_info` VALUES (40, '2019-01-23', 384);
INSERT INTO `website_access_info` VALUES (41, '2019-01-24', 636);
INSERT INTO `website_access_info` VALUES (42, '2019-01-25', 487);
INSERT INTO `website_access_info` VALUES (43, '2019-01-26', 308);
INSERT INTO `website_access_info` VALUES (44, '2019-01-27', 369);
INSERT INTO `website_access_info` VALUES (45, '2019-01-28', 363);
INSERT INTO `website_access_info` VALUES (46, '2019-01-29', 435);
INSERT INTO `website_access_info` VALUES (47, '2019-01-30', 385);
INSERT INTO `website_access_info` VALUES (48, '2019-01-31', 456);
INSERT INTO `website_access_info` VALUES (49, '2019-02-01', 689);
INSERT INTO `website_access_info` VALUES (50, '2019-02-02', 346);
INSERT INTO `website_access_info` VALUES (51, '2019-02-03', 269);
INSERT INTO `website_access_info` VALUES (52, '2019-02-04', 257);
INSERT INTO `website_access_info` VALUES (53, '2019-02-05', 292);
INSERT INTO `website_access_info` VALUES (54, '2019-02-06', 320);
INSERT INTO `website_access_info` VALUES (55, '2019-02-07', 405);
INSERT INTO `website_access_info` VALUES (56, '2019-02-08', 304);
INSERT INTO `website_access_info` VALUES (57, '2019-02-09', 339);
INSERT INTO `website_access_info` VALUES (58, '2019-02-10', 272);
INSERT INTO `website_access_info` VALUES (59, '2019-02-11', 591);
INSERT INTO `website_access_info` VALUES (60, '2019-02-12', 618);
INSERT INTO `website_access_info` VALUES (61, '2019-02-13', 805);
INSERT INTO `website_access_info` VALUES (62, '2019-02-14', 648);
INSERT INTO `website_access_info` VALUES (63, '2019-02-15', 790);
INSERT INTO `website_access_info` VALUES (64, '2019-02-16', 1222);
INSERT INTO `website_access_info` VALUES (65, '2019-02-17', 468);
INSERT INTO `website_access_info` VALUES (66, '2019-02-18', 657);
INSERT INTO `website_access_info` VALUES (67, '2019-02-19', 719);
INSERT INTO `website_access_info` VALUES (68, '2019-02-20', 683);
INSERT INTO `website_access_info` VALUES (69, '2019-02-21', 1229);
INSERT INTO `website_access_info` VALUES (70, '2019-02-22', 658);
INSERT INTO `website_access_info` VALUES (71, '2019-02-23', 443);
INSERT INTO `website_access_info` VALUES (72, '2019-02-24', 589);
INSERT INTO `website_access_info` VALUES (73, '2019-02-25', 451);
INSERT INTO `website_access_info` VALUES (74, '2019-02-26', 780);
INSERT INTO `website_access_info` VALUES (75, '2019-02-27', 699);
INSERT INTO `website_access_info` VALUES (76, '2019-02-28', 831);
INSERT INTO `website_access_info` VALUES (77, '2019-03-01', 1028);
INSERT INTO `website_access_info` VALUES (78, '2019-03-02', 603);
INSERT INTO `website_access_info` VALUES (79, '2019-03-03', 863);
INSERT INTO `website_access_info` VALUES (80, '2019-03-04', 881);
INSERT INTO `website_access_info` VALUES (81, '2019-03-05', 810);
INSERT INTO `website_access_info` VALUES (82, '2019-03-06', 812);
INSERT INTO `website_access_info` VALUES (83, '2019-03-07', 623);
INSERT INTO `website_access_info` VALUES (84, '2019-03-08', 500);
INSERT INTO `website_access_info` VALUES (85, '2019-03-09', 574);
INSERT INTO `website_access_info` VALUES (86, '2019-03-10', 590);
INSERT INTO `website_access_info` VALUES (87, '2019-03-11', 771);
INSERT INTO `website_access_info` VALUES (88, '2019-03-12', 2729);
INSERT INTO `website_access_info` VALUES (89, '2019-03-13', 835);
INSERT INTO `website_access_info` VALUES (90, '2019-03-14', 887);
INSERT INTO `website_access_info` VALUES (91, '2019-03-15', 821);
INSERT INTO `website_access_info` VALUES (92, '2019-03-16', 563);
INSERT INTO `website_access_info` VALUES (93, '2019-03-17', 628);
INSERT INTO `website_access_info` VALUES (94, '2019-03-18', 683);
INSERT INTO `website_access_info` VALUES (95, '2019-03-19', 907);
INSERT INTO `website_access_info` VALUES (96, '2019-03-20', 755);
INSERT INTO `website_access_info` VALUES (97, '2019-03-21', 1194);
INSERT INTO `website_access_info` VALUES (98, '2019-03-22', 740);
INSERT INTO `website_access_info` VALUES (99, '2019-03-23', 628);
INSERT INTO `website_access_info` VALUES (100, '2019-03-24', 597);
INSERT INTO `website_access_info` VALUES (101, '2019-03-25', 662);
INSERT INTO `website_access_info` VALUES (102, '2019-03-26', 814);
INSERT INTO `website_access_info` VALUES (103, '2019-03-27', 789);
INSERT INTO `website_access_info` VALUES (104, '2019-03-28', 887);
INSERT INTO `website_access_info` VALUES (105, '2019-03-29', 839);
INSERT INTO `website_access_info` VALUES (106, '2019-03-30', 481);
INSERT INTO `website_access_info` VALUES (107, '2019-03-31', 560);
INSERT INTO `website_access_info` VALUES (108, '2019-04-01', 824);
INSERT INTO `website_access_info` VALUES (109, '2019-04-02', 1017);
INSERT INTO `website_access_info` VALUES (110, '2019-04-03', 698);
INSERT INTO `website_access_info` VALUES (111, '2019-04-04', 734);
INSERT INTO `website_access_info` VALUES (112, '2019-04-05', 761);
INSERT INTO `website_access_info` VALUES (113, '2019-04-06', 928);
INSERT INTO `website_access_info` VALUES (114, '2019-04-07', 418);
INSERT INTO `website_access_info` VALUES (115, '2019-04-08', 583);
INSERT INTO `website_access_info` VALUES (116, '2019-04-09', 816);
INSERT INTO `website_access_info` VALUES (117, '2019-04-10', 706);
INSERT INTO `website_access_info` VALUES (118, '2019-04-11', 753);
INSERT INTO `website_access_info` VALUES (119, '2019-04-12', 586);
INSERT INTO `website_access_info` VALUES (120, '2019-04-13', 463);
INSERT INTO `website_access_info` VALUES (121, '2019-04-14', 468);
INSERT INTO `website_access_info` VALUES (122, '2019-04-15', 676);
INSERT INTO `website_access_info` VALUES (123, '2019-04-16', 600);
INSERT INTO `website_access_info` VALUES (124, '2019-04-17', 646);
INSERT INTO `website_access_info` VALUES (125, '2019-04-18', 715);
INSERT INTO `website_access_info` VALUES (126, '2019-04-19', 676);
INSERT INTO `website_access_info` VALUES (127, '2019-04-20', 1039);
INSERT INTO `website_access_info` VALUES (128, '2019-04-21', 980);
INSERT INTO `website_access_info` VALUES (129, '2019-04-22', 739);
INSERT INTO `website_access_info` VALUES (130, '2019-04-23', 1528);
INSERT INTO `website_access_info` VALUES (131, '2019-04-24', 743);
INSERT INTO `website_access_info` VALUES (132, '2019-04-25', 653);
INSERT INTO `website_access_info` VALUES (133, '2019-04-26', 766);
INSERT INTO `website_access_info` VALUES (134, '2019-04-27', 857);
INSERT INTO `website_access_info` VALUES (135, '2019-04-28', 1037);
INSERT INTO `website_access_info` VALUES (136, '2019-04-29', 787);
INSERT INTO `website_access_info` VALUES (137, '2019-04-30', 2263);
INSERT INTO `website_access_info` VALUES (138, '2019-05-01', 923);
INSERT INTO `website_access_info` VALUES (139, '2019-05-02', 771);
INSERT INTO `website_access_info` VALUES (140, '2019-05-03', 698);
INSERT INTO `website_access_info` VALUES (141, '2019-05-04', 536);
INSERT INTO `website_access_info` VALUES (142, '2019-05-05', 574);
INSERT INTO `website_access_info` VALUES (143, '2019-05-06', 642);
INSERT INTO `website_access_info` VALUES (144, '2019-05-07', 965);
INSERT INTO `website_access_info` VALUES (145, '2019-05-08', 1032);
INSERT INTO `website_access_info` VALUES (146, '2019-05-09', 705);
INSERT INTO `website_access_info` VALUES (147, '2019-05-10', 535);
INSERT INTO `website_access_info` VALUES (148, '2019-05-11', 368);
INSERT INTO `website_access_info` VALUES (149, '2019-05-12', 748);
INSERT INTO `website_access_info` VALUES (150, '2019-05-13', 580);
INSERT INTO `website_access_info` VALUES (151, '2019-05-14', 862);
INSERT INTO `website_access_info` VALUES (152, '2019-05-15', 943);
INSERT INTO `website_access_info` VALUES (153, '2019-05-16', 764);
INSERT INTO `website_access_info` VALUES (154, '2019-05-17', 683);
INSERT INTO `website_access_info` VALUES (155, '2019-05-17', 683);
INSERT INTO `website_access_info` VALUES (156, '2019-05-17', 683);
INSERT INTO `website_access_info` VALUES (157, '2019-05-18', 525);
INSERT INTO `website_access_info` VALUES (158, '2019-05-18', 525);
INSERT INTO `website_access_info` VALUES (159, '2019-05-18', 525);
INSERT INTO `website_access_info` VALUES (160, '2019-05-19', 716);
INSERT INTO `website_access_info` VALUES (161, '2019-05-19', 716);
INSERT INTO `website_access_info` VALUES (162, '2019-05-19', 716);
INSERT INTO `website_access_info` VALUES (163, '2019-05-20', 820);
INSERT INTO `website_access_info` VALUES (164, '2019-05-20', 820);
INSERT INTO `website_access_info` VALUES (165, '2019-05-20', 820);
INSERT INTO `website_access_info` VALUES (166, '2019-05-21', 822);
INSERT INTO `website_access_info` VALUES (167, '2019-05-21', 822);
INSERT INTO `website_access_info` VALUES (168, '2019-05-21', 822);
INSERT INTO `website_access_info` VALUES (169, '2019-05-22', 757);
INSERT INTO `website_access_info` VALUES (170, '2019-05-22', 757);
INSERT INTO `website_access_info` VALUES (171, '2019-05-22', 757);
INSERT INTO `website_access_info` VALUES (172, '2019-05-23', 776);
INSERT INTO `website_access_info` VALUES (173, '2019-05-23', 776);
INSERT INTO `website_access_info` VALUES (174, '2019-05-23', 776);
INSERT INTO `website_access_info` VALUES (175, '2019-05-24', 665);
INSERT INTO `website_access_info` VALUES (176, '2019-05-24', 665);
INSERT INTO `website_access_info` VALUES (177, '2019-05-24', 665);
INSERT INTO `website_access_info` VALUES (178, '2019-05-25', 689);
INSERT INTO `website_access_info` VALUES (179, '2019-05-25', 689);
INSERT INTO `website_access_info` VALUES (180, '2019-05-25', 689);
INSERT INTO `website_access_info` VALUES (181, '2019-05-26', 586);
INSERT INTO `website_access_info` VALUES (182, '2019-05-26', 586);
INSERT INTO `website_access_info` VALUES (183, '2019-05-26', 586);
INSERT INTO `website_access_info` VALUES (184, '2019-05-27', 1079);
INSERT INTO `website_access_info` VALUES (185, '2019-05-27', 1079);
INSERT INTO `website_access_info` VALUES (186, '2019-05-27', 1079);
INSERT INTO `website_access_info` VALUES (187, '2019-05-28', 713);
INSERT INTO `website_access_info` VALUES (188, '2019-05-28', 713);
INSERT INTO `website_access_info` VALUES (189, '2019-05-28', 713);
INSERT INTO `website_access_info` VALUES (190, '2019-05-29', 912);
INSERT INTO `website_access_info` VALUES (191, '2019-05-29', 912);
INSERT INTO `website_access_info` VALUES (192, '2019-05-29', 912);
INSERT INTO `website_access_info` VALUES (193, '2019-05-30', 849);
INSERT INTO `website_access_info` VALUES (194, '2019-05-30', 849);
INSERT INTO `website_access_info` VALUES (195, '2019-05-30', 849);
INSERT INTO `website_access_info` VALUES (196, '2019-05-31', 798);
INSERT INTO `website_access_info` VALUES (197, '2019-05-31', 0);
INSERT INTO `website_access_info` VALUES (198, '2019-06-01', 983);
INSERT INTO `website_access_info` VALUES (199, '2019-06-01', 983);
INSERT INTO `website_access_info` VALUES (200, '2019-06-02', 653);
INSERT INTO `website_access_info` VALUES (201, '2019-06-03', 868);
INSERT INTO `website_access_info` VALUES (202, '2019-06-04', 2118);
INSERT INTO `website_access_info` VALUES (203, '2019-06-05', 781);
INSERT INTO `website_access_info` VALUES (204, '2019-06-06', 751);
INSERT INTO `website_access_info` VALUES (205, '2019-06-07', 556);
INSERT INTO `website_access_info` VALUES (206, '2019-06-08', 509);
INSERT INTO `website_access_info` VALUES (207, '2019-06-09', 822);
INSERT INTO `website_access_info` VALUES (208, '2019-06-10', 744);
INSERT INTO `website_access_info` VALUES (209, '2019-06-11', 1038);
INSERT INTO `website_access_info` VALUES (210, '2019-06-12', 825);
INSERT INTO `website_access_info` VALUES (211, '2019-06-13', 1162);
INSERT INTO `website_access_info` VALUES (212, '2019-06-14', 705);
INSERT INTO `website_access_info` VALUES (213, '2019-06-15', 523);
INSERT INTO `website_access_info` VALUES (214, '2019-06-16', 836);
INSERT INTO `website_access_info` VALUES (215, '2019-06-17', 782);
INSERT INTO `website_access_info` VALUES (216, '2019-06-18', 757);
INSERT INTO `website_access_info` VALUES (217, '2019-06-19', 799);
INSERT INTO `website_access_info` VALUES (218, '2019-06-20', 1020);
INSERT INTO `website_access_info` VALUES (219, '2019-06-21', 618);
INSERT INTO `website_access_info` VALUES (220, '2019-06-22', 660);
INSERT INTO `website_access_info` VALUES (221, '2019-06-23', 588);
INSERT INTO `website_access_info` VALUES (222, '2019-06-24', 1217);
INSERT INTO `website_access_info` VALUES (223, '2019-06-25', 882);
INSERT INTO `website_access_info` VALUES (224, '2019-06-26', 955);
INSERT INTO `website_access_info` VALUES (225, '2019-06-27', 1462);
INSERT INTO `website_access_info` VALUES (226, '2019-06-28', 947);
INSERT INTO `website_access_info` VALUES (227, '2019-06-29', 740);
INSERT INTO `website_access_info` VALUES (228, '2019-06-30', 557);
INSERT INTO `website_access_info` VALUES (229, '2019-07-01', 1014);
COMMIT;

-- ----------------------------
-- Table structure for website_system_info
-- ----------------------------
DROP TABLE IF EXISTS `website_system_info`;
CREATE TABLE `website_system_info` (
  `ID` int(11) NOT NULL,
  `TOTAL_WEBSITE_VISITS` int(11) DEFAULT NULL,
  `TODAY_WEBSITE_VISITS` int(11) DEFAULT NULL,
  `MONTH_WEBSITE_VISITS` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of website_system_info
-- ----------------------------
BEGIN;
INSERT INTO `website_system_info` VALUES (1, 247143, 461, 1475);
COMMIT;

-- ----------------------------
-- Table structure for website_system_property
-- ----------------------------
DROP TABLE IF EXISTS `website_system_property`;
CREATE TABLE `website_system_property` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `WEBSITE_URL` varchar(1000) DEFAULT NULL COMMENT '网站地址',
  `WEBSITE_NAME` varchar(1000) DEFAULT NULL COMMENT '网站名称',
  `DOMAIN_NAME` varchar(1000) DEFAULT NULL COMMENT '网站域名',
  `BEIAN_NUMBER` varchar(1000) DEFAULT NULL COMMENT '网站备案号',
  `WECHAT_NAME` varchar(1000) DEFAULT NULL COMMENT 'wechat图片名称',
  `WEIBO_URL` varchar(1000) DEFAULT NULL COMMENT '微博地址',
  `GITEE_URL` varchar(1000) DEFAULT NULL COMMENT '码云地址',
  `EMAIL_URL` varchar(1000) DEFAULT NULL COMMENT '个人邮箱地址',
  `CSDE_URL` varchar(1000) DEFAULT NULL COMMENT 'csdn地址',
  `BLOG_URL` varchar(1000) DEFAULT NULL COMMENT '其他博客地址，例如博客园等',
  `JIANSHU_URL` varchar(1000) DEFAULT NULL COMMENT '简书地址',
  `GONGZHONGHAO_NAME` varchar(1000) DEFAULT NULL COMMENT '个人公众号',
  `GONGZHONGHAO_TURENAME` varchar(1000) DEFAULT NULL COMMENT '公众号图片名称',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of website_system_property
-- ----------------------------
BEGIN;
INSERT INTO `website_system_property` VALUES (1, 'https://www.dalaoyang.cn', 'Dalaoyang', 'Dalaoyang.cn', '辽ICP备17014944号-1', 'dalaoyang.jpeg', 'https://weibo.com/2886438580/profile?topnav=1&wvr=6', 'https://gitee.com/dalaoyang', 'yangyang@dalaoyang.cn', 'https://blog.csdn.net/qq_33257527', 'https://www.imooc.com/u/6841077', 'https://www.jianshu.com/u/128b6effde53', 'dalaoyang_gongzhonghao.jpg', 'dalaoyang');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
